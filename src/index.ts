import ExpressApp from './infrastructure/api/express-app';
import { appConfig } from './config';

const expressApp = new ExpressApp(appConfig.express);

expressApp.start(true);

// // import serverlessExpress from '@vendia/serverless-express';
// // import { Application } from 'express';
// // import ExpressApp from './infrastructure/api/express-app';
// // import { appConfig } from './config';
// import { Application } from 'express';
// import { TextDecoder, TextEncoder } from 'util';
// import CreateLineageController from './infrastructure/api/controllers/create-lineage-controller';
// import iocRegister from './infrastructure/ioc-register';
// import {
//   InternalInvokeType,
//   parseInternalInvokeType,
// } from './infrastructure/shared/internal-invoke-controller';
// import { CreateLineageRequestDto } from './domain/lineage/create-lineage';
// import ExpressApp from './infrastructure/api/express-app';
// import { appConfig } from './config';


// // let serverlessExpressInstance: any;

// const asyncTask = (): Promise<Application> => {
//   const expressApp = new ExpressApp(appConfig.express);

//   return expressApp.start(false);
// };

// // const setup = async (event: any, context: any): Promise<any> => {
// //   const app = await asyncTask();
// //   serverlessExpressInstance = serverlessExpress({
// //     app,
// //   });
// //   return serverlessExpressInstance(event, context);
// // };

// // const getServerlessExpressInstance = async (
// //   event: any,
// //   context: any
// // ): Promise<any> => {
// //   if (serverlessExpressInstance)
// //     return Promise.resolve(serverlessExpressInstance(event, context));

// //   return setup(event, context);
// // };

// const internalInvoke = async (
//   event: any,
//   internalInvokeType: InternalInvokeType
// ): Promise<any> => {
//   if (!event.auth.jwt)
//     throw new Error(
//       `Cannot invoke ${internalInvokeType}. Missing auth params.`
//     );

//   const createLineageController = new CreateLineageController(
//     iocRegister.resolve('createLineage'),
//     iocRegister.resolve('getAccounts'),
//     iocRegister.resolve('dbo')
//   );

//   switch (internalInvokeType) {
//     case 'create-lineage': {
//       if (
//         !event.req.catalog ||
//         !event.req.manifest ||
//         !event.req.targetOrganizationId
//       )
//         throw new Error(
//           `Cannot invoke ${internalInvokeType}. Missing req params.`
//         );

//       const req: CreateLineageRequestDto = {
//         catalog: event.req.catalog,
//         manifest: event.req.manifest,
//         targetOrganizationId: event.req.targetOrganizationId,
//         biType: event.req.biType,
//         lineageCreatedAt: event.req.lineageCreatedAt,
//         lineageId: event.req.lineageId,
//       };

//       const auth = { jwt: event.auth.jwt };

//       const res = await createLineageController.execute({
//         internalInvokeType: 'create-lineage',
//         req,
//         auth,
//       });

//       return res;
//     }
//     default:
//       throw new Error('Unhandled invoke type provided');
//   }
// };

// // const event = {
// //   internalInvokeType: 'create-lineage',
// //   auth: {
// //     jwt: 'eyJraWQiOiJrVkFzOUJSbGE5M3IrUStZdm5tS1I1UTlcL21WcEVyQlphRUNXZitFdnpVWT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIzbzAyOW5qaTE1NHYwYm0xMDloa3Zrb2k1aCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoic3lzdGVtLWludGVybmFsXC9zeXN0ZW0taW50ZXJuYWwiLCJhdXRoX3RpbWUiOjE2NjI1ODAxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbVwvZXUtY2VudHJhbC0xXzBaOEpoRmo4eiIsImV4cCI6MTY2MjU4Mzc0NiwiaWF0IjoxNjYyNTgwMTQ2LCJ2ZXJzaW9uIjoyLCJqdGkiOiJlZjA5NTJlMy0zNTNkLTRhNzQtYmJlYi01MWQzMzg0NWY0NDUiLCJjbGllbnRfaWQiOiIzbzAyOW5qaTE1NHYwYm0xMDloa3Zrb2k1aCJ9.SB3k-7OZDjYoB1YYVnU3nPLPsms8DmfsMCxm8r8GsPXmFiBF2ZvDNIajYAfRWP-HMATfjximnybp-O8LliTpMBCUWTU3rajk5wA5QVx_Cte8_XQ7MLAdMybMPxv9VSCNrS5CAox69nEfMje8A7wYbs5--48dz3R_o5vYT1QJFe75d3djlID_F3g23MmZEU0bTshF7v389vKZSaECEo8-SOVZxC-52MmHjDrjSpGTIPlViVk-TBXCqAxZV75DkgFFy5I2PW6rkmp7NkhDmQOq6wPG930Z2Ib1Md3fDK6sjilxYlv5FdXW23GPX6Fh8gqPZ1PSWhJRbtJroHIi5R-vhg',
// //   },
// //   req: {
// //     catalog: 'abc',
// //     manifest: 'abc',
// //     targetOrganizationId: 'abc',
// //     biType: 'abc',
// //     lineageCreatedAt: 'abc',
// //     lineageId: 'abc',
// //   },
// // };

// // eslint-disable-next-line import/prefer-default-export
// export const payload = {
//   internalInvokeType: 'create-lineage',
//   auth: {
//     jwt: 'eyJraWQiOiJrVkFzOUJSbGE5M3IrUStZdm5tS1I1UTlcL21WcEVyQlphRUNXZitFdnpVWT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIzbzAyOW5qaTE1NHYwYm0xMDloa3Zrb2k1aCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoic3lzdGVtLWludGVybmFsXC9zeXN0ZW0taW50ZXJuYWwiLCJhdXRoX3RpbWUiOjE2NjI3MzYwNjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbVwvZXUtY2VudHJhbC0xXzBaOEpoRmo4eiIsImV4cCI6MTY2MjczOTY2NSwiaWF0IjoxNjYyNzM2MDY1LCJ2ZXJzaW9uIjoyLCJqdGkiOiI2OTg2ZGYyOC0wM2Q1LTQ4ODgtYTE2MC1iZjA2NGJhMTQ4OGEiLCJjbGllbnRfaWQiOiIzbzAyOW5qaTE1NHYwYm0xMDloa3Zrb2k1aCJ9.5Quz5ewEzpS6YxN6VG9Q7bdGqDnJcdVn2OYK6aFlLVomTB874GEjGQomrrKODy8DylfNEGV8bUORG1NebSfwmlrOnxo3qCGjQu42YCBc05jbwxkngrERIxEkWVjq-zkr-5ajRdsOKr71z9uw3bk5otYn4DJq2reHPeM3cBAZT13lObti6xxT9eqSrnrMq-RAoOOcaiRq826ZWyqIKBgNEI_2T7EDNRRtOcrW2nWBsK0HIy1-hdejgtV34JGgAblIaPN0BoLtO-0Bn1RJPXBtqoaPIs65DxkqgmfgmRb4PY5RUPTpf8y2lpNSXe4X_H45yICk_RDmiS1X5INgPjn8UA',
//   },
//   req: {
//     catalog:
//       '{
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/catalog/v1.json",
    "dbt_version": "0.21.1",
    "generated_at": "2022-03-25T11:50:15.088966Z",
    "invocation_id": "79796819-7a70-476a-ae92-10d57002c03c",
    "env": {}
  },
  "nodes": {
    "model.snowflake_usage.V_COLUMNS_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_COLUMNS_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_COLUMN_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_COLUMN_DLHK",
          "comment": null
        },
        "K_TABLE_DLHK": {
          "type": "TEXT",
          "index": 2,
          "name": "K_TABLE_DLHK",
          "comment": null
        },
        "K_DATABASE_DLHK": {
          "type": "TEXT",
          "index": 3,
          "name": "K_DATABASE_DLHK",
          "comment": null
        },
        "K_UNIQUE_TABLE_DLHK": {
          "type": "TEXT",
          "index": 4,
          "name": "K_UNIQUE_TABLE_DLHK",
          "comment": null
        },
        "K_COLUMN_BK": {
          "type": "NUMBER",
          "index": 5,
          "name": "K_COLUMN_BK",
          "comment": null
        },
        "K_TABLE_BK": {
          "type": "NUMBER",
          "index": 6,
          "name": "K_TABLE_BK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 7,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "K_TABLE_SCHEMA_BK": {
          "type": "NUMBER",
          "index": 8,
          "name": "K_TABLE_SCHEMA_BK",
          "comment": null
        },
        "A_CHARACTER_SET_CATALOG": {
          "type": "TEXT",
          "index": 9,
          "name": "A_CHARACTER_SET_CATALOG",
          "comment": null
        },
        "A_CHARACTER_SET_NAME": {
          "type": "TEXT",
          "index": 10,
          "name": "A_CHARACTER_SET_NAME",
          "comment": null
        },
        "A_CHARACTER_SET_SCHEMA": {
          "type": "TEXT",
          "index": 11,
          "name": "A_CHARACTER_SET_SCHEMA",
          "comment": null
        },
        "A_COLLATION_CATALOG": {
          "type": "TEXT",
          "index": 12,
          "name": "A_COLLATION_CATALOG",
          "comment": null
        },
        "A_COLLATION_NAME": {
          "type": "TEXT",
          "index": 13,
          "name": "A_COLLATION_NAME",
          "comment": null
        },
        "A_COLLATION_SCHEMA": {
          "type": "TEXT",
          "index": 14,
          "name": "A_COLLATION_SCHEMA",
          "comment": null
        },
        "A_COLUMN_DEFAULT": {
          "type": "TEXT",
          "index": 15,
          "name": "A_COLUMN_DEFAULT",
          "comment": null
        },
        "A_COLUMN_NAME": {
          "type": "TEXT",
          "index": 16,
          "name": "A_COLUMN_NAME",
          "comment": null
        },
        "A_COMMENT": {
          "type": "TEXT",
          "index": 17,
          "name": "A_COMMENT",
          "comment": null
        },
        "A_DATA_TYPE": {
          "type": "TEXT",
          "index": 18,
          "name": "A_DATA_TYPE",
          "comment": null
        },
        "A_DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 19,
          "name": "A_DELETED",
          "comment": null
        },
        "A_DOMAIN_CATALOG": {
          "type": "TEXT",
          "index": 20,
          "name": "A_DOMAIN_CATALOG",
          "comment": null
        },
        "A_DOMAIN_NAME": {
          "type": "TEXT",
          "index": 21,
          "name": "A_DOMAIN_NAME",
          "comment": null
        },
        "A_DOMAIN_SCHEMA": {
          "type": "TEXT",
          "index": 22,
          "name": "A_DOMAIN_SCHEMA",
          "comment": null
        },
        "A_INTERVAL_PRECISION": {
          "type": "TEXT",
          "index": 23,
          "name": "A_INTERVAL_PRECISION",
          "comment": null
        },
        "A_INTERVAL_TYPE": {
          "type": "TEXT",
          "index": 24,
          "name": "A_INTERVAL_TYPE",
          "comment": null
        },
        "A_MAXIMUM_CARDINALITY": {
          "type": "TEXT",
          "index": 25,
          "name": "A_MAXIMUM_CARDINALITY",
          "comment": null
        },
        "A_SCOPE_CATALOG": {
          "type": "TEXT",
          "index": 26,
          "name": "A_SCOPE_CATALOG",
          "comment": null
        },
        "A_SCOPE_NAME": {
          "type": "TEXT",
          "index": 27,
          "name": "A_SCOPE_NAME",
          "comment": null
        },
        "A_SCOPE_SCHEMA": {
          "type": "TEXT",
          "index": 28,
          "name": "A_SCOPE_SCHEMA",
          "comment": null
        },
        "A_TABLE_CATALOG": {
          "type": "TEXT",
          "index": 29,
          "name": "A_TABLE_CATALOG",
          "comment": null
        },
        "A_TABLE_NAME": {
          "type": "TEXT",
          "index": 30,
          "name": "A_TABLE_NAME",
          "comment": null
        },
        "A_TABLE_SCHEMA": {
          "type": "TEXT",
          "index": 31,
          "name": "A_TABLE_SCHEMA",
          "comment": null
        },
        "A_UDT_CATALOG": {
          "type": "TEXT",
          "index": 32,
          "name": "A_UDT_CATALOG",
          "comment": null
        },
        "A_UDT_NAME": {
          "type": "TEXT",
          "index": 33,
          "name": "A_UDT_NAME",
          "comment": null
        },
        "A_UDT_SCHEMA": {
          "type": "TEXT",
          "index": 34,
          "name": "A_UDT_SCHEMA",
          "comment": null
        },
        "A_DTD_BKENTIFIER": {
          "type": "TEXT",
          "index": 35,
          "name": "A_DTD_BKENTIFIER",
          "comment": null
        },
        "A_IDENTITY_CYCLE": {
          "type": "TEXT",
          "index": 36,
          "name": "A_IDENTITY_CYCLE",
          "comment": null
        },
        "A_IDENTITY_GENERATION": {
          "type": "TEXT",
          "index": 37,
          "name": "A_IDENTITY_GENERATION",
          "comment": null
        },
        "A_IDENTITY_INCREMENT": {
          "type": "TEXT",
          "index": 38,
          "name": "A_IDENTITY_INCREMENT",
          "comment": null
        },
        "A_IDENTITY_MAXIMUM": {
          "type": "TEXT",
          "index": 39,
          "name": "A_IDENTITY_MAXIMUM",
          "comment": null
        },
        "A_IDENTITY_MINIMUM": {
          "type": "TEXT",
          "index": 40,
          "name": "A_IDENTITY_MINIMUM",
          "comment": null
        },
        "A_IDENTITY_START": {
          "type": "TEXT",
          "index": 41,
          "name": "A_IDENTITY_START",
          "comment": null
        },
        "B_IS_BKENTITY": {
          "type": "BOOLEAN",
          "index": 42,
          "name": "B_IS_BKENTITY",
          "comment": null
        },
        "A_IS_NULLABLE": {
          "type": "BOOLEAN",
          "index": 43,
          "name": "A_IS_NULLABLE",
          "comment": null
        },
        "A_IS_SELF_REFERENCING": {
          "type": "BOOLEAN",
          "index": 44,
          "name": "A_IS_SELF_REFERENCING",
          "comment": null
        },
        "M_CHARACTER_MAXIMUM_LENGTH": {
          "type": "NUMBER",
          "index": 45,
          "name": "M_CHARACTER_MAXIMUM_LENGTH",
          "comment": null
        },
        "M_CHARACTER_OCTET_LENGTH": {
          "type": "NUMBER",
          "index": 46,
          "name": "M_CHARACTER_OCTET_LENGTH",
          "comment": null
        },
        "M_DATETIME_PRECISION": {
          "type": "NUMBER",
          "index": 47,
          "name": "M_DATETIME_PRECISION",
          "comment": null
        },
        "M_NUMERIC_PRECISION": {
          "type": "NUMBER",
          "index": 48,
          "name": "M_NUMERIC_PRECISION",
          "comment": null
        },
        "M_NUMERIC_PRECISION_RADIX": {
          "type": "NUMBER",
          "index": 49,
          "name": "M_NUMERIC_PRECISION_RADIX",
          "comment": null
        },
        "M_NUMERIC_SCALE": {
          "type": "NUMBER",
          "index": 50,
          "name": "M_NUMERIC_SCALE",
          "comment": null
        },
        "M_ORDINAL_POSITION": {
          "type": "NUMBER",
          "index": 51,
          "name": "M_ORDINAL_POSITION",
          "comment": null
        },
        "MD_VALID_TO_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 52,
          "name": "MD_VALID_TO_DTS",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 53,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 54,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 55,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_COLUMNS_STG"
    },
    "model.snowflake_usage.V_DAILY_STORAGE_USAGE_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_DAILY_STORAGE_USAGE_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_STORAGE_USAGE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_STORAGE_USAGE_DLHK",
          "comment": null
        },
        "A_USAGE_DATE": {
          "type": "DATE",
          "index": 2,
          "name": "A_USAGE_DATE",
          "comment": null
        },
        "M_STORAGE_BYTES": {
          "type": "NUMBER",
          "index": 3,
          "name": "M_STORAGE_BYTES",
          "comment": null
        },
        "M_STAGE_BYTES": {
          "type": "NUMBER",
          "index": 4,
          "name": "M_STAGE_BYTES",
          "comment": null
        },
        "M_FAILSAFE_BYTES": {
          "type": "NUMBER",
          "index": 5,
          "name": "M_FAILSAFE_BYTES",
          "comment": null
        },
        "M_STORAGE_TERABYTES": {
          "type": "FLOAT",
          "index": 6,
          "name": "M_STORAGE_TERABYTES",
          "comment": null
        },
        "M_STAGE_TERABYTES": {
          "type": "FLOAT",
          "index": 7,
          "name": "M_STAGE_TERABYTES",
          "comment": null
        },
        "M_FAILSAFE_TERABYTES": {
          "type": "FLOAT",
          "index": 8,
          "name": "M_FAILSAFE_TERABYTES",
          "comment": null
        },
        "M_BILLABLE_TB": {
          "type": "FLOAT",
          "index": 9,
          "name": "M_BILLABLE_TB",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 10,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 11,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_DAILY_STORAGE_USAGE_STG"
    },
    "model.snowflake_usage.V_DAILY_RATE_SHEET_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_DAILY_RATE_SHEET_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "A_DATE": {
          "type": "DATE",
          "index": 1,
          "name": "A_DATE",
          "comment": null
        },
        "K_ACCOUNT_DLHK": {
          "type": "TEXT",
          "index": 2,
          "name": "K_ACCOUNT_DLHK",
          "comment": null
        },
        "K_ACCOUNT_BK": {
          "type": "TEXT",
          "index": 3,
          "name": "K_ACCOUNT_BK",
          "comment": null
        },
        "A_ACCONT_NAME": {
          "type": "TEXT",
          "index": 4,
          "name": "A_ACCONT_NAME",
          "comment": null
        },
        "A_CURRENCY": {
          "type": "TEXT",
          "index": 5,
          "name": "A_CURRENCY",
          "comment": null
        },
        "A_ORGANIZATION_NAME": {
          "type": "TEXT",
          "index": 6,
          "name": "A_ORGANIZATION_NAME",
          "comment": null
        },
        "A_REGION": {
          "type": "TEXT",
          "index": 7,
          "name": "A_REGION",
          "comment": null
        },
        "A_SERVICE_LEVEL": {
          "type": "TEXT",
          "index": 8,
          "name": "A_SERVICE_LEVEL",
          "comment": null
        },
        "A_SERVICE_TYPE": {
          "type": "TEXT",
          "index": 9,
          "name": "A_SERVICE_TYPE",
          "comment": null
        },
        "A_USAGE_TYPE": {
          "type": "TEXT",
          "index": 10,
          "name": "A_USAGE_TYPE",
          "comment": null
        },
        "M_CONTRACT_NUMBER": {
          "type": "NUMBER",
          "index": 11,
          "name": "M_CONTRACT_NUMBER",
          "comment": null
        },
        "M_EFFECTIVE_RATE": {
          "type": "NUMBER",
          "index": 12,
          "name": "M_EFFECTIVE_RATE",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 13,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 14,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_DAILY_RATE_SHEET_STG"
    },
    "model.snowflake_usage.W_DAILY_STORAGE_USAGE_F": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_DAILY_STORAGE_USAGE_F",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_STORAGE_USAGE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_STORAGE_USAGE_DLHK",
          "comment": null
        },
        "A_USAGE_DATE": {
          "type": "DATE",
          "index": 2,
          "name": "A_USAGE_DATE",
          "comment": null
        },
        "M_STORAGE_BYTES": {
          "type": "NUMBER",
          "index": 3,
          "name": "M_STORAGE_BYTES",
          "comment": null
        },
        "M_STAGE_BYTES": {
          "type": "NUMBER",
          "index": 4,
          "name": "M_STAGE_BYTES",
          "comment": null
        },
        "M_FAILSAFE_BYTES": {
          "type": "NUMBER",
          "index": 5,
          "name": "M_FAILSAFE_BYTES",
          "comment": null
        },
        "M_STORAGE_TERABYTES": {
          "type": "FLOAT",
          "index": 6,
          "name": "M_STORAGE_TERABYTES",
          "comment": null
        },
        "M_STAGE_TERABYTES": {
          "type": "FLOAT",
          "index": 7,
          "name": "M_STAGE_TERABYTES",
          "comment": null
        },
        "M_FAILSAFE_TERABYTES": {
          "type": "FLOAT",
          "index": 8,
          "name": "M_FAILSAFE_TERABYTES",
          "comment": null
        },
        "M_BILLABLE_TB": {
          "type": "FLOAT",
          "index": 9,
          "name": "M_BILLABLE_TB",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 10,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 11,
          "name": "MD_INTGR_ID",
          "comment": null
        },
        "M_AMOUNT_BILLABLE_STAGE": {
          "type": "FLOAT",
          "index": 12,
          "name": "M_AMOUNT_BILLABLE_STAGE",
          "comment": null
        },
        "M_AMOUNT_BILLABLE_STORAGE": {
          "type": "FLOAT",
          "index": 13,
          "name": "M_AMOUNT_BILLABLE_STORAGE",
          "comment": null
        },
        "M_AMOUNT_BILLABLE_FAILSAFE": {
          "type": "FLOAT",
          "index": 14,
          "name": "M_AMOUNT_BILLABLE_FAILSAFE",
          "comment": null
        },
        "M_AMOUNT_BILLABLE": {
          "type": "FLOAT",
          "index": 15,
          "name": "M_AMOUNT_BILLABLE",
          "comment": null
        },
        "M_STORAGE_RATE": {
          "type": "NUMBER",
          "index": 16,
          "name": "M_STORAGE_RATE",
          "comment": null
        },
        "A_RATE_CURRENCY": {
          "type": "TEXT",
          "index": 17,
          "name": "A_RATE_CURRENCY",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:39UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 75264.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 389.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_DAILY_STORAGE_USAGE_F"
    },
    "model.snowflake_usage.V_USERS_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_USERS_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_USER_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_USER_DLHK",
          "comment": null
        },
        "A_USERNAME": {
          "type": "TEXT",
          "index": 2,
          "name": "A_USERNAME",
          "comment": null
        },
        "A_BYPASS_MFA_UNTIL": {
          "type": "TIMESTAMP_LTZ",
          "index": 3,
          "name": "A_BYPASS_MFA_UNTIL",
          "comment": null
        },
        "A_COMMENT": {
          "type": "TEXT",
          "index": 4,
          "name": "A_COMMENT",
          "comment": null
        },
        "A_DEFAULT_NAMESPACE": {
          "type": "TEXT",
          "index": 5,
          "name": "A_DEFAULT_NAMESPACE",
          "comment": null
        },
        "A_DEFAULT_ROLE": {
          "type": "TEXT",
          "index": 6,
          "name": "A_DEFAULT_ROLE",
          "comment": null
        },
        "A_DEFAULT_WAREHOUSE": {
          "type": "TEXT",
          "index": 7,
          "name": "A_DEFAULT_WAREHOUSE",
          "comment": null
        },
        "A_DISABLED": {
          "type": "VARIANT",
          "index": 8,
          "name": "A_DISABLED",
          "comment": null
        },
        "A_DISPLAY_NAME": {
          "type": "TEXT",
          "index": 9,
          "name": "A_DISPLAY_NAME",
          "comment": null
        },
        "A_EMAIL": {
          "type": "TEXT",
          "index": 10,
          "name": "A_EMAIL",
          "comment": null
        },
        "A_EXT_AUTHN_DUO": {
          "type": "VARIANT",
          "index": 11,
          "name": "A_EXT_AUTHN_DUO",
          "comment": null
        },
        "A_FIRST_NAME": {
          "type": "TEXT",
          "index": 12,
          "name": "A_FIRST_NAME",
          "comment": null
        },
        "A_LAST_NAME": {
          "type": "TEXT",
          "index": 13,
          "name": "A_LAST_NAME",
          "comment": null
        },
        "A_LAST_SUCCESS_LOGIN": {
          "type": "TIMESTAMP_LTZ",
          "index": 14,
          "name": "A_LAST_SUCCESS_LOGIN",
          "comment": null
        },
        "A_LOCKED_UNTIL_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 15,
          "name": "A_LOCKED_UNTIL_TIME",
          "comment": null
        },
        "A_LOGIN_NAME": {
          "type": "TEXT",
          "index": 16,
          "name": "A_LOGIN_NAME",
          "comment": null
        },
        "A_PASSWORD_LAST_SET_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 17,
          "name": "A_PASSWORD_LAST_SET_TIME",
          "comment": null
        },
        "A_EXT_AUTHN_UID": {
          "type": "TEXT",
          "index": 18,
          "name": "A_EXT_AUTHN_UID",
          "comment": null
        },
        "A_EXPIRES_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 19,
          "name": "A_EXPIRES_AT_DTS",
          "comment": null
        },
        "B_HAS_PASSWORD": {
          "type": "BOOLEAN",
          "index": 20,
          "name": "B_HAS_PASSWORD",
          "comment": null
        },
        "B_HAS_RSA_PUBLIC_KEY": {
          "type": "BOOLEAN",
          "index": 21,
          "name": "B_HAS_RSA_PUBLIC_KEY",
          "comment": null
        },
        "B_MUST_CHANGE_PASSWORD": {
          "type": "BOOLEAN",
          "index": 22,
          "name": "B_MUST_CHANGE_PASSWORD",
          "comment": null
        },
        "B_SNOWFLAKE_LOCK": {
          "type": "BOOLEAN",
          "index": 23,
          "name": "B_SNOWFLAKE_LOCK",
          "comment": null
        },
        "B_DISABLED": {
          "type": "BOOLEAN",
          "index": 24,
          "name": "B_DISABLED",
          "comment": null
        },
        "MD_VALID_FROM_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 25,
          "name": "MD_VALID_FROM_DTS",
          "comment": null
        },
        "MD_VALID_TO_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 26,
          "name": "MD_VALID_TO_DTS",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 27,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 28,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 29,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_USERS_STG"
    },
    "model.snowflake_usage.W_DATABASES_D": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_DATABASES_D",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_DATABASE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_DATABASE_DLHK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 2,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "A_DATABASE_NAME": {
          "type": "TEXT",
          "index": 3,
          "name": "A_DATABASE_NAME",
          "comment": null
        },
        "A_DATABASE_OWNER": {
          "type": "TEXT",
          "index": 4,
          "name": "A_DATABASE_OWNER",
          "comment": null
        },
        "A_COMMENT": {
          "type": "TEXT",
          "index": 5,
          "name": "A_COMMENT",
          "comment": null
        },
        "A_LAST_ALTERED_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 6,
          "name": "A_LAST_ALTERED_AT_DTS",
          "comment": null
        },
        "A_CREATED_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 7,
          "name": "A_CREATED_AT_DTS",
          "comment": null
        },
        "A_DELETED_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 8,
          "name": "A_DELETED_AT_DTS",
          "comment": null
        },
        "B_IS_TRANSIENT": {
          "type": "BOOLEAN",
          "index": 9,
          "name": "B_IS_TRANSIENT",
          "comment": null
        },
        "M_RETENTION_TIME": {
          "type": "NUMBER",
          "index": 10,
          "name": "M_RETENTION_TIME",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 11,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 12,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 13,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:39UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 38912.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 34.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_DATABASES_D"
    },
    "model.snowflake_usage.V_DATABASE_DAILY_STORAGE_USAGE_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_DATABASE_DAILY_STORAGE_USAGE_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_DATABASE_STORAGE_USAGE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_DATABASE_STORAGE_USAGE_DLHK",
          "comment": null
        },
        "A_USAGE_DATE": {
          "type": "DATE",
          "index": 2,
          "name": "A_USAGE_DATE",
          "comment": null
        },
        "K_DATABASE_DLHK": {
          "type": "TEXT",
          "index": 3,
          "name": "K_DATABASE_DLHK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 4,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "M_AVERAGE_DATABASE_BYTES": {
          "type": "FLOAT",
          "index": 5,
          "name": "M_AVERAGE_DATABASE_BYTES",
          "comment": null
        },
        "M_AVERAGE_FAILSAFE_BYTES": {
          "type": "FLOAT",
          "index": 6,
          "name": "M_AVERAGE_FAILSAFE_BYTES",
          "comment": null
        },
        "M_AVERAGE_DATABASE_TERABYTES": {
          "type": "NUMBER",
          "index": 7,
          "name": "M_AVERAGE_DATABASE_TERABYTES",
          "comment": null
        },
        "M_AVERAGE_FAILSAFE_TERABYTES": {
          "type": "NUMBER",
          "index": 8,
          "name": "M_AVERAGE_FAILSAFE_TERABYTES",
          "comment": null
        },
        "M_BILLABLE_TB": {
          "type": "NUMBER",
          "index": 9,
          "name": "M_BILLABLE_TB",
          "comment": null
        },
        "MD_VALID_TO_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 10,
          "name": "MD_VALID_TO_DTS",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 11,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 12,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 13,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_DATABASE_DAILY_STORAGE_USAGE_STG"
    },
    "model.snowflake_usage.W_USERS_D": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_USERS_D",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_USER_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_USER_DLHK",
          "comment": null
        },
        "A_USERNAME": {
          "type": "TEXT",
          "index": 2,
          "name": "A_USERNAME",
          "comment": null
        },
        "A_BYPASS_MFA_UNTIL": {
          "type": "TIMESTAMP_LTZ",
          "index": 3,
          "name": "A_BYPASS_MFA_UNTIL",
          "comment": null
        },
        "A_COMMENT": {
          "type": "TEXT",
          "index": 4,
          "name": "A_COMMENT",
          "comment": null
        },
        "A_DEFAULT_NAMESPACE": {
          "type": "TEXT",
          "index": 5,
          "name": "A_DEFAULT_NAMESPACE",
          "comment": null
        },
        "A_DEFAULT_ROLE": {
          "type": "TEXT",
          "index": 6,
          "name": "A_DEFAULT_ROLE",
          "comment": null
        },
        "A_DEFAULT_WAREHOUSE": {
          "type": "TEXT",
          "index": 7,
          "name": "A_DEFAULT_WAREHOUSE",
          "comment": null
        },
        "A_DISABLED": {
          "type": "VARIANT",
          "index": 8,
          "name": "A_DISABLED",
          "comment": null
        },
        "A_DISPLAY_NAME": {
          "type": "TEXT",
          "index": 9,
          "name": "A_DISPLAY_NAME",
          "comment": null
        },
        "A_EMAIL": {
          "type": "TEXT",
          "index": 10,
          "name": "A_EMAIL",
          "comment": null
        },
        "A_EXT_AUTHN_DUO": {
          "type": "VARIANT",
          "index": 11,
          "name": "A_EXT_AUTHN_DUO",
          "comment": null
        },
        "A_FIRST_NAME": {
          "type": "TEXT",
          "index": 12,
          "name": "A_FIRST_NAME",
          "comment": null
        },
        "A_LAST_NAME": {
          "type": "TEXT",
          "index": 13,
          "name": "A_LAST_NAME",
          "comment": null
        },
        "A_LAST_SUCCESS_LOGIN": {
          "type": "TIMESTAMP_LTZ",
          "index": 14,
          "name": "A_LAST_SUCCESS_LOGIN",
          "comment": null
        },
        "A_LOCKED_UNTIL_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 15,
          "name": "A_LOCKED_UNTIL_TIME",
          "comment": null
        },
        "A_LOGIN_NAME": {
          "type": "TEXT",
          "index": 16,
          "name": "A_LOGIN_NAME",
          "comment": null
        },
        "A_PASSWORD_LAST_SET_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 17,
          "name": "A_PASSWORD_LAST_SET_TIME",
          "comment": null
        },
        "A_EXT_AUTHN_UID": {
          "type": "TEXT",
          "index": 18,
          "name": "A_EXT_AUTHN_UID",
          "comment": null
        },
        "A_EXPIRES_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 19,
          "name": "A_EXPIRES_AT_DTS",
          "comment": null
        },
        "B_HAS_PASSWORD": {
          "type": "BOOLEAN",
          "index": 20,
          "name": "B_HAS_PASSWORD",
          "comment": null
        },
        "B_HAS_RSA_PUBLIC_KEY": {
          "type": "BOOLEAN",
          "index": 21,
          "name": "B_HAS_RSA_PUBLIC_KEY",
          "comment": null
        },
        "B_MUST_CHANGE_PASSWORD": {
          "type": "BOOLEAN",
          "index": 22,
          "name": "B_MUST_CHANGE_PASSWORD",
          "comment": null
        },
        "B_SNOWFLAKE_LOCK": {
          "type": "BOOLEAN",
          "index": 23,
          "name": "B_SNOWFLAKE_LOCK",
          "comment": null
        },
        "B_DISABLED": {
          "type": "BOOLEAN",
          "index": 24,
          "name": "B_DISABLED",
          "comment": null
        },
        "MD_VALID_FROM_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 25,
          "name": "MD_VALID_FROM_DTS",
          "comment": null
        },
        "MD_VALID_TO_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 26,
          "name": "MD_VALID_TO_DTS",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 27,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 28,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 29,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:40UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 13824.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 28.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_USERS_D"
    },
    "model.snowflake_usage.W_WAREHOUSE_USAGE_F": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_WAREHOUSE_USAGE_F",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_WAREHOUSE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_WAREHOUSE_DLHK",
          "comment": null
        },
        "K_WAREHOUSE_BK": {
          "type": "NUMBER",
          "index": 2,
          "name": "K_WAREHOUSE_BK",
          "comment": null
        },
        "A_START_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 3,
          "name": "A_START_TIME",
          "comment": null
        },
        "A_END_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 4,
          "name": "A_END_TIME",
          "comment": null
        },
        "A_WAREHOUSE_NAME": {
          "type": "TEXT",
          "index": 5,
          "name": "A_WAREHOUSE_NAME",
          "comment": null
        },
        "M_CREDITS_USED": {
          "type": "NUMBER",
          "index": 6,
          "name": "M_CREDITS_USED",
          "comment": null
        },
        "M_CREDITS_USED_CLOUD_SERVICES": {
          "type": "NUMBER",
          "index": 7,
          "name": "M_CREDITS_USED_CLOUD_SERVICES",
          "comment": null
        },
        "M_CREDITS_USED_COMPUTE": {
          "type": "NUMBER",
          "index": 8,
          "name": "M_CREDITS_USED_COMPUTE",
          "comment": null
        },
        "M_AMOUNT_SPENT_CLOUD_SERVICES": {
          "type": "NUMBER",
          "index": 9,
          "name": "M_AMOUNT_SPENT_CLOUD_SERVICES",
          "comment": null
        },
        "M_AMOUNT_SPENT_COMPUTE": {
          "type": "NUMBER",
          "index": 10,
          "name": "M_AMOUNT_SPENT_COMPUTE",
          "comment": null
        },
        "M_AMOUNT_SPENT": {
          "type": "NUMBER",
          "index": 11,
          "name": "M_AMOUNT_SPENT",
          "comment": null
        },
        "M_CLOUD_SERVICES_RATE_PER_CREDIT": {
          "type": "NUMBER",
          "index": 12,
          "name": "M_CLOUD_SERVICES_RATE_PER_CREDIT",
          "comment": null
        },
        "M_COMPUTE_RATE_PER_CREDIT": {
          "type": "NUMBER",
          "index": 13,
          "name": "M_COMPUTE_RATE_PER_CREDIT",
          "comment": null
        },
        "A_CLOUD_SERVICES_RATE_CURRENCY": {
          "type": "TEXT",
          "index": 14,
          "name": "A_CLOUD_SERVICES_RATE_CURRENCY",
          "comment": null
        },
        "A_COMPUTE_RATE_CURRENCY": {
          "type": "TEXT",
          "index": 15,
          "name": "A_COMPUTE_RATE_CURRENCY",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:40UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 247808.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 9678.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_WAREHOUSE_USAGE_F"
    },
    "model.snowflake_usage.V_DATABASES_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_DATABASES_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_DATABASE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_DATABASE_DLHK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 2,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "A_DATABASE_NAME": {
          "type": "TEXT",
          "index": 3,
          "name": "A_DATABASE_NAME",
          "comment": null
        },
        "A_DATABASE_OWNER": {
          "type": "TEXT",
          "index": 4,
          "name": "A_DATABASE_OWNER",
          "comment": null
        },
        "A_COMMENT": {
          "type": "TEXT",
          "index": 5,
          "name": "A_COMMENT",
          "comment": null
        },
        "A_LAST_ALTERED_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 6,
          "name": "A_LAST_ALTERED_AT_DTS",
          "comment": null
        },
        "A_CREATED_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 7,
          "name": "A_CREATED_AT_DTS",
          "comment": null
        },
        "A_DELETED_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 8,
          "name": "A_DELETED_AT_DTS",
          "comment": null
        },
        "B_IS_TRANSIENT": {
          "type": "BOOLEAN",
          "index": 9,
          "name": "B_IS_TRANSIENT",
          "comment": null
        },
        "M_RETENTION_TIME": {
          "type": "NUMBER",
          "index": 10,
          "name": "M_RETENTION_TIME",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 11,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 12,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 13,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_DATABASES_STG"
    },
    "model.snowflake_usage.V_WAREHOUSE_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_WAREHOUSE_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_WAREHOUSE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_WAREHOUSE_DLHK",
          "comment": null
        },
        "K_WAREHOUSE_BK": {
          "type": "NUMBER",
          "index": 2,
          "name": "K_WAREHOUSE_BK",
          "comment": null
        },
        "A_WAREHOUSE_NAME": {
          "type": "TEXT",
          "index": 3,
          "name": "A_WAREHOUSE_NAME",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_WAREHOUSE_STG"
    },
    "model.snowflake_usage.W_COLUMNS_D": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_COLUMNS_D",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_COLUMN_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_COLUMN_DLHK",
          "comment": null
        },
        "K_TABLE_DLHK": {
          "type": "TEXT",
          "index": 2,
          "name": "K_TABLE_DLHK",
          "comment": null
        },
        "K_DATABASE_DLHK": {
          "type": "TEXT",
          "index": 3,
          "name": "K_DATABASE_DLHK",
          "comment": null
        },
        "K_UNIQUE_TABLE_DLHK": {
          "type": "TEXT",
          "index": 4,
          "name": "K_UNIQUE_TABLE_DLHK",
          "comment": null
        },
        "K_COLUMN_BK": {
          "type": "NUMBER",
          "index": 5,
          "name": "K_COLUMN_BK",
          "comment": null
        },
        "K_TABLE_BK": {
          "type": "NUMBER",
          "index": 6,
          "name": "K_TABLE_BK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 7,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "K_TABLE_SCHEMA_BK": {
          "type": "NUMBER",
          "index": 8,
          "name": "K_TABLE_SCHEMA_BK",
          "comment": null
        },
        "A_CHARACTER_SET_CATALOG": {
          "type": "TEXT",
          "index": 9,
          "name": "A_CHARACTER_SET_CATALOG",
          "comment": null
        },
        "A_CHARACTER_SET_NAME": {
          "type": "TEXT",
          "index": 10,
          "name": "A_CHARACTER_SET_NAME",
          "comment": null
        },
        "A_CHARACTER_SET_SCHEMA": {
          "type": "TEXT",
          "index": 11,
          "name": "A_CHARACTER_SET_SCHEMA",
          "comment": null
        },
        "A_COLLATION_CATALOG": {
          "type": "TEXT",
          "index": 12,
          "name": "A_COLLATION_CATALOG",
          "comment": null
        },
        "A_COLLATION_NAME": {
          "type": "TEXT",
          "index": 13,
          "name": "A_COLLATION_NAME",
          "comment": null
        },
        "A_COLLATION_SCHEMA": {
          "type": "TEXT",
          "index": 14,
          "name": "A_COLLATION_SCHEMA",
          "comment": null
        },
        "A_COLUMN_DEFAULT": {
          "type": "TEXT",
          "index": 15,
          "name": "A_COLUMN_DEFAULT",
          "comment": null
        },
        "A_COLUMN_NAME": {
          "type": "TEXT",
          "index": 16,
          "name": "A_COLUMN_NAME",
          "comment": null
        },
        "A_COMMENT": {
          "type": "TEXT",
          "index": 17,
          "name": "A_COMMENT",
          "comment": null
        },
        "A_DATA_TYPE": {
          "type": "TEXT",
          "index": 18,
          "name": "A_DATA_TYPE",
          "comment": null
        },
        "A_DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 19,
          "name": "A_DELETED",
          "comment": null
        },
        "A_DOMAIN_CATALOG": {
          "type": "TEXT",
          "index": 20,
          "name": "A_DOMAIN_CATALOG",
          "comment": null
        },
        "A_DOMAIN_NAME": {
          "type": "TEXT",
          "index": 21,
          "name": "A_DOMAIN_NAME",
          "comment": null
        },
        "A_DOMAIN_SCHEMA": {
          "type": "TEXT",
          "index": 22,
          "name": "A_DOMAIN_SCHEMA",
          "comment": null
        },
        "A_INTERVAL_PRECISION": {
          "type": "TEXT",
          "index": 23,
          "name": "A_INTERVAL_PRECISION",
          "comment": null
        },
        "A_INTERVAL_TYPE": {
          "type": "TEXT",
          "index": 24,
          "name": "A_INTERVAL_TYPE",
          "comment": null
        },
        "A_MAXIMUM_CARDINALITY": {
          "type": "TEXT",
          "index": 25,
          "name": "A_MAXIMUM_CARDINALITY",
          "comment": null
        },
        "A_SCOPE_CATALOG": {
          "type": "TEXT",
          "index": 26,
          "name": "A_SCOPE_CATALOG",
          "comment": null
        },
        "A_SCOPE_NAME": {
          "type": "TEXT",
          "index": 27,
          "name": "A_SCOPE_NAME",
          "comment": null
        },
        "A_SCOPE_SCHEMA": {
          "type": "TEXT",
          "index": 28,
          "name": "A_SCOPE_SCHEMA",
          "comment": null
        },
        "A_TABLE_CATALOG": {
          "type": "TEXT",
          "index": 29,
          "name": "A_TABLE_CATALOG",
          "comment": null
        },
        "A_TABLE_NAME": {
          "type": "TEXT",
          "index": 30,
          "name": "A_TABLE_NAME",
          "comment": null
        },
        "A_TABLE_SCHEMA": {
          "type": "TEXT",
          "index": 31,
          "name": "A_TABLE_SCHEMA",
          "comment": null
        },
        "A_UDT_CATALOG": {
          "type": "TEXT",
          "index": 32,
          "name": "A_UDT_CATALOG",
          "comment": null
        },
        "A_UDT_NAME": {
          "type": "TEXT",
          "index": 33,
          "name": "A_UDT_NAME",
          "comment": null
        },
        "A_UDT_SCHEMA": {
          "type": "TEXT",
          "index": 34,
          "name": "A_UDT_SCHEMA",
          "comment": null
        },
        "A_DTD_BKENTIFIER": {
          "type": "TEXT",
          "index": 35,
          "name": "A_DTD_BKENTIFIER",
          "comment": null
        },
        "A_IDENTITY_CYCLE": {
          "type": "TEXT",
          "index": 36,
          "name": "A_IDENTITY_CYCLE",
          "comment": null
        },
        "A_IDENTITY_GENERATION": {
          "type": "TEXT",
          "index": 37,
          "name": "A_IDENTITY_GENERATION",
          "comment": null
        },
        "A_IDENTITY_INCREMENT": {
          "type": "TEXT",
          "index": 38,
          "name": "A_IDENTITY_INCREMENT",
          "comment": null
        },
        "A_IDENTITY_MAXIMUM": {
          "type": "TEXT",
          "index": 39,
          "name": "A_IDENTITY_MAXIMUM",
          "comment": null
        },
        "A_IDENTITY_MINIMUM": {
          "type": "TEXT",
          "index": 40,
          "name": "A_IDENTITY_MINIMUM",
          "comment": null
        },
        "A_IDENTITY_START": {
          "type": "TEXT",
          "index": 41,
          "name": "A_IDENTITY_START",
          "comment": null
        },
        "B_IS_BKENTITY": {
          "type": "BOOLEAN",
          "index": 42,
          "name": "B_IS_BKENTITY",
          "comment": null
        },
        "A_IS_NULLABLE": {
          "type": "BOOLEAN",
          "index": 43,
          "name": "A_IS_NULLABLE",
          "comment": null
        },
        "A_IS_SELF_REFERENCING": {
          "type": "BOOLEAN",
          "index": 44,
          "name": "A_IS_SELF_REFERENCING",
          "comment": null
        },
        "M_CHARACTER_MAXIMUM_LENGTH": {
          "type": "NUMBER",
          "index": 45,
          "name": "M_CHARACTER_MAXIMUM_LENGTH",
          "comment": null
        },
        "M_CHARACTER_OCTET_LENGTH": {
          "type": "NUMBER",
          "index": 46,
          "name": "M_CHARACTER_OCTET_LENGTH",
          "comment": null
        },
        "M_DATETIME_PRECISION": {
          "type": "NUMBER",
          "index": 47,
          "name": "M_DATETIME_PRECISION",
          "comment": null
        },
        "M_NUMERIC_PRECISION": {
          "type": "NUMBER",
          "index": 48,
          "name": "M_NUMERIC_PRECISION",
          "comment": null
        },
        "M_NUMERIC_PRECISION_RADIX": {
          "type": "NUMBER",
          "index": 49,
          "name": "M_NUMERIC_PRECISION_RADIX",
          "comment": null
        },
        "M_NUMERIC_SCALE": {
          "type": "NUMBER",
          "index": 50,
          "name": "M_NUMERIC_SCALE",
          "comment": null
        },
        "M_ORDINAL_POSITION": {
          "type": "NUMBER",
          "index": 51,
          "name": "M_ORDINAL_POSITION",
          "comment": null
        },
        "MD_VALID_TO_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 52,
          "name": "MD_VALID_TO_DTS",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 53,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 54,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 55,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:39UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 167735296.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 2974208.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_COLUMNS_D"
    },
    "model.snowflake_usage.W_ACCESS_HISTORY_F": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_ACCESS_HISTORY_F",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_QUERY_BK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_QUERY_BK",
          "comment": null
        },
        "K_USER_DLHK": {
          "type": "TEXT",
          "index": 2,
          "name": "K_USER_DLHK",
          "comment": null
        },
        "K_UNIQUE_TABLE_DLHK": {
          "type": "TEXT",
          "index": 3,
          "name": "K_UNIQUE_TABLE_DLHK",
          "comment": null
        },
        "K_TABLE_DLHK": {
          "type": "TEXT",
          "index": 4,
          "name": "K_TABLE_DLHK",
          "comment": null
        },
        "K_TABLE_BK": {
          "type": "TEXT",
          "index": 5,
          "name": "K_TABLE_BK",
          "comment": null
        },
        "A_USERNAME": {
          "type": "TEXT",
          "index": 6,
          "name": "A_USERNAME",
          "comment": null
        },
        "A_START_TIME_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 7,
          "name": "A_START_TIME_DTS",
          "comment": null
        },
        "A_DATABASE_NAME": {
          "type": "TEXT",
          "index": 8,
          "name": "A_DATABASE_NAME",
          "comment": null
        },
        "A_SCHEMA_NAME": {
          "type": "TEXT",
          "index": 9,
          "name": "A_SCHEMA_NAME",
          "comment": null
        },
        "A_TABLE_NAME": {
          "type": "TEXT",
          "index": 10,
          "name": "A_TABLE_NAME",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:41UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 5059072.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 200528.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_ACCESS_HISTORY_F"
    },
    "model.snowflake_usage.V_WAREHOUSE_USAGE_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_WAREHOUSE_USAGE_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_WAREHOUSE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_WAREHOUSE_DLHK",
          "comment": null
        },
        "K_WAREHOUSE_BK": {
          "type": "NUMBER",
          "index": 2,
          "name": "K_WAREHOUSE_BK",
          "comment": null
        },
        "A_START_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 3,
          "name": "A_START_TIME",
          "comment": null
        },
        "A_END_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 4,
          "name": "A_END_TIME",
          "comment": null
        },
        "A_WAREHOUSE_NAME": {
          "type": "TEXT",
          "index": 5,
          "name": "A_WAREHOUSE_NAME",
          "comment": null
        },
        "M_CREDITS_USED": {
          "type": "NUMBER",
          "index": 6,
          "name": "M_CREDITS_USED",
          "comment": null
        },
        "M_CREDITS_USED_CLOUD_SERVICES": {
          "type": "NUMBER",
          "index": 7,
          "name": "M_CREDITS_USED_CLOUD_SERVICES",
          "comment": null
        },
        "M_CREDITS_USED_COMPUTE": {
          "type": "NUMBER",
          "index": 8,
          "name": "M_CREDITS_USED_COMPUTE",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_WAREHOUSE_USAGE_STG"
    },
    "model.snowflake_usage.V_TABLES_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_TABLES_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_TABLE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_TABLE_DLHK",
          "comment": null
        },
        "K_UNIQUE_TABLE_DLHK": {
          "type": "TEXT",
          "index": 2,
          "name": "K_UNIQUE_TABLE_DLHK",
          "comment": null
        },
        "K_TABLE_BK": {
          "type": "NUMBER",
          "index": 3,
          "name": "K_TABLE_BK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 4,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "K_TABLE_SCHEMA_BK": {
          "type": "NUMBER",
          "index": 5,
          "name": "K_TABLE_SCHEMA_BK",
          "comment": null
        },
        "A_AUTO_CLUSTERING_ON": {
          "type": "TEXT",
          "index": 6,
          "name": "A_AUTO_CLUSTERING_ON",
          "comment": null
        },
        "A_CLUSTERING_KEY": {
          "type": "TEXT",
          "index": 7,
          "name": "A_CLUSTERING_KEY",
          "comment": null
        },
        "A_COMMENT": {
          "type": "TEXT",
          "index": 8,
          "name": "A_COMMENT",
          "comment": null
        },
        "A_COMMIT_ACTION": {
          "type": "TEXT",
          "index": 9,
          "name": "A_COMMIT_ACTION",
          "comment": null
        },
        "A_REFERENCE_GENERATION": {
          "type": "TEXT",
          "index": 10,
          "name": "A_REFERENCE_GENERATION",
          "comment": null
        },
        "A_SELF_REFERENCING_COLUMN_NAME": {
          "type": "TEXT",
          "index": 11,
          "name": "A_SELF_REFERENCING_COLUMN_NAME",
          "comment": null
        },
        "A_FULLY_QUALIFIED_TABLE_NAME": {
          "type": "TEXT",
          "index": 12,
          "name": "A_FULLY_QUALIFIED_TABLE_NAME",
          "comment": null
        },
        "A_TABLE_CATALOG": {
          "type": "TEXT",
          "index": 13,
          "name": "A_TABLE_CATALOG",
          "comment": null
        },
        "A_TABLE_NAME": {
          "type": "TEXT",
          "index": 14,
          "name": "A_TABLE_NAME",
          "comment": null
        },
        "A_TABLE_OWNER": {
          "type": "TEXT",
          "index": 15,
          "name": "A_TABLE_OWNER",
          "comment": null
        },
        "A_TABLE_SCHEMA": {
          "type": "TEXT",
          "index": 16,
          "name": "A_TABLE_SCHEMA",
          "comment": null
        },
        "A_TABLE_TYPE": {
          "type": "TEXT",
          "index": 17,
          "name": "A_TABLE_TYPE",
          "comment": null
        },
        "A_USER_DEFINED_TYPE_CATALOG": {
          "type": "TEXT",
          "index": 18,
          "name": "A_USER_DEFINED_TYPE_CATALOG",
          "comment": null
        },
        "A_USER_DEFINED_TYPE_NAME": {
          "type": "TEXT",
          "index": 19,
          "name": "A_USER_DEFINED_TYPE_NAME",
          "comment": null
        },
        "A_USER_DEFINED_TYPE_SCHEMA": {
          "type": "TEXT",
          "index": 20,
          "name": "A_USER_DEFINED_TYPE_SCHEMA",
          "comment": null
        },
        "B_IS_INSERTABLE_INTO": {
          "type": "BOOLEAN",
          "index": 21,
          "name": "B_IS_INSERTABLE_INTO",
          "comment": null
        },
        "B_IS_TRANSIENT": {
          "type": "BOOLEAN",
          "index": 22,
          "name": "B_IS_TRANSIENT",
          "comment": null
        },
        "B_IS_TYPED": {
          "type": "BOOLEAN",
          "index": 23,
          "name": "B_IS_TYPED",
          "comment": null
        },
        "M_BYTES": {
          "type": "NUMBER",
          "index": 24,
          "name": "M_BYTES",
          "comment": null
        },
        "M_RETENTION_TIME": {
          "type": "NUMBER",
          "index": 25,
          "name": "M_RETENTION_TIME",
          "comment": null
        },
        "M_ROW_COUNT": {
          "type": "NUMBER",
          "index": 26,
          "name": "M_ROW_COUNT",
          "comment": null
        },
        "A_LAST_ALTERED_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 27,
          "name": "A_LAST_ALTERED_AT_DTS",
          "comment": null
        },
        "MD_VALID_TO_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 28,
          "name": "MD_VALID_TO_DTS",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 29,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 30,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 31,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_TABLES_STG"
    },
    "model.snowflake_usage.V_ACCESS_HISTORY_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_ACCESS_HISTORY_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_QUERY_BK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_QUERY_BK",
          "comment": null
        },
        "K_USER_DLHK": {
          "type": "TEXT",
          "index": 2,
          "name": "K_USER_DLHK",
          "comment": null
        },
        "K_UNIQUE_TABLE_DLHK": {
          "type": "TEXT",
          "index": 3,
          "name": "K_UNIQUE_TABLE_DLHK",
          "comment": null
        },
        "K_TABLE_DLHK": {
          "type": "TEXT",
          "index": 4,
          "name": "K_TABLE_DLHK",
          "comment": null
        },
        "K_TABLE_BK": {
          "type": "TEXT",
          "index": 5,
          "name": "K_TABLE_BK",
          "comment": null
        },
        "A_USERNAME": {
          "type": "TEXT",
          "index": 6,
          "name": "A_USERNAME",
          "comment": null
        },
        "A_START_TIME_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 7,
          "name": "A_START_TIME_DTS",
          "comment": null
        },
        "A_DATABASE_NAME": {
          "type": "TEXT",
          "index": 8,
          "name": "A_DATABASE_NAME",
          "comment": null
        },
        "A_SCHEMA_NAME": {
          "type": "TEXT",
          "index": 9,
          "name": "A_SCHEMA_NAME",
          "comment": null
        },
        "A_TABLE_NAME": {
          "type": "TEXT",
          "index": 10,
          "name": "A_TABLE_NAME",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_ACCESS_HISTORY_STG"
    },
    "model.snowflake_usage.W_QUERY_HISTORY_F": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_QUERY_HISTORY_F",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_QUERY_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_QUERY_DLHK",
          "comment": null
        },
        "K_DATABASE_DLHK": {
          "type": "TEXT",
          "index": 2,
          "name": "K_DATABASE_DLHK",
          "comment": null
        },
        "K_WAREHOUSE_DLHK": {
          "type": "TEXT",
          "index": 3,
          "name": "K_WAREHOUSE_DLHK",
          "comment": null
        },
        "K_USER_DLHK": {
          "type": "TEXT",
          "index": 4,
          "name": "K_USER_DLHK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 5,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "K_QUERY_BK": {
          "type": "TEXT",
          "index": 6,
          "name": "K_QUERY_BK",
          "comment": null
        },
        "K_SCHEMA_BK": {
          "type": "NUMBER",
          "index": 7,
          "name": "K_SCHEMA_BK",
          "comment": null
        },
        "K_SESSION_BK": {
          "type": "NUMBER",
          "index": 8,
          "name": "K_SESSION_BK",
          "comment": null
        },
        "K_WAREHOUSE_BK": {
          "type": "NUMBER",
          "index": 9,
          "name": "K_WAREHOUSE_BK",
          "comment": null
        },
        "A_USERNAME": {
          "type": "TEXT",
          "index": 10,
          "name": "A_USERNAME",
          "comment": null
        },
        "A_START_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 11,
          "name": "A_START_TIME",
          "comment": null
        },
        "A_END_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 12,
          "name": "A_END_TIME",
          "comment": null
        },
        "A_ERROR_CODE": {
          "type": "TEXT",
          "index": 13,
          "name": "A_ERROR_CODE",
          "comment": null
        },
        "A_ERROR_MESSAGE": {
          "type": "TEXT",
          "index": 14,
          "name": "A_ERROR_MESSAGE",
          "comment": null
        },
        "A_EXECUTION_STATUS": {
          "type": "TEXT",
          "index": 15,
          "name": "A_EXECUTION_STATUS",
          "comment": null
        },
        "A_QUERY_TAG": {
          "type": "TEXT",
          "index": 16,
          "name": "A_QUERY_TAG",
          "comment": null
        },
        "A_QUERY_TEXT": {
          "type": "TEXT",
          "index": 17,
          "name": "A_QUERY_TEXT",
          "comment": null
        },
        "A_QUERY_TYPE": {
          "type": "TEXT",
          "index": 18,
          "name": "A_QUERY_TYPE",
          "comment": null
        },
        "A_RELEASE_VERSION": {
          "type": "TEXT",
          "index": 19,
          "name": "A_RELEASE_VERSION",
          "comment": null
        },
        "A_ROLE_NAME": {
          "type": "TEXT",
          "index": 20,
          "name": "A_ROLE_NAME",
          "comment": null
        },
        "A_SCHEMA_NAME": {
          "type": "TEXT",
          "index": 21,
          "name": "A_SCHEMA_NAME",
          "comment": null
        },
        "A_CLUSTER_NUMBER": {
          "type": "NUMBER",
          "index": 22,
          "name": "A_CLUSTER_NUMBER",
          "comment": null
        },
        "B_IS_CLIENT_GENERATED_STATEMENT": {
          "type": "BOOLEAN",
          "index": 23,
          "name": "B_IS_CLIENT_GENERATED_STATEMENT",
          "comment": null
        },
        "A_INBOUND_DATA_TRANSFER_CLOUD": {
          "type": "TEXT",
          "index": 24,
          "name": "A_INBOUND_DATA_TRANSFER_CLOUD",
          "comment": null
        },
        "A_INBOUND_DATA_TRANSFER_REGION": {
          "type": "TEXT",
          "index": 25,
          "name": "A_INBOUND_DATA_TRANSFER_REGION",
          "comment": null
        },
        "A_OUTBOUND_DATA_TRANSFER_CLOUD": {
          "type": "TEXT",
          "index": 26,
          "name": "A_OUTBOUND_DATA_TRANSFER_CLOUD",
          "comment": null
        },
        "A_OUTBOUND_DATA_TRANSFER_REGION": {
          "type": "TEXT",
          "index": 27,
          "name": "A_OUTBOUND_DATA_TRANSFER_REGION",
          "comment": null
        },
        "M_BYTES_DELETED": {
          "type": "NUMBER",
          "index": 28,
          "name": "M_BYTES_DELETED",
          "comment": null
        },
        "M_BYTES_READ_FROM_RESULT": {
          "type": "NUMBER",
          "index": 29,
          "name": "M_BYTES_READ_FROM_RESULT",
          "comment": null
        },
        "M_BYTES_SCANNED": {
          "type": "NUMBER",
          "index": 30,
          "name": "M_BYTES_SCANNED",
          "comment": null
        },
        "M_BYTES_SENT_OVER_THE_NETWORK": {
          "type": "NUMBER",
          "index": 31,
          "name": "M_BYTES_SENT_OVER_THE_NETWORK",
          "comment": null
        },
        "M_BYTES_SPILLED_TO_LOCAL_STORAGE": {
          "type": "NUMBER",
          "index": 32,
          "name": "M_BYTES_SPILLED_TO_LOCAL_STORAGE",
          "comment": null
        },
        "M_BYTES_SPILLED_TO_REMOTE_STORAGE": {
          "type": "NUMBER",
          "index": 33,
          "name": "M_BYTES_SPILLED_TO_REMOTE_STORAGE",
          "comment": null
        },
        "M_BYTES_WRITTEN": {
          "type": "NUMBER",
          "index": 34,
          "name": "M_BYTES_WRITTEN",
          "comment": null
        },
        "M_BYTES_WRITTEN_TO_RESULT": {
          "type": "NUMBER",
          "index": 35,
          "name": "M_BYTES_WRITTEN_TO_RESULT",
          "comment": null
        },
        "M_COMPILATION_TIME": {
          "type": "NUMBER",
          "index": 36,
          "name": "M_COMPILATION_TIME",
          "comment": null
        },
        "M_COMPILATION_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 37,
          "name": "M_COMPILATION_TIME_SECONDS",
          "comment": null
        },
        "M_CREDITS_USED_CLOUD_SERVICES": {
          "type": "NUMBER",
          "index": 38,
          "name": "M_CREDITS_USED_CLOUD_SERVICES",
          "comment": null
        },
        "M_EXECUTION_TIME": {
          "type": "NUMBER",
          "index": 39,
          "name": "M_EXECUTION_TIME",
          "comment": null
        },
        "M_EXECUTION_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 40,
          "name": "M_EXECUTION_TIME_SECONDS",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_INVOCATIONS": {
          "type": "NUMBER",
          "index": 41,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_INVOCATIONS",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES": {
          "type": "NUMBER",
          "index": 42,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS": {
          "type": "NUMBER",
          "index": 43,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_SENT_BYTES": {
          "type": "NUMBER",
          "index": 44,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_SENT_BYTES",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_SENT_ROWS": {
          "type": "NUMBER",
          "index": 45,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_SENT_ROWS",
          "comment": null
        },
        "M_INBOUND_DATA_TRANSFER_BYTES": {
          "type": "NUMBER",
          "index": 46,
          "name": "M_INBOUND_DATA_TRANSFER_BYTES",
          "comment": null
        },
        "M_LIST_EXTERNAL_FILES_TIME": {
          "type": "NUMBER",
          "index": 47,
          "name": "M_LIST_EXTERNAL_FILES_TIME",
          "comment": null
        },
        "M_OUTBOUND_DATA_TRANSFER_BYTES": {
          "type": "NUMBER",
          "index": 48,
          "name": "M_OUTBOUND_DATA_TRANSFER_BYTES",
          "comment": null
        },
        "M_PARTITIONS_SCANNED": {
          "type": "NUMBER",
          "index": 49,
          "name": "M_PARTITIONS_SCANNED",
          "comment": null
        },
        "M_PARTITIONS_TOTAL": {
          "type": "NUMBER",
          "index": 50,
          "name": "M_PARTITIONS_TOTAL",
          "comment": null
        },
        "M_PERCENTAGE_SCANNED_FROM_CACHE": {
          "type": "FLOAT",
          "index": 51,
          "name": "M_PERCENTAGE_SCANNED_FROM_CACHE",
          "comment": null
        },
        "M_QUERY_LOAD_PERCENT": {
          "type": "NUMBER",
          "index": 52,
          "name": "M_QUERY_LOAD_PERCENT",
          "comment": null
        },
        "M_QUEUED_OVERLOAD_TIME": {
          "type": "NUMBER",
          "index": 53,
          "name": "M_QUEUED_OVERLOAD_TIME",
          "comment": null
        },
        "M_QUEUED_OVERLOAD_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 54,
          "name": "M_QUEUED_OVERLOAD_TIME_SECONDS",
          "comment": null
        },
        "M_QUEUED_PROVISIONING_TIME": {
          "type": "NUMBER",
          "index": 55,
          "name": "M_QUEUED_PROVISIONING_TIME",
          "comment": null
        },
        "M_QUEUED_PROVISIONING_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 56,
          "name": "M_QUEUED_PROVISIONING_TIME_SECONDS",
          "comment": null
        },
        "M_QUEUED_REPAIR_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 57,
          "name": "M_QUEUED_REPAIR_TIME_SECONDS",
          "comment": null
        },
        "M_ROWS_DELETED": {
          "type": "NUMBER",
          "index": 58,
          "name": "M_ROWS_DELETED",
          "comment": null
        },
        "M_ROWS_INSERTED": {
          "type": "NUMBER",
          "index": 59,
          "name": "M_ROWS_INSERTED",
          "comment": null
        },
        "M_ROWS_PRODUCED": {
          "type": "NUMBER",
          "index": 60,
          "name": "M_ROWS_PRODUCED",
          "comment": null
        },
        "M_ROWS_UNLOADED": {
          "type": "NUMBER",
          "index": 61,
          "name": "M_ROWS_UNLOADED",
          "comment": null
        },
        "M_ROWS_UPDATED": {
          "type": "NUMBER",
          "index": 62,
          "name": "M_ROWS_UPDATED",
          "comment": null
        },
        "M_TOTAL_ELAPSED_TIME": {
          "type": "NUMBER",
          "index": 63,
          "name": "M_TOTAL_ELAPSED_TIME",
          "comment": null
        },
        "M_TOTAL_ELAPSED_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 64,
          "name": "M_TOTAL_ELAPSED_TIME_SECONDS",
          "comment": null
        },
        "M_TRANSACTION_BLOCKED_TIME": {
          "type": "NUMBER",
          "index": 65,
          "name": "M_TRANSACTION_BLOCKED_TIME",
          "comment": null
        },
        "M_TRANSACTION_BLOCKED_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 66,
          "name": "M_TRANSACTION_BLOCKED_TIME_SECONDS",
          "comment": null
        },
        "M_AMOUNT_SPENT_CLOUD_SERVICES": {
          "type": "NUMBER",
          "index": 67,
          "name": "M_AMOUNT_SPENT_CLOUD_SERVICES",
          "comment": null
        },
        "M_CLOUD_SERVICES_RATE_PER_CREDIT": {
          "type": "NUMBER",
          "index": 68,
          "name": "M_CLOUD_SERVICES_RATE_PER_CREDIT",
          "comment": null
        },
        "A_RATE_CURRENCY": {
          "type": "TEXT",
          "index": 69,
          "name": "A_RATE_CURRENCY",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:39UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 54859264.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 795986.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_QUERY_HISTORY_F"
    },
    "model.snowflake_usage.W_WAREHOUSE_D": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_WAREHOUSE_D",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_WAREHOUSE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_WAREHOUSE_DLHK",
          "comment": null
        },
        "K_WAREHOUSE_BK": {
          "type": "NUMBER",
          "index": 2,
          "name": "K_WAREHOUSE_BK",
          "comment": null
        },
        "A_WAREHOUSE_NAME": {
          "type": "TEXT",
          "index": 3,
          "name": "A_WAREHOUSE_NAME",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:40UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 12288.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 21.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_WAREHOUSE_D"
    },
    "model.snowflake_usage.V_QUERY_HISTORY_STG": {
      "metadata": {
        "type": "VIEW",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "V_QUERY_HISTORY_STG",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_QUERY_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_QUERY_DLHK",
          "comment": null
        },
        "K_DATABASE_DLHK": {
          "type": "TEXT",
          "index": 2,
          "name": "K_DATABASE_DLHK",
          "comment": null
        },
        "K_WAREHOUSE_DLHK": {
          "type": "TEXT",
          "index": 3,
          "name": "K_WAREHOUSE_DLHK",
          "comment": null
        },
        "K_USER_DLHK": {
          "type": "TEXT",
          "index": 4,
          "name": "K_USER_DLHK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 5,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "K_QUERY_BK": {
          "type": "TEXT",
          "index": 6,
          "name": "K_QUERY_BK",
          "comment": null
        },
        "K_SCHEMA_BK": {
          "type": "NUMBER",
          "index": 7,
          "name": "K_SCHEMA_BK",
          "comment": null
        },
        "K_SESSION_BK": {
          "type": "NUMBER",
          "index": 8,
          "name": "K_SESSION_BK",
          "comment": null
        },
        "K_WAREHOUSE_BK": {
          "type": "NUMBER",
          "index": 9,
          "name": "K_WAREHOUSE_BK",
          "comment": null
        },
        "A_USERNAME": {
          "type": "TEXT",
          "index": 10,
          "name": "A_USERNAME",
          "comment": null
        },
        "A_START_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 11,
          "name": "A_START_TIME",
          "comment": null
        },
        "A_END_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 12,
          "name": "A_END_TIME",
          "comment": null
        },
        "A_ERROR_CODE": {
          "type": "TEXT",
          "index": 13,
          "name": "A_ERROR_CODE",
          "comment": null
        },
        "A_ERROR_MESSAGE": {
          "type": "TEXT",
          "index": 14,
          "name": "A_ERROR_MESSAGE",
          "comment": null
        },
        "A_EXECUTION_STATUS": {
          "type": "TEXT",
          "index": 15,
          "name": "A_EXECUTION_STATUS",
          "comment": null
        },
        "A_QUERY_TAG": {
          "type": "TEXT",
          "index": 16,
          "name": "A_QUERY_TAG",
          "comment": null
        },
        "A_QUERY_TEXT": {
          "type": "TEXT",
          "index": 17,
          "name": "A_QUERY_TEXT",
          "comment": null
        },
        "A_QUERY_TYPE": {
          "type": "TEXT",
          "index": 18,
          "name": "A_QUERY_TYPE",
          "comment": null
        },
        "A_RELEASE_VERSION": {
          "type": "TEXT",
          "index": 19,
          "name": "A_RELEASE_VERSION",
          "comment": null
        },
        "A_ROLE_NAME": {
          "type": "TEXT",
          "index": 20,
          "name": "A_ROLE_NAME",
          "comment": null
        },
        "A_SCHEMA_NAME": {
          "type": "TEXT",
          "index": 21,
          "name": "A_SCHEMA_NAME",
          "comment": null
        },
        "A_CLUSTER_NUMBER": {
          "type": "NUMBER",
          "index": 22,
          "name": "A_CLUSTER_NUMBER",
          "comment": null
        },
        "B_IS_CLIENT_GENERATED_STATEMENT": {
          "type": "BOOLEAN",
          "index": 23,
          "name": "B_IS_CLIENT_GENERATED_STATEMENT",
          "comment": null
        },
        "A_INBOUND_DATA_TRANSFER_CLOUD": {
          "type": "TEXT",
          "index": 24,
          "name": "A_INBOUND_DATA_TRANSFER_CLOUD",
          "comment": null
        },
        "A_INBOUND_DATA_TRANSFER_REGION": {
          "type": "TEXT",
          "index": 25,
          "name": "A_INBOUND_DATA_TRANSFER_REGION",
          "comment": null
        },
        "A_OUTBOUND_DATA_TRANSFER_CLOUD": {
          "type": "TEXT",
          "index": 26,
          "name": "A_OUTBOUND_DATA_TRANSFER_CLOUD",
          "comment": null
        },
        "A_OUTBOUND_DATA_TRANSFER_REGION": {
          "type": "TEXT",
          "index": 27,
          "name": "A_OUTBOUND_DATA_TRANSFER_REGION",
          "comment": null
        },
        "M_BYTES_DELETED": {
          "type": "NUMBER",
          "index": 28,
          "name": "M_BYTES_DELETED",
          "comment": null
        },
        "M_BYTES_READ_FROM_RESULT": {
          "type": "NUMBER",
          "index": 29,
          "name": "M_BYTES_READ_FROM_RESULT",
          "comment": null
        },
        "M_BYTES_SCANNED": {
          "type": "NUMBER",
          "index": 30,
          "name": "M_BYTES_SCANNED",
          "comment": null
        },
        "M_BYTES_SENT_OVER_THE_NETWORK": {
          "type": "NUMBER",
          "index": 31,
          "name": "M_BYTES_SENT_OVER_THE_NETWORK",
          "comment": null
        },
        "M_BYTES_SPILLED_TO_LOCAL_STORAGE": {
          "type": "NUMBER",
          "index": 32,
          "name": "M_BYTES_SPILLED_TO_LOCAL_STORAGE",
          "comment": null
        },
        "M_BYTES_SPILLED_TO_REMOTE_STORAGE": {
          "type": "NUMBER",
          "index": 33,
          "name": "M_BYTES_SPILLED_TO_REMOTE_STORAGE",
          "comment": null
        },
        "M_BYTES_WRITTEN": {
          "type": "NUMBER",
          "index": 34,
          "name": "M_BYTES_WRITTEN",
          "comment": null
        },
        "M_BYTES_WRITTEN_TO_RESULT": {
          "type": "NUMBER",
          "index": 35,
          "name": "M_BYTES_WRITTEN_TO_RESULT",
          "comment": null
        },
        "M_COMPILATION_TIME": {
          "type": "NUMBER",
          "index": 36,
          "name": "M_COMPILATION_TIME",
          "comment": null
        },
        "M_COMPILATION_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 37,
          "name": "M_COMPILATION_TIME_SECONDS",
          "comment": null
        },
        "M_CREDITS_USED_CLOUD_SERVICES": {
          "type": "NUMBER",
          "index": 38,
          "name": "M_CREDITS_USED_CLOUD_SERVICES",
          "comment": null
        },
        "M_EXECUTION_TIME": {
          "type": "NUMBER",
          "index": 39,
          "name": "M_EXECUTION_TIME",
          "comment": null
        },
        "M_EXECUTION_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 40,
          "name": "M_EXECUTION_TIME_SECONDS",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_INVOCATIONS": {
          "type": "NUMBER",
          "index": 41,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_INVOCATIONS",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES": {
          "type": "NUMBER",
          "index": 42,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS": {
          "type": "NUMBER",
          "index": 43,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_SENT_BYTES": {
          "type": "NUMBER",
          "index": 44,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_SENT_BYTES",
          "comment": null
        },
        "M_EXTERNAL_FUNCTION_TOTAL_SENT_ROWS": {
          "type": "NUMBER",
          "index": 45,
          "name": "M_EXTERNAL_FUNCTION_TOTAL_SENT_ROWS",
          "comment": null
        },
        "M_INBOUND_DATA_TRANSFER_BYTES": {
          "type": "NUMBER",
          "index": 46,
          "name": "M_INBOUND_DATA_TRANSFER_BYTES",
          "comment": null
        },
        "M_LIST_EXTERNAL_FILES_TIME": {
          "type": "NUMBER",
          "index": 47,
          "name": "M_LIST_EXTERNAL_FILES_TIME",
          "comment": null
        },
        "M_OUTBOUND_DATA_TRANSFER_BYTES": {
          "type": "NUMBER",
          "index": 48,
          "name": "M_OUTBOUND_DATA_TRANSFER_BYTES",
          "comment": null
        },
        "M_PARTITIONS_SCANNED": {
          "type": "NUMBER",
          "index": 49,
          "name": "M_PARTITIONS_SCANNED",
          "comment": null
        },
        "M_PARTITIONS_TOTAL": {
          "type": "NUMBER",
          "index": 50,
          "name": "M_PARTITIONS_TOTAL",
          "comment": null
        },
        "M_PERCENTAGE_SCANNED_FROM_CACHE": {
          "type": "FLOAT",
          "index": 51,
          "name": "M_PERCENTAGE_SCANNED_FROM_CACHE",
          "comment": null
        },
        "M_QUERY_LOAD_PERCENT": {
          "type": "NUMBER",
          "index": 52,
          "name": "M_QUERY_LOAD_PERCENT",
          "comment": null
        },
        "M_QUEUED_OVERLOAD_TIME": {
          "type": "NUMBER",
          "index": 53,
          "name": "M_QUEUED_OVERLOAD_TIME",
          "comment": null
        },
        "M_QUEUED_OVERLOAD_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 54,
          "name": "M_QUEUED_OVERLOAD_TIME_SECONDS",
          "comment": null
        },
        "M_QUEUED_PROVISIONING_TIME": {
          "type": "NUMBER",
          "index": 55,
          "name": "M_QUEUED_PROVISIONING_TIME",
          "comment": null
        },
        "M_QUEUED_PROVISIONING_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 56,
          "name": "M_QUEUED_PROVISIONING_TIME_SECONDS",
          "comment": null
        },
        "M_QUEUED_REPAIR_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 57,
          "name": "M_QUEUED_REPAIR_TIME_SECONDS",
          "comment": null
        },
        "M_ROWS_DELETED": {
          "type": "NUMBER",
          "index": 58,
          "name": "M_ROWS_DELETED",
          "comment": null
        },
        "M_ROWS_INSERTED": {
          "type": "NUMBER",
          "index": 59,
          "name": "M_ROWS_INSERTED",
          "comment": null
        },
        "M_ROWS_PRODUCED": {
          "type": "NUMBER",
          "index": 60,
          "name": "M_ROWS_PRODUCED",
          "comment": null
        },
        "M_ROWS_UNLOADED": {
          "type": "NUMBER",
          "index": 61,
          "name": "M_ROWS_UNLOADED",
          "comment": null
        },
        "M_ROWS_UPDATED": {
          "type": "NUMBER",
          "index": 62,
          "name": "M_ROWS_UPDATED",
          "comment": null
        },
        "M_TOTAL_ELAPSED_TIME": {
          "type": "NUMBER",
          "index": 63,
          "name": "M_TOTAL_ELAPSED_TIME",
          "comment": null
        },
        "M_TOTAL_ELAPSED_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 64,
          "name": "M_TOTAL_ELAPSED_TIME_SECONDS",
          "comment": null
        },
        "M_TRANSACTION_BLOCKED_TIME": {
          "type": "NUMBER",
          "index": 65,
          "name": "M_TRANSACTION_BLOCKED_TIME",
          "comment": null
        },
        "M_TRANSACTION_BLOCKED_TIME_SECONDS": {
          "type": "NUMBER",
          "index": 66,
          "name": "M_TRANSACTION_BLOCKED_TIME_SECONDS",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.V_QUERY_HISTORY_STG"
    },
    "model.snowflake_usage.W_TABLES_D": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_TABLES_D",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_TABLE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_TABLE_DLHK",
          "comment": null
        },
        "K_UNIQUE_TABLE_DLHK": {
          "type": "TEXT",
          "index": 2,
          "name": "K_UNIQUE_TABLE_DLHK",
          "comment": null
        },
        "K_TABLE_BK": {
          "type": "NUMBER",
          "index": 3,
          "name": "K_TABLE_BK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 4,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "K_TABLE_SCHEMA_BK": {
          "type": "NUMBER",
          "index": 5,
          "name": "K_TABLE_SCHEMA_BK",
          "comment": null
        },
        "A_AUTO_CLUSTERING_ON": {
          "type": "TEXT",
          "index": 6,
          "name": "A_AUTO_CLUSTERING_ON",
          "comment": null
        },
        "A_CLUSTERING_KEY": {
          "type": "TEXT",
          "index": 7,
          "name": "A_CLUSTERING_KEY",
          "comment": null
        },
        "A_COMMENT": {
          "type": "TEXT",
          "index": 8,
          "name": "A_COMMENT",
          "comment": null
        },
        "A_COMMIT_ACTION": {
          "type": "TEXT",
          "index": 9,
          "name": "A_COMMIT_ACTION",
          "comment": null
        },
        "A_REFERENCE_GENERATION": {
          "type": "TEXT",
          "index": 10,
          "name": "A_REFERENCE_GENERATION",
          "comment": null
        },
        "A_SELF_REFERENCING_COLUMN_NAME": {
          "type": "TEXT",
          "index": 11,
          "name": "A_SELF_REFERENCING_COLUMN_NAME",
          "comment": null
        },
        "A_FULLY_QUALIFIED_TABLE_NAME": {
          "type": "TEXT",
          "index": 12,
          "name": "A_FULLY_QUALIFIED_TABLE_NAME",
          "comment": null
        },
        "A_TABLE_CATALOG": {
          "type": "TEXT",
          "index": 13,
          "name": "A_TABLE_CATALOG",
          "comment": null
        },
        "A_TABLE_NAME": {
          "type": "TEXT",
          "index": 14,
          "name": "A_TABLE_NAME",
          "comment": null
        },
        "A_TABLE_OWNER": {
          "type": "TEXT",
          "index": 15,
          "name": "A_TABLE_OWNER",
          "comment": null
        },
        "A_TABLE_SCHEMA": {
          "type": "TEXT",
          "index": 16,
          "name": "A_TABLE_SCHEMA",
          "comment": null
        },
        "A_TABLE_TYPE": {
          "type": "TEXT",
          "index": 17,
          "name": "A_TABLE_TYPE",
          "comment": null
        },
        "A_USER_DEFINED_TYPE_CATALOG": {
          "type": "TEXT",
          "index": 18,
          "name": "A_USER_DEFINED_TYPE_CATALOG",
          "comment": null
        },
        "A_USER_DEFINED_TYPE_NAME": {
          "type": "TEXT",
          "index": 19,
          "name": "A_USER_DEFINED_TYPE_NAME",
          "comment": null
        },
        "A_USER_DEFINED_TYPE_SCHEMA": {
          "type": "TEXT",
          "index": 20,
          "name": "A_USER_DEFINED_TYPE_SCHEMA",
          "comment": null
        },
        "B_IS_INSERTABLE_INTO": {
          "type": "BOOLEAN",
          "index": 21,
          "name": "B_IS_INSERTABLE_INTO",
          "comment": null
        },
        "B_IS_TRANSIENT": {
          "type": "BOOLEAN",
          "index": 22,
          "name": "B_IS_TRANSIENT",
          "comment": null
        },
        "B_IS_TYPED": {
          "type": "BOOLEAN",
          "index": 23,
          "name": "B_IS_TYPED",
          "comment": null
        },
        "M_BYTES": {
          "type": "NUMBER",
          "index": 24,
          "name": "M_BYTES",
          "comment": null
        },
        "M_RETENTION_TIME": {
          "type": "NUMBER",
          "index": 25,
          "name": "M_RETENTION_TIME",
          "comment": null
        },
        "M_ROW_COUNT": {
          "type": "NUMBER",
          "index": 26,
          "name": "M_ROW_COUNT",
          "comment": null
        },
        "A_LAST_ALTERED_AT_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 27,
          "name": "A_LAST_ALTERED_AT_DTS",
          "comment": null
        },
        "MD_VALID_TO_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 28,
          "name": "MD_VALID_TO_DTS",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 29,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 30,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 31,
          "name": "MD_INTGR_ID",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:40UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 7491072.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 154394.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_TABLES_D"
    },
    "model.snowflake_usage.W_DATABASE_STORAGE_USAGE_F": {
      "metadata": {
        "type": "BASE TABLE",
        "schema": "DBT_SNOWFLAKE_USAGE",
        "name": "W_DATABASE_STORAGE_USAGE_F",
        "database": "DEVELOPER_SANDBOX",
        "comment": null,
        "owner": "EXT_DEV_TEAM_ROLE"
      },
      "columns": {
        "K_DATABASE_STORAGE_USAGE_DLHK": {
          "type": "TEXT",
          "index": 1,
          "name": "K_DATABASE_STORAGE_USAGE_DLHK",
          "comment": null
        },
        "A_USAGE_DATE": {
          "type": "DATE",
          "index": 2,
          "name": "A_USAGE_DATE",
          "comment": null
        },
        "K_DATABASE_DLHK": {
          "type": "TEXT",
          "index": 3,
          "name": "K_DATABASE_DLHK",
          "comment": null
        },
        "K_DATABASE_BK": {
          "type": "NUMBER",
          "index": 4,
          "name": "K_DATABASE_BK",
          "comment": null
        },
        "M_AVERAGE_DATABASE_BYTES": {
          "type": "FLOAT",
          "index": 5,
          "name": "M_AVERAGE_DATABASE_BYTES",
          "comment": null
        },
        "M_AVERAGE_FAILSAFE_BYTES": {
          "type": "FLOAT",
          "index": 6,
          "name": "M_AVERAGE_FAILSAFE_BYTES",
          "comment": null
        },
        "M_AVERAGE_DATABASE_TERABYTES": {
          "type": "NUMBER",
          "index": 7,
          "name": "M_AVERAGE_DATABASE_TERABYTES",
          "comment": null
        },
        "M_AVERAGE_FAILSAFE_TERABYTES": {
          "type": "NUMBER",
          "index": 8,
          "name": "M_AVERAGE_FAILSAFE_TERABYTES",
          "comment": null
        },
        "M_BILLABLE_TB": {
          "type": "NUMBER",
          "index": 9,
          "name": "M_BILLABLE_TB",
          "comment": null
        },
        "MD_VALID_TO_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 10,
          "name": "MD_VALID_TO_DTS",
          "comment": null
        },
        "MD_IS_DELETED": {
          "type": "BOOLEAN",
          "index": 11,
          "name": "MD_IS_DELETED",
          "comment": null
        },
        "MD_ELT_UPDATED_DTS": {
          "type": "TIMESTAMP_LTZ",
          "index": 12,
          "name": "MD_ELT_UPDATED_DTS",
          "comment": null
        },
        "MD_INTGR_ID": {
          "type": "TEXT",
          "index": 13,
          "name": "MD_INTGR_ID",
          "comment": null
        },
        "M_AMOUNT_BILLABLE_STORAGE": {
          "type": "NUMBER",
          "index": 14,
          "name": "M_AMOUNT_BILLABLE_STORAGE",
          "comment": null
        },
        "M_AMOUNT_BILLABLE_FAILSAFE": {
          "type": "NUMBER",
          "index": 15,
          "name": "M_AMOUNT_BILLABLE_FAILSAFE",
          "comment": null
        },
        "M_AMOUNT_BILLABLE": {
          "type": "NUMBER",
          "index": 16,
          "name": "M_AMOUNT_BILLABLE",
          "comment": null
        },
        "M_STORAGE_RATE": {
          "type": "NUMBER",
          "index": 17,
          "name": "M_STORAGE_RATE",
          "comment": null
        },
        "A_RATE_CURRENCY": {
          "type": "TEXT",
          "index": 18,
          "name": "A_RATE_CURRENCY",
          "comment": null
        }
      },
      "stats": {
        "last_modified": {
          "id": "last_modified",
          "label": "Last Modified",
          "value": "2022-03-24 12:39UTC",
          "include": true,
          "description": "The timestamp for last update/change"
        },
        "bytes": {
          "id": "bytes",
          "label": "Approximate Size",
          "value": 220160.0,
          "include": true,
          "description": "Approximate size of the table as reported by Snowflake"
        },
        "row_count": {
          "id": "row_count",
          "label": "Row Count",
          "value": 4799.0,
          "include": true,
          "description": "An approximate count of rows in this table"
        },
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": true,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "model.snowflake_usage.W_DATABASE_STORAGE_USAGE_F"
    }
  },
  "sources": {
    "source.snowflake_usage.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "DATABASE_STORAGE_USAGE_HISTORY",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "USAGE_DATE": {
          "type": "DATE",
          "index": 1,
          "name": "USAGE_DATE",
          "comment": null
        },
        "DATABASE_ID": {
          "type": "NUMBER",
          "index": 2,
          "name": "DATABASE_ID",
          "comment": null
        },
        "DATABASE_NAME": {
          "type": "TEXT",
          "index": 3,
          "name": "DATABASE_NAME",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 4,
          "name": "DELETED",
          "comment": null
        },
        "AVERAGE_DATABASE_BYTES": {
          "type": "FLOAT",
          "index": 5,
          "name": "AVERAGE_DATABASE_BYTES",
          "comment": null
        },
        "AVERAGE_FAILSAFE_BYTES": {
          "type": "FLOAT",
          "index": 6,
          "name": "AVERAGE_FAILSAFE_BYTES",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.FILE_FORMATS": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "FILE_FORMATS",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "FILE_FORMAT_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "FILE_FORMAT_ID",
          "comment": null
        },
        "FILE_FORMAT_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "FILE_FORMAT_NAME",
          "comment": null
        },
        "FILE_FORMAT_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "FILE_FORMAT_SCHEMA_ID",
          "comment": null
        },
        "FILE_FORMAT_SCHEMA": {
          "type": "TEXT",
          "index": 4,
          "name": "FILE_FORMAT_SCHEMA",
          "comment": null
        },
        "FILE_FORMAT_CATALOG_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "FILE_FORMAT_CATALOG_ID",
          "comment": null
        },
        "FILE_FORMAT_CATALOG": {
          "type": "TEXT",
          "index": 6,
          "name": "FILE_FORMAT_CATALOG",
          "comment": null
        },
        "FILE_FORMAT_OWNER": {
          "type": "TEXT",
          "index": 7,
          "name": "FILE_FORMAT_OWNER",
          "comment": null
        },
        "FILE_FORMAT_TYPE": {
          "type": "TEXT",
          "index": 8,
          "name": "FILE_FORMAT_TYPE",
          "comment": null
        },
        "RECORD_DELIMITER": {
          "type": "TEXT",
          "index": 9,
          "name": "RECORD_DELIMITER",
          "comment": null
        },
        "FIELD_DELIMITER": {
          "type": "TEXT",
          "index": 10,
          "name": "FIELD_DELIMITER",
          "comment": null
        },
        "SKIP_HEADER": {
          "type": "NUMBER",
          "index": 11,
          "name": "SKIP_HEADER",
          "comment": null
        },
        "DATE_FORMAT": {
          "type": "TEXT",
          "index": 12,
          "name": "DATE_FORMAT",
          "comment": null
        },
        "TIME_FORMAT": {
          "type": "TEXT",
          "index": 13,
          "name": "TIME_FORMAT",
          "comment": null
        },
        "TIMESTAMP_FORMAT": {
          "type": "TEXT",
          "index": 14,
          "name": "TIMESTAMP_FORMAT",
          "comment": null
        },
        "BINARY_FORMAT": {
          "type": "TEXT",
          "index": 15,
          "name": "BINARY_FORMAT",
          "comment": null
        },
        "ESCAPE": {
          "type": "TEXT",
          "index": 16,
          "name": "ESCAPE",
          "comment": null
        },
        "ESCAPE_UNENCLOSED_FIELD": {
          "type": "TEXT",
          "index": 17,
          "name": "ESCAPE_UNENCLOSED_FIELD",
          "comment": null
        },
        "TRIM_SPACE": {
          "type": "BOOLEAN",
          "index": 18,
          "name": "TRIM_SPACE",
          "comment": null
        },
        "FIELD_OPTIONALLY_ENCLOSED_BY": {
          "type": "TEXT",
          "index": 19,
          "name": "FIELD_OPTIONALLY_ENCLOSED_BY",
          "comment": null
        },
        "NULL_IF": {
          "type": "TEXT",
          "index": 20,
          "name": "NULL_IF",
          "comment": null
        },
        "COMPRESSION": {
          "type": "TEXT",
          "index": 21,
          "name": "COMPRESSION",
          "comment": null
        },
        "ERROR_ON_COLUMN_COUNT_MISMATCH": {
          "type": "BOOLEAN",
          "index": 22,
          "name": "ERROR_ON_COLUMN_COUNT_MISMATCH",
          "comment": null
        },
        "CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 23,
          "name": "CREATED",
          "comment": null
        },
        "LAST_ALTERED": {
          "type": "TIMESTAMP_LTZ",
          "index": 24,
          "name": "LAST_ALTERED",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 25,
          "name": "DELETED",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 26,
          "name": "COMMENT",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.FILE_FORMATS"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.FUNCTIONS": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "FUNCTIONS",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "FUNCTION_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "FUNCTION_ID",
          "comment": null
        },
        "FUNCTION_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "FUNCTION_NAME",
          "comment": null
        },
        "FUNCTION_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "FUNCTION_SCHEMA_ID",
          "comment": null
        },
        "FUNCTION_SCHEMA": {
          "type": "TEXT",
          "index": 4,
          "name": "FUNCTION_SCHEMA",
          "comment": null
        },
        "FUNCTION_CATALOG_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "FUNCTION_CATALOG_ID",
          "comment": null
        },
        "FUNCTION_CATALOG": {
          "type": "TEXT",
          "index": 6,
          "name": "FUNCTION_CATALOG",
          "comment": null
        },
        "FUNCTION_OWNER": {
          "type": "TEXT",
          "index": 7,
          "name": "FUNCTION_OWNER",
          "comment": null
        },
        "ARGUMENT_SIGNATURE": {
          "type": "TEXT",
          "index": 8,
          "name": "ARGUMENT_SIGNATURE",
          "comment": null
        },
        "DATA_TYPE": {
          "type": "TEXT",
          "index": 9,
          "name": "DATA_TYPE",
          "comment": null
        },
        "CHARACTER_MAXIMUM_LENGTH": {
          "type": "NUMBER",
          "index": 10,
          "name": "CHARACTER_MAXIMUM_LENGTH",
          "comment": null
        },
        "CHARACTER_OCTET_LENGTH": {
          "type": "NUMBER",
          "index": 11,
          "name": "CHARACTER_OCTET_LENGTH",
          "comment": null
        },
        "NUMERIC_PRECISION": {
          "type": "NUMBER",
          "index": 12,
          "name": "NUMERIC_PRECISION",
          "comment": null
        },
        "NUMERIC_PRECISION_RADIX": {
          "type": "NUMBER",
          "index": 13,
          "name": "NUMERIC_PRECISION_RADIX",
          "comment": null
        },
        "NUMERIC_SCALE": {
          "type": "NUMBER",
          "index": 14,
          "name": "NUMERIC_SCALE",
          "comment": null
        },
        "FUNCTION_LANGUAGE": {
          "type": "TEXT",
          "index": 15,
          "name": "FUNCTION_LANGUAGE",
          "comment": null
        },
        "FUNCTION_DEFINITION": {
          "type": "TEXT",
          "index": 16,
          "name": "FUNCTION_DEFINITION",
          "comment": null
        },
        "VOLATILITY": {
          "type": "TEXT",
          "index": 17,
          "name": "VOLATILITY",
          "comment": null
        },
        "IS_NULL_CALL": {
          "type": "TEXT",
          "index": 18,
          "name": "IS_NULL_CALL",
          "comment": null
        },
        "CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 19,
          "name": "CREATED",
          "comment": null
        },
        "LAST_ALTERED": {
          "type": "TIMESTAMP_LTZ",
          "index": 20,
          "name": "LAST_ALTERED",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 21,
          "name": "DELETED",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 22,
          "name": "COMMENT",
          "comment": null
        },
        "IS_EXTERNAL": {
          "type": "TEXT",
          "index": 23,
          "name": "IS_EXTERNAL",
          "comment": null
        },
        "API_INTEGRATION": {
          "type": "TEXT",
          "index": 24,
          "name": "API_INTEGRATION",
          "comment": null
        },
        "CONTEXT_HEADERS": {
          "type": "TEXT",
          "index": 25,
          "name": "CONTEXT_HEADERS",
          "comment": null
        },
        "MAX_BATCH_ROWS": {
          "type": "NUMBER",
          "index": 26,
          "name": "MAX_BATCH_ROWS",
          "comment": null
        },
        "COMPRESSION": {
          "type": "TEXT",
          "index": 27,
          "name": "COMPRESSION",
          "comment": null
        },
        "IMPORTS": {
          "type": "TEXT",
          "index": 28,
          "name": "IMPORTS",
          "comment": null
        },
        "HANDLER": {
          "type": "TEXT",
          "index": 29,
          "name": "HANDLER",
          "comment": null
        },
        "TARGET_PATH": {
          "type": "TEXT",
          "index": 30,
          "name": "TARGET_PATH",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.FUNCTIONS"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.LOAD_HISTORY": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "LOAD_HISTORY",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "TABLE_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "TABLE_ID",
          "comment": null
        },
        "TABLE_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "TABLE_NAME",
          "comment": null
        },
        "SCHEMA_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "SCHEMA_ID",
          "comment": null
        },
        "SCHEMA_NAME": {
          "type": "TEXT",
          "index": 4,
          "name": "SCHEMA_NAME",
          "comment": null
        },
        "CATALOG_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "CATALOG_ID",
          "comment": null
        },
        "CATALOG_NAME": {
          "type": "TEXT",
          "index": 6,
          "name": "CATALOG_NAME",
          "comment": null
        },
        "FILE_NAME": {
          "type": "TEXT",
          "index": 7,
          "name": "FILE_NAME",
          "comment": null
        },
        "LAST_LOAD_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 8,
          "name": "LAST_LOAD_TIME",
          "comment": null
        },
        "STATUS": {
          "type": "TEXT",
          "index": 9,
          "name": "STATUS",
          "comment": null
        },
        "ROW_COUNT": {
          "type": "NUMBER",
          "index": 10,
          "name": "ROW_COUNT",
          "comment": null
        },
        "ROW_PARSED": {
          "type": "NUMBER",
          "index": 11,
          "name": "ROW_PARSED",
          "comment": null
        },
        "FIRST_ERROR_MESSAGE": {
          "type": "TEXT",
          "index": 12,
          "name": "FIRST_ERROR_MESSAGE",
          "comment": null
        },
        "FIRST_ERROR_LINE_NUMBER": {
          "type": "NUMBER",
          "index": 13,
          "name": "FIRST_ERROR_LINE_NUMBER",
          "comment": null
        },
        "FIRST_ERROR_CHARACTER_POSITION": {
          "type": "NUMBER",
          "index": 14,
          "name": "FIRST_ERROR_CHARACTER_POSITION",
          "comment": null
        },
        "FIRST_ERROR_COL_NAME": {
          "type": "TEXT",
          "index": 15,
          "name": "FIRST_ERROR_COL_NAME",
          "comment": null
        },
        "ERROR_COUNT": {
          "type": "NUMBER",
          "index": 16,
          "name": "ERROR_COUNT",
          "comment": null
        },
        "ERROR_LIMIT": {
          "type": "NUMBER",
          "index": 17,
          "name": "ERROR_LIMIT",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.LOAD_HISTORY"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.LOGIN_HISTORY": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "LOGIN_HISTORY",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "EVENT_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "EVENT_ID",
          "comment": null
        },
        "EVENT_TIMESTAMP": {
          "type": "TIMESTAMP_LTZ",
          "index": 2,
          "name": "EVENT_TIMESTAMP",
          "comment": null
        },
        "EVENT_TYPE": {
          "type": "TEXT",
          "index": 3,
          "name": "EVENT_TYPE",
          "comment": null
        },
        "USER_NAME": {
          "type": "TEXT",
          "index": 4,
          "name": "USER_NAME",
          "comment": null
        },
        "CLIENT_IP": {
          "type": "TEXT",
          "index": 5,
          "name": "CLIENT_IP",
          "comment": null
        },
        "REPORTED_CLIENT_TYPE": {
          "type": "TEXT",
          "index": 6,
          "name": "REPORTED_CLIENT_TYPE",
          "comment": null
        },
        "REPORTED_CLIENT_VERSION": {
          "type": "TEXT",
          "index": 7,
          "name": "REPORTED_CLIENT_VERSION",
          "comment": null
        },
        "FIRST_AUTHENTICATION_FACTOR": {
          "type": "TEXT",
          "index": 8,
          "name": "FIRST_AUTHENTICATION_FACTOR",
          "comment": null
        },
        "SECOND_AUTHENTICATION_FACTOR": {
          "type": "TEXT",
          "index": 9,
          "name": "SECOND_AUTHENTICATION_FACTOR",
          "comment": null
        },
        "IS_SUCCESS": {
          "type": "TEXT",
          "index": 10,
          "name": "IS_SUCCESS",
          "comment": null
        },
        "ERROR_CODE": {
          "type": "NUMBER",
          "index": 11,
          "name": "ERROR_CODE",
          "comment": null
        },
        "ERROR_MESSAGE": {
          "type": "TEXT",
          "index": 12,
          "name": "ERROR_MESSAGE",
          "comment": null
        },
        "RELATED_EVENT_ID": {
          "type": "NUMBER",
          "index": 13,
          "name": "RELATED_EVENT_ID",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.LOGIN_HISTORY"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.DATABASES": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "DATABASES",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "DATABASE_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "DATABASE_ID",
          "comment": null
        },
        "DATABASE_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "DATABASE_NAME",
          "comment": null
        },
        "DATABASE_OWNER": {
          "type": "TEXT",
          "index": 3,
          "name": "DATABASE_OWNER",
          "comment": null
        },
        "IS_TRANSIENT": {
          "type": "TEXT",
          "index": 4,
          "name": "IS_TRANSIENT",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 5,
          "name": "COMMENT",
          "comment": null
        },
        "CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 6,
          "name": "CREATED",
          "comment": null
        },
        "LAST_ALTERED": {
          "type": "TIMESTAMP_LTZ",
          "index": 7,
          "name": "LAST_ALTERED",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 8,
          "name": "DELETED",
          "comment": null
        },
        "RETENTION_TIME": {
          "type": "NUMBER",
          "index": 9,
          "name": "RETENTION_TIME",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.DATABASES"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "QUERY_HISTORY",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "QUERY_ID": {
          "type": "TEXT",
          "index": 1,
          "name": "QUERY_ID",
          "comment": null
        },
        "QUERY_TEXT": {
          "type": "TEXT",
          "index": 2,
          "name": "QUERY_TEXT",
          "comment": null
        },
        "DATABASE_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "DATABASE_ID",
          "comment": null
        },
        "DATABASE_NAME": {
          "type": "TEXT",
          "index": 4,
          "name": "DATABASE_NAME",
          "comment": null
        },
        "SCHEMA_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "SCHEMA_ID",
          "comment": null
        },
        "SCHEMA_NAME": {
          "type": "TEXT",
          "index": 6,
          "name": "SCHEMA_NAME",
          "comment": null
        },
        "QUERY_TYPE": {
          "type": "TEXT",
          "index": 7,
          "name": "QUERY_TYPE",
          "comment": null
        },
        "SESSION_ID": {
          "type": "NUMBER",
          "index": 8,
          "name": "SESSION_ID",
          "comment": null
        },
        "USER_NAME": {
          "type": "TEXT",
          "index": 9,
          "name": "USER_NAME",
          "comment": null
        },
        "ROLE_NAME": {
          "type": "TEXT",
          "index": 10,
          "name": "ROLE_NAME",
          "comment": null
        },
        "WAREHOUSE_ID": {
          "type": "NUMBER",
          "index": 11,
          "name": "WAREHOUSE_ID",
          "comment": null
        },
        "WAREHOUSE_NAME": {
          "type": "TEXT",
          "index": 12,
          "name": "WAREHOUSE_NAME",
          "comment": null
        },
        "WAREHOUSE_SIZE": {
          "type": "TEXT",
          "index": 13,
          "name": "WAREHOUSE_SIZE",
          "comment": null
        },
        "WAREHOUSE_TYPE": {
          "type": "TEXT",
          "index": 14,
          "name": "WAREHOUSE_TYPE",
          "comment": null
        },
        "CLUSTER_NUMBER": {
          "type": "NUMBER",
          "index": 15,
          "name": "CLUSTER_NUMBER",
          "comment": null
        },
        "QUERY_TAG": {
          "type": "TEXT",
          "index": 16,
          "name": "QUERY_TAG",
          "comment": null
        },
        "EXECUTION_STATUS": {
          "type": "TEXT",
          "index": 17,
          "name": "EXECUTION_STATUS",
          "comment": null
        },
        "ERROR_CODE": {
          "type": "TEXT",
          "index": 18,
          "name": "ERROR_CODE",
          "comment": null
        },
        "ERROR_MESSAGE": {
          "type": "TEXT",
          "index": 19,
          "name": "ERROR_MESSAGE",
          "comment": null
        },
        "START_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 20,
          "name": "START_TIME",
          "comment": null
        },
        "END_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 21,
          "name": "END_TIME",
          "comment": null
        },
        "TOTAL_ELAPSED_TIME": {
          "type": "NUMBER",
          "index": 22,
          "name": "TOTAL_ELAPSED_TIME",
          "comment": null
        },
        "BYTES_SCANNED": {
          "type": "NUMBER",
          "index": 23,
          "name": "BYTES_SCANNED",
          "comment": null
        },
        "PERCENTAGE_SCANNED_FROM_CACHE": {
          "type": "FLOAT",
          "index": 24,
          "name": "PERCENTAGE_SCANNED_FROM_CACHE",
          "comment": null
        },
        "BYTES_WRITTEN": {
          "type": "NUMBER",
          "index": 25,
          "name": "BYTES_WRITTEN",
          "comment": null
        },
        "BYTES_WRITTEN_TO_RESULT": {
          "type": "NUMBER",
          "index": 26,
          "name": "BYTES_WRITTEN_TO_RESULT",
          "comment": null
        },
        "BYTES_READ_FROM_RESULT": {
          "type": "NUMBER",
          "index": 27,
          "name": "BYTES_READ_FROM_RESULT",
          "comment": null
        },
        "ROWS_PRODUCED": {
          "type": "NUMBER",
          "index": 28,
          "name": "ROWS_PRODUCED",
          "comment": null
        },
        "ROWS_INSERTED": {
          "type": "NUMBER",
          "index": 29,
          "name": "ROWS_INSERTED",
          "comment": null
        },
        "ROWS_UPDATED": {
          "type": "NUMBER",
          "index": 30,
          "name": "ROWS_UPDATED",
          "comment": null
        },
        "ROWS_DELETED": {
          "type": "NUMBER",
          "index": 31,
          "name": "ROWS_DELETED",
          "comment": null
        },
        "ROWS_UNLOADED": {
          "type": "NUMBER",
          "index": 32,
          "name": "ROWS_UNLOADED",
          "comment": null
        },
        "BYTES_DELETED": {
          "type": "NUMBER",
          "index": 33,
          "name": "BYTES_DELETED",
          "comment": null
        },
        "PARTITIONS_SCANNED": {
          "type": "NUMBER",
          "index": 34,
          "name": "PARTITIONS_SCANNED",
          "comment": null
        },
        "PARTITIONS_TOTAL": {
          "type": "NUMBER",
          "index": 35,
          "name": "PARTITIONS_TOTAL",
          "comment": null
        },
        "BYTES_SPILLED_TO_LOCAL_STORAGE": {
          "type": "NUMBER",
          "index": 36,
          "name": "BYTES_SPILLED_TO_LOCAL_STORAGE",
          "comment": null
        },
        "BYTES_SPILLED_TO_REMOTE_STORAGE": {
          "type": "NUMBER",
          "index": 37,
          "name": "BYTES_SPILLED_TO_REMOTE_STORAGE",
          "comment": null
        },
        "BYTES_SENT_OVER_THE_NETWORK": {
          "type": "NUMBER",
          "index": 38,
          "name": "BYTES_SENT_OVER_THE_NETWORK",
          "comment": null
        },
        "COMPILATION_TIME": {
          "type": "NUMBER",
          "index": 39,
          "name": "COMPILATION_TIME",
          "comment": null
        },
        "EXECUTION_TIME": {
          "type": "NUMBER",
          "index": 40,
          "name": "EXECUTION_TIME",
          "comment": null
        },
        "QUEUED_PROVISIONING_TIME": {
          "type": "NUMBER",
          "index": 41,
          "name": "QUEUED_PROVISIONING_TIME",
          "comment": null
        },
        "QUEUED_REPAIR_TIME": {
          "type": "NUMBER",
          "index": 42,
          "name": "QUEUED_REPAIR_TIME",
          "comment": null
        },
        "QUEUED_OVERLOAD_TIME": {
          "type": "NUMBER",
          "index": 43,
          "name": "QUEUED_OVERLOAD_TIME",
          "comment": null
        },
        "TRANSACTION_BLOCKED_TIME": {
          "type": "NUMBER",
          "index": 44,
          "name": "TRANSACTION_BLOCKED_TIME",
          "comment": null
        },
        "OUTBOUND_DATA_TRANSFER_CLOUD": {
          "type": "TEXT",
          "index": 45,
          "name": "OUTBOUND_DATA_TRANSFER_CLOUD",
          "comment": null
        },
        "OUTBOUND_DATA_TRANSFER_REGION": {
          "type": "TEXT",
          "index": 46,
          "name": "OUTBOUND_DATA_TRANSFER_REGION",
          "comment": null
        },
        "OUTBOUND_DATA_TRANSFER_BYTES": {
          "type": "NUMBER",
          "index": 47,
          "name": "OUTBOUND_DATA_TRANSFER_BYTES",
          "comment": null
        },
        "INBOUND_DATA_TRANSFER_CLOUD": {
          "type": "TEXT",
          "index": 48,
          "name": "INBOUND_DATA_TRANSFER_CLOUD",
          "comment": null
        },
        "INBOUND_DATA_TRANSFER_REGION": {
          "type": "TEXT",
          "index": 49,
          "name": "INBOUND_DATA_TRANSFER_REGION",
          "comment": null
        },
        "INBOUND_DATA_TRANSFER_BYTES": {
          "type": "NUMBER",
          "index": 50,
          "name": "INBOUND_DATA_TRANSFER_BYTES",
          "comment": null
        },
        "LIST_EXTERNAL_FILES_TIME": {
          "type": "NUMBER",
          "index": 51,
          "name": "LIST_EXTERNAL_FILES_TIME",
          "comment": null
        },
        "CREDITS_USED_CLOUD_SERVICES": {
          "type": "FLOAT",
          "index": 52,
          "name": "CREDITS_USED_CLOUD_SERVICES",
          "comment": null
        },
        "RELEASE_VERSION": {
          "type": "TEXT",
          "index": 53,
          "name": "RELEASE_VERSION",
          "comment": null
        },
        "EXTERNAL_FUNCTION_TOTAL_INVOCATIONS": {
          "type": "NUMBER",
          "index": 54,
          "name": "EXTERNAL_FUNCTION_TOTAL_INVOCATIONS",
          "comment": null
        },
        "EXTERNAL_FUNCTION_TOTAL_SENT_ROWS": {
          "type": "NUMBER",
          "index": 55,
          "name": "EXTERNAL_FUNCTION_TOTAL_SENT_ROWS",
          "comment": null
        },
        "EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS": {
          "type": "NUMBER",
          "index": 56,
          "name": "EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS",
          "comment": null
        },
        "EXTERNAL_FUNCTION_TOTAL_SENT_BYTES": {
          "type": "NUMBER",
          "index": 57,
          "name": "EXTERNAL_FUNCTION_TOTAL_SENT_BYTES",
          "comment": null
        },
        "EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES": {
          "type": "NUMBER",
          "index": 58,
          "name": "EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES",
          "comment": null
        },
        "QUERY_LOAD_PERCENT": {
          "type": "NUMBER",
          "index": 59,
          "name": "QUERY_LOAD_PERCENT",
          "comment": null
        },
        "IS_CLIENT_GENERATED_STATEMENT": {
          "type": "BOOLEAN",
          "index": 60,
          "name": "IS_CLIENT_GENERATED_STATEMENT",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.ACCESS_HISTORY": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "ACCESS_HISTORY",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "QUERY_ID": {
          "type": "TEXT",
          "index": 1,
          "name": "QUERY_ID",
          "comment": null
        },
        "QUERY_START_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 2,
          "name": "QUERY_START_TIME",
          "comment": null
        },
        "USER_NAME": {
          "type": "TEXT",
          "index": 3,
          "name": "USER_NAME",
          "comment": null
        },
        "DIRECT_OBJECTS_ACCESSED": {
          "type": "ARRAY",
          "index": 4,
          "name": "DIRECT_OBJECTS_ACCESSED",
          "comment": null
        },
        "BASE_OBJECTS_ACCESSED": {
          "type": "ARRAY",
          "index": 5,
          "name": "BASE_OBJECTS_ACCESSED",
          "comment": null
        },
        "OBJECTS_MODIFIED": {
          "type": "ARRAY",
          "index": 6,
          "name": "OBJECTS_MODIFIED",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.ACCESS_HISTORY"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.SEQUENCES": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "SEQUENCES",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "SEQUENCE_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "SEQUENCE_ID",
          "comment": null
        },
        "SEQUENCE_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "SEQUENCE_NAME",
          "comment": null
        },
        "SEQUENCE_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "SEQUENCE_SCHEMA_ID",
          "comment": null
        },
        "SEQUENCE_SCHEMA": {
          "type": "TEXT",
          "index": 4,
          "name": "SEQUENCE_SCHEMA",
          "comment": null
        },
        "SEQUENCE_CATALOG_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "SEQUENCE_CATALOG_ID",
          "comment": null
        },
        "SEQUENCE_CATALOG": {
          "type": "TEXT",
          "index": 6,
          "name": "SEQUENCE_CATALOG",
          "comment": null
        },
        "SEQUENCE_OWNER": {
          "type": "TEXT",
          "index": 7,
          "name": "SEQUENCE_OWNER",
          "comment": null
        },
        "DATA_TYPE": {
          "type": "TEXT",
          "index": 8,
          "name": "DATA_TYPE",
          "comment": null
        },
        "NUMERIC_PRECISION": {
          "type": "NUMBER",
          "index": 9,
          "name": "NUMERIC_PRECISION",
          "comment": null
        },
        "NUMERIC_PRECISION_RADIX": {
          "type": "NUMBER",
          "index": 10,
          "name": "NUMERIC_PRECISION_RADIX",
          "comment": null
        },
        "NUMERIC_SCALE": {
          "type": "NUMBER",
          "index": 11,
          "name": "NUMERIC_SCALE",
          "comment": null
        },
        "START_VALUE": {
          "type": "TEXT",
          "index": 12,
          "name": "START_VALUE",
          "comment": null
        },
        "MINIMUM_VALUE": {
          "type": "TEXT",
          "index": 13,
          "name": "MINIMUM_VALUE",
          "comment": null
        },
        "MAXIMUM_VALUE": {
          "type": "TEXT",
          "index": 14,
          "name": "MAXIMUM_VALUE",
          "comment": null
        },
        "NEXT_VALUE": {
          "type": "TEXT",
          "index": 15,
          "name": "NEXT_VALUE",
          "comment": null
        },
        "INCREMENT": {
          "type": "TEXT",
          "index": 16,
          "name": "INCREMENT",
          "comment": null
        },
        "CYCLE_OPTION": {
          "type": "TEXT",
          "index": 17,
          "name": "CYCLE_OPTION",
          "comment": null
        },
        "CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 18,
          "name": "CREATED",
          "comment": null
        },
        "LAST_ALTERED": {
          "type": "TIMESTAMP_LTZ",
          "index": 19,
          "name": "LAST_ALTERED",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 20,
          "name": "DELETED",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 21,
          "name": "COMMENT",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.SEQUENCES"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.COLUMNS": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "COLUMNS",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "COLUMN_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "COLUMN_ID",
          "comment": null
        },
        "COLUMN_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "COLUMN_NAME",
          "comment": null
        },
        "TABLE_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "TABLE_ID",
          "comment": null
        },
        "TABLE_NAME": {
          "type": "TEXT",
          "index": 4,
          "name": "TABLE_NAME",
          "comment": null
        },
        "TABLE_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "TABLE_SCHEMA_ID",
          "comment": null
        },
        "TABLE_SCHEMA": {
          "type": "TEXT",
          "index": 6,
          "name": "TABLE_SCHEMA",
          "comment": null
        },
        "TABLE_CATALOG_ID": {
          "type": "NUMBER",
          "index": 7,
          "name": "TABLE_CATALOG_ID",
          "comment": null
        },
        "TABLE_CATALOG": {
          "type": "TEXT",
          "index": 8,
          "name": "TABLE_CATALOG",
          "comment": null
        },
        "ORDINAL_POSITION": {
          "type": "NUMBER",
          "index": 9,
          "name": "ORDINAL_POSITION",
          "comment": null
        },
        "COLUMN_DEFAULT": {
          "type": "TEXT",
          "index": 10,
          "name": "COLUMN_DEFAULT",
          "comment": null
        },
        "IS_NULLABLE": {
          "type": "TEXT",
          "index": 11,
          "name": "IS_NULLABLE",
          "comment": null
        },
        "DATA_TYPE": {
          "type": "TEXT",
          "index": 12,
          "name": "DATA_TYPE",
          "comment": null
        },
        "CHARACTER_MAXIMUM_LENGTH": {
          "type": "NUMBER",
          "index": 13,
          "name": "CHARACTER_MAXIMUM_LENGTH",
          "comment": null
        },
        "CHARACTER_OCTET_LENGTH": {
          "type": "NUMBER",
          "index": 14,
          "name": "CHARACTER_OCTET_LENGTH",
          "comment": null
        },
        "NUMERIC_PRECISION": {
          "type": "NUMBER",
          "index": 15,
          "name": "NUMERIC_PRECISION",
          "comment": null
        },
        "NUMERIC_PRECISION_RADIX": {
          "type": "NUMBER",
          "index": 16,
          "name": "NUMERIC_PRECISION_RADIX",
          "comment": null
        },
        "NUMERIC_SCALE": {
          "type": "NUMBER",
          "index": 17,
          "name": "NUMERIC_SCALE",
          "comment": null
        },
        "DATETIME_PRECISION": {
          "type": "NUMBER",
          "index": 18,
          "name": "DATETIME_PRECISION",
          "comment": null
        },
        "INTERVAL_TYPE": {
          "type": "TEXT",
          "index": 19,
          "name": "INTERVAL_TYPE",
          "comment": null
        },
        "INTERVAL_PRECISION": {
          "type": "TEXT",
          "index": 20,
          "name": "INTERVAL_PRECISION",
          "comment": null
        },
        "CHARACTER_SET_CATALOG": {
          "type": "TEXT",
          "index": 21,
          "name": "CHARACTER_SET_CATALOG",
          "comment": null
        },
        "CHARACTER_SET_SCHEMA": {
          "type": "TEXT",
          "index": 22,
          "name": "CHARACTER_SET_SCHEMA",
          "comment": null
        },
        "CHARACTER_SET_NAME": {
          "type": "TEXT",
          "index": 23,
          "name": "CHARACTER_SET_NAME",
          "comment": null
        },
        "COLLATION_CATALOG": {
          "type": "TEXT",
          "index": 24,
          "name": "COLLATION_CATALOG",
          "comment": null
        },
        "COLLATION_SCHEMA": {
          "type": "TEXT",
          "index": 25,
          "name": "COLLATION_SCHEMA",
          "comment": null
        },
        "COLLATION_NAME": {
          "type": "TEXT",
          "index": 26,
          "name": "COLLATION_NAME",
          "comment": null
        },
        "DOMAIN_CATALOG": {
          "type": "TEXT",
          "index": 27,
          "name": "DOMAIN_CATALOG",
          "comment": null
        },
        "DOMAIN_SCHEMA": {
          "type": "TEXT",
          "index": 28,
          "name": "DOMAIN_SCHEMA",
          "comment": null
        },
        "DOMAIN_NAME": {
          "type": "TEXT",
          "index": 29,
          "name": "DOMAIN_NAME",
          "comment": null
        },
        "UDT_CATALOG": {
          "type": "TEXT",
          "index": 30,
          "name": "UDT_CATALOG",
          "comment": null
        },
        "UDT_SCHEMA": {
          "type": "TEXT",
          "index": 31,
          "name": "UDT_SCHEMA",
          "comment": null
        },
        "UDT_NAME": {
          "type": "TEXT",
          "index": 32,
          "name": "UDT_NAME",
          "comment": null
        },
        "SCOPE_CATALOG": {
          "type": "TEXT",
          "index": 33,
          "name": "SCOPE_CATALOG",
          "comment": null
        },
        "SCOPE_SCHEMA": {
          "type": "TEXT",
          "index": 34,
          "name": "SCOPE_SCHEMA",
          "comment": null
        },
        "SCOPE_NAME": {
          "type": "TEXT",
          "index": 35,
          "name": "SCOPE_NAME",
          "comment": null
        },
        "MAXIMUM_CARDINALITY": {
          "type": "TEXT",
          "index": 36,
          "name": "MAXIMUM_CARDINALITY",
          "comment": null
        },
        "DTD_IDENTIFIER": {
          "type": "TEXT",
          "index": 37,
          "name": "DTD_IDENTIFIER",
          "comment": null
        },
        "IS_SELF_REFERENCING": {
          "type": "TEXT",
          "index": 38,
          "name": "IS_SELF_REFERENCING",
          "comment": null
        },
        "IS_IDENTITY": {
          "type": "TEXT",
          "index": 39,
          "name": "IS_IDENTITY",
          "comment": null
        },
        "IDENTITY_GENERATION": {
          "type": "TEXT",
          "index": 40,
          "name": "IDENTITY_GENERATION",
          "comment": null
        },
        "IDENTITY_START": {
          "type": "TEXT",
          "index": 41,
          "name": "IDENTITY_START",
          "comment": null
        },
        "IDENTITY_INCREMENT": {
          "type": "TEXT",
          "index": 42,
          "name": "IDENTITY_INCREMENT",
          "comment": null
        },
        "IDENTITY_MAXIMUM": {
          "type": "TEXT",
          "index": 43,
          "name": "IDENTITY_MAXIMUM",
          "comment": null
        },
        "IDENTITY_MINIMUM": {
          "type": "TEXT",
          "index": 44,
          "name": "IDENTITY_MINIMUM",
          "comment": null
        },
        "IDENTITY_CYCLE": {
          "type": "TEXT",
          "index": 45,
          "name": "IDENTITY_CYCLE",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 46,
          "name": "COMMENT",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 47,
          "name": "DELETED",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.COLUMNS"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.STAGES": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "STAGES",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "STAGE_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "STAGE_ID",
          "comment": null
        },
        "STAGE_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "STAGE_NAME",
          "comment": null
        },
        "STAGE_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "STAGE_SCHEMA_ID",
          "comment": null
        },
        "STAGE_SCHEMA": {
          "type": "TEXT",
          "index": 4,
          "name": "STAGE_SCHEMA",
          "comment": null
        },
        "STAGE_CATALOG_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "STAGE_CATALOG_ID",
          "comment": null
        },
        "STAGE_CATALOG": {
          "type": "TEXT",
          "index": 6,
          "name": "STAGE_CATALOG",
          "comment": null
        },
        "STAGE_URL": {
          "type": "TEXT",
          "index": 7,
          "name": "STAGE_URL",
          "comment": null
        },
        "STAGE_REGION": {
          "type": "TEXT",
          "index": 8,
          "name": "STAGE_REGION",
          "comment": null
        },
        "STAGE_TYPE": {
          "type": "TEXT",
          "index": 9,
          "name": "STAGE_TYPE",
          "comment": null
        },
        "STAGE_OWNER": {
          "type": "TEXT",
          "index": 10,
          "name": "STAGE_OWNER",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 11,
          "name": "COMMENT",
          "comment": null
        },
        "CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 12,
          "name": "CREATED",
          "comment": null
        },
        "LAST_ALTERED": {
          "type": "TIMESTAMP_LTZ",
          "index": 13,
          "name": "LAST_ALTERED",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 14,
          "name": "DELETED",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.STAGES"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.STORAGE_USAGE": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "STORAGE_USAGE",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "USAGE_DATE": {
          "type": "DATE",
          "index": 1,
          "name": "USAGE_DATE",
          "comment": null
        },
        "STORAGE_BYTES": {
          "type": "NUMBER",
          "index": 2,
          "name": "STORAGE_BYTES",
          "comment": null
        },
        "STAGE_BYTES": {
          "type": "NUMBER",
          "index": 3,
          "name": "STAGE_BYTES",
          "comment": null
        },
        "FAILSAFE_BYTES": {
          "type": "NUMBER",
          "index": 4,
          "name": "FAILSAFE_BYTES",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.STORAGE_USAGE"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.TABLE_CONSTRAINTS": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "TABLE_CONSTRAINTS",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "CONSTRAINT_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "CONSTRAINT_ID",
          "comment": null
        },
        "CONSTRAINT_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "CONSTRAINT_NAME",
          "comment": null
        },
        "CONSTRAINT_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "CONSTRAINT_SCHEMA_ID",
          "comment": null
        },
        "CONSTRAINT_SCHEMA": {
          "type": "TEXT",
          "index": 4,
          "name": "CONSTRAINT_SCHEMA",
          "comment": null
        },
        "CONSTRAINT_CATALOG_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "CONSTRAINT_CATALOG_ID",
          "comment": null
        },
        "CONSTRAINT_CATALOG": {
          "type": "TEXT",
          "index": 6,
          "name": "CONSTRAINT_CATALOG",
          "comment": null
        },
        "TABLE_ID": {
          "type": "NUMBER",
          "index": 7,
          "name": "TABLE_ID",
          "comment": null
        },
        "TABLE_NAME": {
          "type": "TEXT",
          "index": 8,
          "name": "TABLE_NAME",
          "comment": null
        },
        "TABLE_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 9,
          "name": "TABLE_SCHEMA_ID",
          "comment": null
        },
        "TABLE_SCHEMA": {
          "type": "TEXT",
          "index": 10,
          "name": "TABLE_SCHEMA",
          "comment": null
        },
        "TABLE_CATALOG_ID": {
          "type": "NUMBER",
          "index": 11,
          "name": "TABLE_CATALOG_ID",
          "comment": null
        },
        "TABLE_CATALOG": {
          "type": "TEXT",
          "index": 12,
          "name": "TABLE_CATALOG",
          "comment": null
        },
        "CONSTRAINT_TYPE": {
          "type": "TEXT",
          "index": 13,
          "name": "CONSTRAINT_TYPE",
          "comment": null
        },
        "IS_DEFERRABLE": {
          "type": "TEXT",
          "index": 14,
          "name": "IS_DEFERRABLE",
          "comment": null
        },
        "INITIALLY_DEFERRED": {
          "type": "TEXT",
          "index": 15,
          "name": "INITIALLY_DEFERRED",
          "comment": null
        },
        "ENFORCED": {
          "type": "TEXT",
          "index": 16,
          "name": "ENFORCED",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 17,
          "name": "COMMENT",
          "comment": null
        },
        "CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 18,
          "name": "CREATED",
          "comment": null
        },
        "LAST_ALTERED": {
          "type": "TIMESTAMP_LTZ",
          "index": 19,
          "name": "LAST_ALTERED",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 20,
          "name": "DELETED",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.TABLE_CONSTRAINTS"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.TABLE_STORAGE_METRICS": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "TABLE_STORAGE_METRICS",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "ID": { "type": "NUMBER", "index": 1, "name": "ID", "comment": null },
        "TABLE_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "TABLE_NAME",
          "comment": null
        },
        "TABLE_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "TABLE_SCHEMA_ID",
          "comment": null
        },
        "TABLE_SCHEMA": {
          "type": "TEXT",
          "index": 4,
          "name": "TABLE_SCHEMA",
          "comment": null
        },
        "TABLE_CATALOG_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "TABLE_CATALOG_ID",
          "comment": null
        },
        "TABLE_CATALOG": {
          "type": "TEXT",
          "index": 6,
          "name": "TABLE_CATALOG",
          "comment": null
        },
        "CLONE_GROUP_ID": {
          "type": "NUMBER",
          "index": 7,
          "name": "CLONE_GROUP_ID",
          "comment": null
        },
        "IS_TRANSIENT": {
          "type": "TEXT",
          "index": 8,
          "name": "IS_TRANSIENT",
          "comment": null
        },
        "ACTIVE_BYTES": {
          "type": "NUMBER",
          "index": 9,
          "name": "ACTIVE_BYTES",
          "comment": null
        },
        "TIME_TRAVEL_BYTES": {
          "type": "NUMBER",
          "index": 10,
          "name": "TIME_TRAVEL_BYTES",
          "comment": null
        },
        "FAILSAFE_BYTES": {
          "type": "NUMBER",
          "index": 11,
          "name": "FAILSAFE_BYTES",
          "comment": null
        },
        "RETAINED_FOR_CLONE_BYTES": {
          "type": "NUMBER",
          "index": 12,
          "name": "RETAINED_FOR_CLONE_BYTES",
          "comment": null
        },
        "DELETED": {
          "type": "BOOLEAN",
          "index": 13,
          "name": "DELETED",
          "comment": null
        },
        "TABLE_CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 14,
          "name": "TABLE_CREATED",
          "comment": null
        },
        "TABLE_DROPPED": {
          "type": "TIMESTAMP_LTZ",
          "index": 15,
          "name": "TABLE_DROPPED",
          "comment": null
        },
        "TABLE_ENTERED_FAILSAFE": {
          "type": "TIMESTAMP_LTZ",
          "index": 16,
          "name": "TABLE_ENTERED_FAILSAFE",
          "comment": null
        },
        "SCHEMA_CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 17,
          "name": "SCHEMA_CREATED",
          "comment": null
        },
        "SCHEMA_DROPPED": {
          "type": "TIMESTAMP_LTZ",
          "index": 18,
          "name": "SCHEMA_DROPPED",
          "comment": null
        },
        "CATALOG_CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 19,
          "name": "CATALOG_CREATED",
          "comment": null
        },
        "CATALOG_DROPPED": {
          "type": "TIMESTAMP_LTZ",
          "index": 20,
          "name": "CATALOG_DROPPED",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 21,
          "name": "COMMENT",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.TABLE_STORAGE_METRICS"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.TABLES": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "TABLES",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "TABLE_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "TABLE_ID",
          "comment": null
        },
        "TABLE_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "TABLE_NAME",
          "comment": null
        },
        "TABLE_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "TABLE_SCHEMA_ID",
          "comment": null
        },
        "TABLE_SCHEMA": {
          "type": "TEXT",
          "index": 4,
          "name": "TABLE_SCHEMA",
          "comment": null
        },
        "TABLE_CATALOG_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "TABLE_CATALOG_ID",
          "comment": null
        },
        "TABLE_CATALOG": {
          "type": "TEXT",
          "index": 6,
          "name": "TABLE_CATALOG",
          "comment": null
        },
        "TABLE_OWNER": {
          "type": "TEXT",
          "index": 7,
          "name": "TABLE_OWNER",
          "comment": null
        },
        "TABLE_TYPE": {
          "type": "TEXT",
          "index": 8,
          "name": "TABLE_TYPE",
          "comment": null
        },
        "IS_TRANSIENT": {
          "type": "TEXT",
          "index": 9,
          "name": "IS_TRANSIENT",
          "comment": null
        },
        "CLUSTERING_KEY": {
          "type": "TEXT",
          "index": 10,
          "name": "CLUSTERING_KEY",
          "comment": null
        },
        "ROW_COUNT": {
          "type": "NUMBER",
          "index": 11,
          "name": "ROW_COUNT",
          "comment": null
        },
        "BYTES": {
          "type": "NUMBER",
          "index": 12,
          "name": "BYTES",
          "comment": null
        },
        "RETENTION_TIME": {
          "type": "NUMBER",
          "index": 13,
          "name": "RETENTION_TIME",
          "comment": null
        },
        "SELF_REFERENCING_COLUMN_NAME": {
          "type": "TEXT",
          "index": 14,
          "name": "SELF_REFERENCING_COLUMN_NAME",
          "comment": null
        },
        "REFERENCE_GENERATION": {
          "type": "TEXT",
          "index": 15,
          "name": "REFERENCE_GENERATION",
          "comment": null
        },
        "USER_DEFINED_TYPE_CATALOG": {
          "type": "TEXT",
          "index": 16,
          "name": "USER_DEFINED_TYPE_CATALOG",
          "comment": null
        },
        "USER_DEFINED_TYPE_SCHEMA": {
          "type": "TEXT",
          "index": 17,
          "name": "USER_DEFINED_TYPE_SCHEMA",
          "comment": null
        },
        "USER_DEFINED_TYPE_NAME": {
          "type": "TEXT",
          "index": 18,
          "name": "USER_DEFINED_TYPE_NAME",
          "comment": null
        },
        "IS_INSERTABLE_INTO": {
          "type": "TEXT",
          "index": 19,
          "name": "IS_INSERTABLE_INTO",
          "comment": null
        },
        "IS_TYPED": {
          "type": "TEXT",
          "index": 20,
          "name": "IS_TYPED",
          "comment": null
        },
        "COMMIT_ACTION": {
          "type": "TEXT",
          "index": 21,
          "name": "COMMIT_ACTION",
          "comment": null
        },
        "CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 22,
          "name": "CREATED",
          "comment": null
        },
        "LAST_ALTERED": {
          "type": "TIMESTAMP_LTZ",
          "index": 23,
          "name": "LAST_ALTERED",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 24,
          "name": "DELETED",
          "comment": null
        },
        "AUTO_CLUSTERING_ON": {
          "type": "TEXT",
          "index": 25,
          "name": "AUTO_CLUSTERING_ON",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 26,
          "name": "COMMENT",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.TABLES"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.USERS": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "USERS",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "NAME": { "type": "TEXT", "index": 1, "name": "NAME", "comment": null },
        "CREATED_ON": {
          "type": "TIMESTAMP_LTZ",
          "index": 2,
          "name": "CREATED_ON",
          "comment": null
        },
        "DELETED_ON": {
          "type": "TIMESTAMP_LTZ",
          "index": 3,
          "name": "DELETED_ON",
          "comment": null
        },
        "LOGIN_NAME": {
          "type": "TEXT",
          "index": 4,
          "name": "LOGIN_NAME",
          "comment": null
        },
        "DISPLAY_NAME": {
          "type": "TEXT",
          "index": 5,
          "name": "DISPLAY_NAME",
          "comment": null
        },
        "FIRST_NAME": {
          "type": "TEXT",
          "index": 6,
          "name": "FIRST_NAME",
          "comment": null
        },
        "LAST_NAME": {
          "type": "TEXT",
          "index": 7,
          "name": "LAST_NAME",
          "comment": null
        },
        "EMAIL": {
          "type": "TEXT",
          "index": 8,
          "name": "EMAIL",
          "comment": null
        },
        "MUST_CHANGE_PASSWORD": {
          "type": "BOOLEAN",
          "index": 9,
          "name": "MUST_CHANGE_PASSWORD",
          "comment": null
        },
        "HAS_PASSWORD": {
          "type": "BOOLEAN",
          "index": 10,
          "name": "HAS_PASSWORD",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 11,
          "name": "COMMENT",
          "comment": null
        },
        "DISABLED": {
          "type": "VARIANT",
          "index": 12,
          "name": "DISABLED",
          "comment": null
        },
        "SNOWFLAKE_LOCK": {
          "type": "VARIANT",
          "index": 13,
          "name": "SNOWFLAKE_LOCK",
          "comment": null
        },
        "DEFAULT_WAREHOUSE": {
          "type": "TEXT",
          "index": 14,
          "name": "DEFAULT_WAREHOUSE",
          "comment": null
        },
        "DEFAULT_NAMESPACE": {
          "type": "TEXT",
          "index": 15,
          "name": "DEFAULT_NAMESPACE",
          "comment": null
        },
        "DEFAULT_ROLE": {
          "type": "TEXT",
          "index": 16,
          "name": "DEFAULT_ROLE",
          "comment": null
        },
        "EXT_AUTHN_DUO": {
          "type": "VARIANT",
          "index": 17,
          "name": "EXT_AUTHN_DUO",
          "comment": null
        },
        "EXT_AUTHN_UID": {
          "type": "TEXT",
          "index": 18,
          "name": "EXT_AUTHN_UID",
          "comment": null
        },
        "BYPASS_MFA_UNTIL": {
          "type": "TIMESTAMP_LTZ",
          "index": 19,
          "name": "BYPASS_MFA_UNTIL",
          "comment": null
        },
        "LAST_SUCCESS_LOGIN": {
          "type": "TIMESTAMP_LTZ",
          "index": 20,
          "name": "LAST_SUCCESS_LOGIN",
          "comment": null
        },
        "EXPIRES_AT": {
          "type": "TIMESTAMP_LTZ",
          "index": 21,
          "name": "EXPIRES_AT",
          "comment": null
        },
        "LOCKED_UNTIL_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 22,
          "name": "LOCKED_UNTIL_TIME",
          "comment": null
        },
        "HAS_RSA_PUBLIC_KEY": {
          "type": "BOOLEAN",
          "index": 23,
          "name": "HAS_RSA_PUBLIC_KEY",
          "comment": null
        },
        "PASSWORD_LAST_SET_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 24,
          "name": "PASSWORD_LAST_SET_TIME",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.USERS"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.VIEWS": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "VIEWS",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "TABLE_ID": {
          "type": "NUMBER",
          "index": 1,
          "name": "TABLE_ID",
          "comment": null
        },
        "TABLE_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "TABLE_NAME",
          "comment": null
        },
        "TABLE_SCHEMA_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "TABLE_SCHEMA_ID",
          "comment": null
        },
        "TABLE_SCHEMA": {
          "type": "TEXT",
          "index": 4,
          "name": "TABLE_SCHEMA",
          "comment": null
        },
        "TABLE_CATALOG_ID": {
          "type": "NUMBER",
          "index": 5,
          "name": "TABLE_CATALOG_ID",
          "comment": null
        },
        "TABLE_CATALOG": {
          "type": "TEXT",
          "index": 6,
          "name": "TABLE_CATALOG",
          "comment": null
        },
        "TABLE_OWNER": {
          "type": "TEXT",
          "index": 7,
          "name": "TABLE_OWNER",
          "comment": null
        },
        "VIEW_DEFINITION": {
          "type": "TEXT",
          "index": 8,
          "name": "VIEW_DEFINITION",
          "comment": null
        },
        "CHECK_OPTION": {
          "type": "TEXT",
          "index": 9,
          "name": "CHECK_OPTION",
          "comment": null
        },
        "IS_UPDATABLE": {
          "type": "TEXT",
          "index": 10,
          "name": "IS_UPDATABLE",
          "comment": null
        },
        "INSERTABLE_INTO": {
          "type": "TEXT",
          "index": 11,
          "name": "INSERTABLE_INTO",
          "comment": null
        },
        "IS_SECURE": {
          "type": "TEXT",
          "index": 12,
          "name": "IS_SECURE",
          "comment": null
        },
        "CREATED": {
          "type": "TIMESTAMP_LTZ",
          "index": 13,
          "name": "CREATED",
          "comment": null
        },
        "LAST_ALTERED": {
          "type": "TIMESTAMP_LTZ",
          "index": 14,
          "name": "LAST_ALTERED",
          "comment": null
        },
        "DELETED": {
          "type": "TIMESTAMP_LTZ",
          "index": 15,
          "name": "DELETED",
          "comment": null
        },
        "COMMENT": {
          "type": "TEXT",
          "index": 16,
          "name": "COMMENT",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.VIEWS"
    },
    "source.snowflake_usage.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY": {
      "metadata": {
        "type": "VIEW",
        "schema": "ACCOUNT_USAGE",
        "name": "WAREHOUSE_METERING_HISTORY",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "START_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 1,
          "name": "START_TIME",
          "comment": null
        },
        "END_TIME": {
          "type": "TIMESTAMP_LTZ",
          "index": 2,
          "name": "END_TIME",
          "comment": null
        },
        "WAREHOUSE_ID": {
          "type": "NUMBER",
          "index": 3,
          "name": "WAREHOUSE_ID",
          "comment": null
        },
        "WAREHOUSE_NAME": {
          "type": "TEXT",
          "index": 4,
          "name": "WAREHOUSE_NAME",
          "comment": null
        },
        "CREDITS_USED": {
          "type": "NUMBER",
          "index": 5,
          "name": "CREDITS_USED",
          "comment": null
        },
        "CREDITS_USED_COMPUTE": {
          "type": "NUMBER",
          "index": 6,
          "name": "CREDITS_USED_COMPUTE",
          "comment": null
        },
        "CREDITS_USED_CLOUD_SERVICES": {
          "type": "NUMBER",
          "index": 7,
          "name": "CREDITS_USED_CLOUD_SERVICES",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY"
    },
    "source.snowflake_usage.ORGANIZATION_USAGE.RATE_SHEET_DAILY": {
      "metadata": {
        "type": "VIEW",
        "schema": "ORGANIZATION_USAGE",
        "name": "RATE_SHEET_DAILY",
        "database": "SNOWFLAKE",
        "comment": null,
        "owner": null
      },
      "columns": {
        "DATE": { "type": "DATE", "index": 1, "name": "DATE", "comment": null },
        "ORGANIZATION_NAME": {
          "type": "TEXT",
          "index": 2,
          "name": "ORGANIZATION_NAME",
          "comment": null
        },
        "CONTRACT_NUMBER": {
          "type": "NUMBER",
          "index": 3,
          "name": "CONTRACT_NUMBER",
          "comment": null
        },
        "ACCOUNT_NAME": {
          "type": "TEXT",
          "index": 4,
          "name": "ACCOUNT_NAME",
          "comment": null
        },
        "ACCOUNT_LOCATOR": {
          "type": "TEXT",
          "index": 5,
          "name": "ACCOUNT_LOCATOR",
          "comment": null
        },
        "REGION": {
          "type": "TEXT",
          "index": 6,
          "name": "REGION",
          "comment": null
        },
        "SERVICE_LEVEL": {
          "type": "TEXT",
          "index": 7,
          "name": "SERVICE_LEVEL",
          "comment": null
        },
        "USAGE_TYPE": {
          "type": "TEXT",
          "index": 8,
          "name": "USAGE_TYPE",
          "comment": null
        },
        "CURRENCY": {
          "type": "TEXT",
          "index": 9,
          "name": "CURRENCY",
          "comment": null
        },
        "EFFECTIVE_RATE": {
          "type": "NUMBER",
          "index": 10,
          "name": "EFFECTIVE_RATE",
          "comment": null
        },
        "SERVICE_TYPE": {
          "type": "TEXT",
          "index": 11,
          "name": "SERVICE_TYPE",
          "comment": null
        }
      },
      "stats": {
        "has_stats": {
          "id": "has_stats",
          "label": "Has Stats?",
          "value": false,
          "include": false,
          "description": "Indicates whether there are statistics for this table"
        }
      },
      "unique_id": "source.snowflake_usage.ORGANIZATION_USAGE.RATE_SHEET_DAILY"
    }
  },
  "errors": null
}
',
//     manifest:
//       '{
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json",
    "dbt_version": "0.21.1",
    "generated_at": "2022-03-25T11:49:53.085600Z",
    "invocation_id": "79796819-7a70-476a-ae92-10d57002c03c",
    "env": {},
    "project_id": "795883310995c216c1dff2e10973f285",
    "user_id": null,
    "send_anonymous_usage_stats": false,
    "adapter_type": "snowflake"
  },
  "nodes": {
    "model.snowflake_usage.V_TABLES_STG": {
      "raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source AS (\r\n  SELECT \r\n  * \r\n  FROM  \t\r\n    {{source(var('source_account_usage_schema'),'TABLES')}}\r\n),\r\nrename AS \r\n(   \r\n  SELECT \r\n  --DLHK\r\n  MD5(S.TABLE_ID) AS K_TABLE_DLHK\r\n  ,MD5(CONCAT(COALESCE(S.TABLE_NAME,'A'),COALESCE(S.TABLE_SCHEMA_ID,0),COALESCE(S.TABLE_CATALOG_ID,0))) AS K_UNIQUE_TABLE_DLHK\r\n  --BUSINESS KEYS\r\n  ,S.TABLE_ID AS K_TABLE_BK\r\n  ,S.TABLE_CATALOG_ID AS K_DATABASE_BK\r\n  ,S.TABLE_SCHEMA_ID AS K_TABLE_SCHEMA_BK\r\n  --ATTRIBUTES  \r\n  ,S.AUTO_CLUSTERING_ON AS A_AUTO_CLUSTERING_ON\r\n  ,S.CLUSTERING_KEY AS A_CLUSTERING_KEY\r\n  ,S.COMMENT AS A_COMMENT\r\n  ,S.COMMIT_ACTION AS A_COMMIT_ACTION   \r\n  ,S.REFERENCE_GENERATION AS A_REFERENCE_GENERATION\r\n  ,S.SELF_REFERENCING_COLUMN_NAME AS A_SELF_REFERENCING_COLUMN_NAME\r\n  ,CONCAT(S.TABLE_CATALOG,'.',TABLE_SCHEMA,'.',TABLE_NAME) AS A_FULLY_QUALIFIED_TABLE_NAME\r\n  ,S.TABLE_CATALOG AS A_TABLE_CATALOG\r\n  ,S.TABLE_NAME AS A_TABLE_NAME\r\n  ,S.TABLE_OWNER AS A_TABLE_OWNER\r\n  ,S.TABLE_SCHEMA AS A_TABLE_SCHEMA\r\n  ,S.TABLE_TYPE AS A_TABLE_TYPE\r\n  ,S.USER_DEFINED_TYPE_CATALOG AS A_USER_DEFINED_TYPE_CATALOG\r\n  ,S.USER_DEFINED_TYPE_NAME AS A_USER_DEFINED_TYPE_NAME\r\n  ,S.USER_DEFINED_TYPE_SCHEMA AS A_USER_DEFINED_TYPE_SCHEMA   \r\n  --BOOLEAN\r\n  ,S.IS_INSERTABLE_INTO='YES' AS B_IS_INSERTABLE_INTO\r\n  ,S.IS_TRANSIENT='YES' AS B_IS_TRANSIENT\r\n  ,S.IS_TYPED='YES' AS B_IS_TYPED\r\n  --METRICS\r\n  ,S.BYTES AS M_BYTES\r\n  ,S.RETENTION_TIME AS M_RETENTION_TIME\r\n  ,S.ROW_COUNT AS M_ROW_COUNT\r\n  ,S.LAST_ALTERED AS A_LAST_ALTERED_AT_DTS\r\n  --//metadata (MD)  \r\n  ,S.DELETED AS MD_VALID_TO_DTS\r\n  ,S.DELETED IS NOT NULL AS MD_IS_DELETED\r\n  ,CURRENT_TIMESTAMP as MD_ELT_UPDATED_DTS\r\n  ,'{{invocation_id}}' AS MD_INTGR_ID\r\n\r\n  FROM\r\n    source S\r\n)\r\n\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.snowflake_usage.ACCOUNT_USAGE.TABLES"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "staging", "TABLES", "V_TABLES_STG"],
      "unique_id": "model.snowflake_usage.V_TABLES_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/TABLES/V_TABLES_STG.sql",
      "original_file_path": "models/staging/TABLES/V_TABLES_STG.sql",
      "name": "V_TABLES_STG",
      "alias": "V_TABLES_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "ace8b4db6f02929482024ff85a1d4b45249737bf8d1dd840d7905a0cd1c47241"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ACCOUNT_USAGE", "TABLES"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/TABLES/V_TABLES_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    SNOWFLAKE.ACCOUNT_USAGE.\"TABLES\"\n),\nrename AS \n(   \n  SELECT \n  --DLHK\n  MD5(S.TABLE_ID) AS K_TABLE_DLHK\n  ,MD5(CONCAT(COALESCE(S.TABLE_NAME,'A'),COALESCE(S.TABLE_SCHEMA_ID,0),COALESCE(S.TABLE_CATALOG_ID,0))) AS K_UNIQUE_TABLE_DLHK\n  --BUSINESS KEYS\n  ,S.TABLE_ID AS K_TABLE_BK\n  ,S.TABLE_CATALOG_ID AS K_DATABASE_BK\n  ,S.TABLE_SCHEMA_ID AS K_TABLE_SCHEMA_BK\n  --ATTRIBUTES  \n  ,S.AUTO_CLUSTERING_ON AS A_AUTO_CLUSTERING_ON\n  ,S.CLUSTERING_KEY AS A_CLUSTERING_KEY\n  ,S.COMMENT AS A_COMMENT\n  ,S.COMMIT_ACTION AS A_COMMIT_ACTION   \n  ,S.REFERENCE_GENERATION AS A_REFERENCE_GENERATION\n  ,S.SELF_REFERENCING_COLUMN_NAME AS A_SELF_REFERENCING_COLUMN_NAME\n  ,CONCAT(S.TABLE_CATALOG,'.',TABLE_SCHEMA,'.',TABLE_NAME) AS A_FULLY_QUALIFIED_TABLE_NAME\n  ,S.TABLE_CATALOG AS A_TABLE_CATALOG\n  ,S.TABLE_NAME AS A_TABLE_NAME\n  ,S.TABLE_OWNER AS A_TABLE_OWNER\n  ,S.TABLE_SCHEMA AS A_TABLE_SCHEMA\n  ,S.TABLE_TYPE AS A_TABLE_TYPE\n  ,S.USER_DEFINED_TYPE_CATALOG AS A_USER_DEFINED_TYPE_CATALOG\n  ,S.USER_DEFINED_TYPE_NAME AS A_USER_DEFINED_TYPE_NAME\n  ,S.USER_DEFINED_TYPE_SCHEMA AS A_USER_DEFINED_TYPE_SCHEMA   \n  --BOOLEAN\n  ,S.IS_INSERTABLE_INTO='YES' AS B_IS_INSERTABLE_INTO\n  ,S.IS_TRANSIENT='YES' AS B_IS_TRANSIENT\n  ,S.IS_TYPED='YES' AS B_IS_TYPED\n  --METRICS\n  ,S.BYTES AS M_BYTES\n  ,S.RETENTION_TIME AS M_RETENTION_TIME\n  ,S.ROW_COUNT AS M_ROW_COUNT\n  ,S.LAST_ALTERED AS A_LAST_ALTERED_AT_DTS\n  --//metadata (MD)  \n  ,S.DELETED AS MD_VALID_TO_DTS\n  ,S.DELETED IS NOT NULL AS MD_IS_DELETED\n  ,CURRENT_TIMESTAMP as MD_ELT_UPDATED_DTS\n  ,'79796819-7a70-476a-ae92-10d57002c03c' AS MD_INTGR_ID\n\n  FROM\n    source S\n)\n\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_TABLES_STG"
    },
    "model.snowflake_usage.V_DATABASES_STG": {
      "raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source AS (\r\n  SELECT \r\n  * \r\n  FROM  \t\r\n    {{source(var('source_account_usage_schema'),'DATABASES')}}\r\n),\r\nrename AS \r\n(   \r\n  SELECT \r\n  --DLHK\r\n  MD5(S.DATABASE_ID) AS K_DATABASE_DLHK  \r\n  --BUSINESS KEYS  \r\n  ,DATABASE_ID AS K_DATABASE_BK\r\n  --ATTRIBUTES\r\n  ,DATABASE_NAME AS A_DATABASE_NAME\r\n  ,DATABASE_OWNER AS A_DATABASE_OWNER\r\n  ,COMMENT AS A_COMMENT\r\n  ,LAST_ALTERED AS A_LAST_ALTERED_AT_DTS\r\n  ,S.CREATED AS A_CREATED_AT_DTS\r\n  ,S.DELETED AS A_DELETED_AT_DTS\r\n  --BOOLEAN\r\n  ,NOT(IS_TRANSIENT='NO') AS B_IS_TRANSIENT\r\n  --METRICS\r\n  ,RETENTION_TIME AS M_RETENTION_TIME  \r\n  --//metadata (MD)\r\n  ,S.DELETED IS NOT NULL AS MD_IS_DELETED\r\n  ,CURRENT_TIMESTAMP as MD_ELT_UPDATED_DTS\r\n  ,'{{invocation_id}}' AS MD_INTGR_ID\r\n\r\n  FROM\r\n    source S\r\n)\r\n\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.snowflake_usage.ACCOUNT_USAGE.DATABASES"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "staging", "DATABASES", "V_DATABASES_STG"],
      "unique_id": "model.snowflake_usage.V_DATABASES_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/DATABASES/V_DATABASES_STG.sql",
      "original_file_path": "models/staging/DATABASES/V_DATABASES_STG.sql",
      "name": "V_DATABASES_STG",
      "alias": "V_DATABASES_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "cc33024b88dbe6272e18c0e5819b8c0ae93bd0f0837060add035b501a0f9a391"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ACCOUNT_USAGE", "DATABASES"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/DATABASES/V_DATABASES_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    SNOWFLAKE.ACCOUNT_USAGE.\"DATABASES\"\n),\nrename AS \n(   \n  SELECT \n  --DLHK\n  MD5(S.DATABASE_ID) AS K_DATABASE_DLHK  \n  --BUSINESS KEYS  \n  ,DATABASE_ID AS K_DATABASE_BK\n  --ATTRIBUTES\n  ,DATABASE_NAME AS A_DATABASE_NAME\n  ,DATABASE_OWNER AS A_DATABASE_OWNER\n  ,COMMENT AS A_COMMENT\n  ,LAST_ALTERED AS A_LAST_ALTERED_AT_DTS\n  ,S.CREATED AS A_CREATED_AT_DTS\n  ,S.DELETED AS A_DELETED_AT_DTS\n  --BOOLEAN\n  ,NOT(IS_TRANSIENT='NO') AS B_IS_TRANSIENT\n  --METRICS\n  ,RETENTION_TIME AS M_RETENTION_TIME  \n  --//metadata (MD)\n  ,S.DELETED IS NOT NULL AS MD_IS_DELETED\n  ,CURRENT_TIMESTAMP as MD_ELT_UPDATED_DTS\n  ,'79796819-7a70-476a-ae92-10d57002c03c' AS MD_INTGR_ID\n\n  FROM\n    source S\n)\n\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DATABASES_STG"
    },
    "model.snowflake_usage.V_DATABASE_DAILY_STORAGE_USAGE_STG": {
      "raw_sql": "{{ config(\r\n    transient=false,\r\n    materialized= 'view',\r\n    schema= var('target_schema'),\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source(var('source_account_usage_schema'),'DATABASE_STORAGE_USAGE_HISTORY')}}\r\n),\r\n\r\nrename as (\r\n   SELECT \r\n    MD5(S.USAGE_DATE::STRING) AS K_DATABASE_STORAGE_USAGE_DLHK\r\n    ,S.USAGE_DATE AS A_USAGE_DATE\r\n    ,MD5(DATABASE_ID) AS K_DATABASE_DLHK\r\n    ,DATABASE_ID AS K_DATABASE_BK\r\n    ,S.AVERAGE_DATABASE_BYTES AS M_AVERAGE_DATABASE_BYTES\r\n    ,S.AVERAGE_FAILSAFE_BYTES AS M_AVERAGE_FAILSAFE_BYTES    \r\n\r\n    ,(AVERAGE_DATABASE_BYTES / power(1024, 4))::NUMERIC(15,6)  AS M_AVERAGE_DATABASE_TERABYTES\r\n    ,(AVERAGE_FAILSAFE_BYTES / power(1024, 4))::NUMERIC(15,6) AS M_AVERAGE_FAILSAFE_TERABYTES    \r\n\r\n    ,((AVERAGE_DATABASE_BYTES + AVERAGE_FAILSAFE_BYTES) / power(1024, 4))::NUMERIC(15,6) as M_BILLABLE_TB    \r\n    ,DELETED AS MD_VALID_TO_DTS\r\n    ,DELETED IS NOT NULL AS MD_IS_DELETED\r\n    , CURRENT_TIMESTAMP AS MD_ELT_UPDATED_DTS        \r\n    , '{{invocation_id}}' AS MD_INTGR_ID\r\nFROM source S\r\n)\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "source.snowflake_usage.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": [
        "snowflake_usage",
        "staging",
        "DATABASE_STORAGE_HISTORY",
        "V_DATABASE_DAILY_STORAGE_USAGE_STG"
      ],
      "unique_id": "model.snowflake_usage.V_DATABASE_DAILY_STORAGE_USAGE_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/DATABASE_STORAGE_HISTORY/V_DATABASE_DAILY_STORAGE_USAGE_STG.sql",
      "original_file_path": "models/staging/DATABASE_STORAGE_HISTORY/V_DATABASE_DAILY_STORAGE_USAGE_STG.sql",
      "name": "V_DATABASE_DAILY_STORAGE_USAGE_STG",
      "alias": "V_DATABASE_DAILY_STORAGE_USAGE_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "b4c4db60447d468a053448c62aa7a1ede3728f9fd40bcc760a5f8b7024b7be4d"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ACCOUNT_USAGE", "DATABASE_STORAGE_USAGE_HISTORY"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/DATABASE_STORAGE_HISTORY/V_DATABASE_DAILY_STORAGE_USAGE_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "transient": false,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  SNOWFLAKE.ACCOUNT_USAGE.\"DATABASE_STORAGE_USAGE_HISTORY\"\n),\n\nrename as (\n   SELECT \n    MD5(S.USAGE_DATE::STRING) AS K_DATABASE_STORAGE_USAGE_DLHK\n    ,S.USAGE_DATE AS A_USAGE_DATE\n    ,MD5(DATABASE_ID) AS K_DATABASE_DLHK\n    ,DATABASE_ID AS K_DATABASE_BK\n    ,S.AVERAGE_DATABASE_BYTES AS M_AVERAGE_DATABASE_BYTES\n    ,S.AVERAGE_FAILSAFE_BYTES AS M_AVERAGE_FAILSAFE_BYTES    \n\n    ,(AVERAGE_DATABASE_BYTES / power(1024, 4))::NUMERIC(15,6)  AS M_AVERAGE_DATABASE_TERABYTES\n    ,(AVERAGE_FAILSAFE_BYTES / power(1024, 4))::NUMERIC(15,6) AS M_AVERAGE_FAILSAFE_TERABYTES    \n\n    ,((AVERAGE_DATABASE_BYTES + AVERAGE_FAILSAFE_BYTES) / power(1024, 4))::NUMERIC(15,6) as M_BILLABLE_TB    \n    ,DELETED AS MD_VALID_TO_DTS\n    ,DELETED IS NOT NULL AS MD_IS_DELETED\n    , CURRENT_TIMESTAMP AS MD_ELT_UPDATED_DTS        \n    , '79796819-7a70-476a-ae92-10d57002c03c' AS MD_INTGR_ID\nFROM source S\n)\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DATABASE_DAILY_STORAGE_USAGE_STG"
    },
    "model.snowflake_usage.V_DAILY_STORAGE_USAGE_STG": {
      "raw_sql": "{{ config(\r\n    transient=false,\r\n    materialized= 'view',\r\n    schema= var('target_schema'),\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source(var('source_account_usage_schema'),'STORAGE_USAGE')}}\r\n),\r\n\r\nrename as (\r\n   SELECT \r\n    MD5(S.USAGE_DATE::STRING) AS K_STORAGE_USAGE_DLHK\r\n    ,S.USAGE_DATE AS A_USAGE_DATE\r\n    ,S.STORAGE_BYTES AS M_STORAGE_BYTES\r\n    ,S.STAGE_BYTES AS M_STAGE_BYTES\r\n    ,S.FAILSAFE_BYTES AS M_FAILSAFE_BYTES\r\n\r\n    ,STORAGE_BYTES / power(1024, 4)  AS M_STORAGE_TERABYTES\r\n    ,STAGE_BYTES / power(1024, 4)  AS M_STAGE_TERABYTES\r\n    ,FAILSAFE_BYTES / power(1024, 4)   AS M_FAILSAFE_TERABYTES\r\n\r\n    ,(STORAGE_BYTES + STAGE_BYTES + FAILSAFE_BYTES) / power(1024, 4) as M_BILLABLE_TB\r\n    \r\n    , CURRENT_TIMESTAMP AS MD_ELT_UPDATED_DTS        \r\n    , '{{invocation_id}}' AS MD_INTGR_ID\r\nFROM source S\r\n)\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.snowflake_usage.ACCOUNT_USAGE.STORAGE_USAGE"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": [
        "snowflake_usage",
        "staging",
        "DAILY_STORAGE_USAGE",
        "V_DAILY_STORAGE_USAGE_STG"
      ],
      "unique_id": "model.snowflake_usage.V_DAILY_STORAGE_USAGE_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/DAILY_STORAGE_USAGE/V_DAILY_STORAGE_USAGE_STG.sql",
      "original_file_path": "models/staging/DAILY_STORAGE_USAGE/V_DAILY_STORAGE_USAGE_STG.sql",
      "name": "V_DAILY_STORAGE_USAGE_STG",
      "alias": "V_DAILY_STORAGE_USAGE_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "aa5f8a544c6222f67661380ebed20290bd6dc561ea8b332e059ded24e7ae0d57"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ACCOUNT_USAGE", "STORAGE_USAGE"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/DAILY_STORAGE_USAGE/V_DAILY_STORAGE_USAGE_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "transient": false,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  SNOWFLAKE.ACCOUNT_USAGE.\"STORAGE_USAGE\"\n),\n\nrename as (\n   SELECT \n    MD5(S.USAGE_DATE::STRING) AS K_STORAGE_USAGE_DLHK\n    ,S.USAGE_DATE AS A_USAGE_DATE\n    ,S.STORAGE_BYTES AS M_STORAGE_BYTES\n    ,S.STAGE_BYTES AS M_STAGE_BYTES\n    ,S.FAILSAFE_BYTES AS M_FAILSAFE_BYTES\n\n    ,STORAGE_BYTES / power(1024, 4)  AS M_STORAGE_TERABYTES\n    ,STAGE_BYTES / power(1024, 4)  AS M_STAGE_TERABYTES\n    ,FAILSAFE_BYTES / power(1024, 4)   AS M_FAILSAFE_TERABYTES\n\n    ,(STORAGE_BYTES + STAGE_BYTES + FAILSAFE_BYTES) / power(1024, 4) as M_BILLABLE_TB\n    \n    , CURRENT_TIMESTAMP AS MD_ELT_UPDATED_DTS        \n    , '79796819-7a70-476a-ae92-10d57002c03c' AS MD_INTGR_ID\nFROM source S\n)\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DAILY_STORAGE_USAGE_STG"
    },
    "model.snowflake_usage.V_DATE_STG": {
      "raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nSELECT \r\n     to_date('2015-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as DD, /*<<Modify date for preferred table start date*/\r\n      seq1() as Sl,row_number() over (order by Sl) as row_numbers,\r\n      dateadd(day,row_numbers,DD) as V_DATE,\r\n      case when date_part(dd, V_DATE) < 10 and date_part(mm, V_DATE) > 9 then\r\n        date_part(year, V_DATE)||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\r\n         when date_part(dd, V_DATE) < 10 and  date_part(mm, V_DATE) < 10 then \r\n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\r\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) < 10 then\r\n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||date_part(dd, V_DATE)\r\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) > 9 then\r\n         date_part(year, V_DATE)||date_part(mm, V_DATE)||date_part(dd, V_DATE) end as DATE_KEY,\r\n      V_DATE as DATE_COLUMN,\r\n      dayname(dateadd(day,row_numbers,DD)) as DAY_NAME_1,\r\n      case \r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Mon' then 'Monday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Tue' then 'Tuesday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Wed' then 'Wednesday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Thu' then 'Thursday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Fri' then 'Friday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sat' then 'Saturday'\r\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sun' then 'Sunday' end ||', '||\r\n      case when monthname(dateadd(day,row_numbers,DD)) ='Jan' then 'January'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Feb' then 'February'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Mar' then 'March'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Apr' then 'April'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='May' then 'May'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Jun' then 'June'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Jul' then 'July'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Aug' then 'August'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Sep' then 'September'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Oct' then 'October'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Nov' then 'November'\r\n           when monthname(dateadd(day,row_numbers,DD)) ='Dec' then 'December' end\r\n           ||' '|| to_varchar(dateadd(day,row_numbers,DD), ' dd, yyyy') as FULL_DATE_DESC,\r\n      dateadd(day,row_numbers,DD) as V_DATE_1,\r\n      dayofweek(V_DATE_1)+1 as DAY_NUM_IN_WEEK,\r\n      Date_part(dd,V_DATE_1) as DAY_NUM_IN_MONTH,\r\n      dayofyear(V_DATE_1) as DAY_NUM_IN_YEAR,\r\n      case \r\n        when dayname(V_DATE_1) = 'Mon' then 'Monday'\r\n        when dayname(V_DATE_1) = 'Tue' then 'Tuesday'\r\n        when dayname(V_DATE_1) = 'Wed' then 'Wednesday'\r\n        when dayname(V_DATE_1) = 'Thu' then 'Thursday'\r\n        when dayname(V_DATE_1) = 'Fri' then 'Friday'\r\n        when dayname(V_DATE_1) = 'Sat' then 'Saturday'\r\n        when dayname(V_DATE_1) = 'Sun' then 'Sunday' end as DAY_NAME,\r\n      dayname(dateadd(day,row_numbers,DD)) as DAY_ABBREV,\r\n      case  \r\n        when dayname(V_DATE_1) = 'Sun' and dayname(V_DATE_1) = 'Sat' then \r\n                 'Not-Weekday'\r\n        else 'Weekday' end as WEEKDAY_IND,\r\n       case \r\n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0704' or\r\n        DATE_KEY = date_part(year, V_DATE)||'1225' or DATE_KEY = date_part(year, V_DATE)||'1226') then  \r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Wed' \r\n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Thu' \r\n        and dateadd(day,-3,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Fri' \r\n        and dateadd(day,-4,last_day(V_DATE_1)) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sat' \r\n        and dateadd(day,-5,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sun' \r\n        and dateadd(day,-6,last_day(V_DATE_1)) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Mon' \r\n        and last_day(V_DATE_1) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Tue' \r\n        and dateadd(day,-1 ,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \r\n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \r\n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \r\n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \r\n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \r\n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \r\n        and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \r\n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \r\n        and (dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  or \r\n           dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \r\n        and ( dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \r\n        and ( dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,20,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n         'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \r\n        and ( dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \r\n        and ( dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \r\n        and (dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \r\n        and (dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \r\n           dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\r\n         'Holiday'    \r\n        else\r\n        'Not-Holiday' end as US_HOLIDAY_IND,\r\n      /*Modify the following for Company Specific Holidays*/\r\n      case \r\n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0219'\r\n        or DATE_KEY = date_part(year, V_DATE)||'0528' or DATE_KEY = date_part(year, V_DATE)||'0704' \r\n        or DATE_KEY = date_part(year, V_DATE)||'1225' )then \r\n        'Holiday'               \r\n                when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Fri' \r\n        and last_day(V_DATE_1) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sat' \r\n        and dateadd(day,-1,last_day(V_DATE_1)) = V_DATE_1  then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sun' \r\n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue'\r\n                and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \r\n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu'\r\n                and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \r\n        and date_part(year, V_DATE_1)||'-04-01' = V_DATE_1 then\r\n        'Holiday'\r\n                when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \r\n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu' \r\n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \r\n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sat' \r\n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sun' \r\n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Mon' \r\n                and date_part(year, V_DATE_1)||'-04-01'= V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue' \r\n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\r\n        'Holiday'   \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \r\n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \r\n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \r\n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \r\n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \r\n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \r\n                and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \r\n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\r\n        'Holiday' \r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \r\n        and dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \r\n        and dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \r\n        and dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\r\n         'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \r\n        and dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \r\n        and dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \r\n        and dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\r\n        'Holiday'\r\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \r\n        and dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\r\n         'Holiday'     \r\n        else\r\n        'Not-Holiday' end as COMPANY_HOLIDAY_IND,\r\n      case                                           \r\n        when last_day(V_DATE_1) = V_DATE_1 then \r\n        'Month-end'\r\n        else 'Not-Month-end' end as MONTH_END_IND,\r\n          \r\n      case when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\r\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\r\n            date_part(mm,date_trunc('week',V_DATE_1))||'0'||\r\n            date_part(dd,date_trunc('week',V_DATE_1))  \r\n         when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\r\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\r\n            date_part(mm,date_trunc('week',V_DATE_1))||date_part(dd,date_trunc('week',V_DATE_1))    \r\n         when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\r\n            date_part(yyyy,date_trunc('week',V_DATE_1))||date_part(mm,date_trunc('week',V_DATE_1))||\r\n            '0'||date_part(dd,date_trunc('week',V_DATE_1))    \r\n        when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\r\n            date_part(yyyy,date_trunc('week',V_DATE_1))||\r\n            date_part(mm,date_trunc('week',V_DATE_1))||\r\n            date_part(dd,date_trunc('week',V_DATE_1)) end as WEEK_BEGIN_DATE_NKEY,\r\n      date_trunc('week',V_DATE_1) as WEEK_BEGIN_DATE,\r\n\r\n      case when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) < 10 then\r\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\r\n            date_part(mm,last_day(V_DATE_1,'week'))||'0'||\r\n            date_part(dd,last_day(V_DATE_1,'week')) \r\n         when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\r\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\r\n            date_part(mm,last_day(V_DATE_1,'week'))||date_part(dd,last_day(V_DATE_1,'week'))   \r\n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) < 10  then\r\n            date_part(yyyy,last_day(V_DATE_1,'week'))||date_part(mm,last_day(V_DATE_1,'week'))||'0'||\r\n            date_part(dd,last_day(V_DATE_1,'week'))   \r\n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\r\n            date_part(yyyy,last_day(V_DATE_1,'week'))||\r\n            date_part(mm,last_day(V_DATE_1,'week'))||\r\n            date_part(dd,last_day(V_DATE_1,'week')) end as WEEK_END_DATE_NKEY,\r\n      last_day(V_DATE_1,'week') as WEEK_END_DATE,\r\n      week(V_DATE_1) as WEEK_NUM_IN_YEAR,\r\n      case when monthname(V_DATE_1) ='Jan' then 'January'\r\n           when monthname(V_DATE_1) ='Feb' then 'February'\r\n           when monthname(V_DATE_1) ='Mar' then 'March'\r\n           when monthname(V_DATE_1) ='Apr' then 'April'\r\n           when monthname(V_DATE_1) ='May' then 'May'\r\n           when monthname(V_DATE_1) ='Jun' then 'June'\r\n           when monthname(V_DATE_1) ='Jul' then 'July'\r\n           when monthname(V_DATE_1) ='Aug' then 'August'\r\n           when monthname(V_DATE_1) ='Sep' then 'September'\r\n           when monthname(V_DATE_1) ='Oct' then 'October'\r\n           when monthname(V_DATE_1) ='Nov' then 'November'\r\n           when monthname(V_DATE_1) ='Dec' then 'December' end as MONTH_NAME,\r\n      monthname(V_DATE_1) as MONTH_ABBREV,\r\n      month(V_DATE_1) as MONTH_NUM_IN_YEAR,\r\n      case when month(V_DATE_1) < 10 then \r\n      year(V_DATE_1)||'-0'||month(V_DATE_1)   \r\n      else year(V_DATE_1)||'-'||month(V_DATE_1) end as YEARMONTH,\r\n      quarter(V_DATE_1) as CURRENT_QUARTER,\r\n      year(V_DATE_1)||'-0'||quarter(V_DATE_1) as YEARQUARTER,\r\n      year(V_DATE_1) as CURRENT_YEAR,\r\n      /*Modify the following based on company fiscal year - assumes Jan 01*/\r\n            to_date(year(V_DATE_1)||'-01-01','YYYY-MM-DD') as FISCAL_CUR_YEAR,\r\n            to_date(year(V_DATE_1) -1||'-01-01','YYYY-MM-DD') as FISCAL_PREV_YEAR,\r\n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\r\n      datediff('week', FISCAL_PREV_YEAR,V_DATE_1)\r\n      else \r\n      datediff('week', FISCAL_CUR_YEAR,V_DATE_1)  end as FISCAL_WEEK_NUM  ,\r\n      decode(datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ,-2,10,-1,11,0,12,\r\n                   datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ) as FISCAL_MONTH_NUM,\r\n      concat( year(FISCAL_CUR_YEAR) \r\n           ,case when to_number(FISCAL_MONTH_NUM) = 10 or \r\n              to_number(FISCAL_MONTH_NUM) = 11 or \r\n                            to_number(FISCAL_MONTH_NUM) = 12  then\r\n              '-'||FISCAL_MONTH_NUM\r\n          else  concat('-0',FISCAL_MONTH_NUM) end ) as FISCAL_YEARMONTH,\r\n      case when quarter(V_DATE_1) = 4 then 4\r\n         when quarter(V_DATE_1) = 3 then 3\r\n         when quarter(V_DATE_1) = 2 then 2\r\n         when quarter(V_DATE_1) = 1 then 1 end as FISCAL_QUARTER,\r\n      \r\n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\r\n          year(FISCAL_CUR_YEAR)\r\n          else year(FISCAL_CUR_YEAR)+1 end\r\n          ||'-0'||case when quarter(V_DATE_1) = 4 then 4\r\n           when quarter(V_DATE_1) = 3 then 3\r\n           when quarter(V_DATE_1) = 2 then 2\r\n           when quarter(V_DATE_1) = 1 then 1 end as FISCAL_YEARQUARTER,\r\n      case when quarter(V_DATE_1) = 4  then 2 when quarter(V_DATE_1) = 3 then 2\r\n        when quarter(V_DATE_1) = 1  then 1 when quarter(V_DATE_1) = 2 then 1\r\n      end as FISCAL_HALFYEAR,\r\n      year(FISCAL_CUR_YEAR) as FISCAL_YEAR,\r\n      to_timestamp_ntz(V_DATE) as SQL_TIMESTAMP,\r\n      'Y' as CURRENT_ROW_IND,\r\n      to_date(current_timestamp) as EFFECTIVE_DATE,\r\n      to_date('9999-12-31') as EXPIRA_DATE\r\n      from table(generator(rowcount => 8401)) /*<< Set to generate 20 years. Modify rowcount to increase or decrease size*/",
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "staging", "DATE", "V_DATE_STG"],
      "unique_id": "model.snowflake_usage.V_DATE_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/DATE/V_DATE_STG.sql",
      "original_file_path": "models/staging/DATE/V_DATE_STG.sql",
      "name": "V_DATE_STG",
      "alias": "V_DATE_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "0c1ec5b2ba332988df4242bba1d81a0d07ad1def6a6cfc8cabcd59021641af34"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/DATE/V_DATE_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\nSELECT \n     to_date('2015-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as DD, /*<<Modify date for preferred table start date*/\n      seq1() as Sl,row_number() over (order by Sl) as row_numbers,\n      dateadd(day,row_numbers,DD) as V_DATE,\n      case when date_part(dd, V_DATE) < 10 and date_part(mm, V_DATE) > 9 then\n        date_part(year, V_DATE)||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) < 10 and  date_part(mm, V_DATE) < 10 then \n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) < 10 then\n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) > 9 then\n         date_part(year, V_DATE)||date_part(mm, V_DATE)||date_part(dd, V_DATE) end as DATE_KEY,\n      V_DATE as DATE_COLUMN,\n      dayname(dateadd(day,row_numbers,DD)) as DAY_NAME_1,\n      case \n        when dayname(dateadd(day,row_numbers,DD)) = 'Mon' then 'Monday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Tue' then 'Tuesday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Wed' then 'Wednesday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Thu' then 'Thursday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Fri' then 'Friday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sat' then 'Saturday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sun' then 'Sunday' end ||', '||\n      case when monthname(dateadd(day,row_numbers,DD)) ='Jan' then 'January'\n           when monthname(dateadd(day,row_numbers,DD)) ='Feb' then 'February'\n           when monthname(dateadd(day,row_numbers,DD)) ='Mar' then 'March'\n           when monthname(dateadd(day,row_numbers,DD)) ='Apr' then 'April'\n           when monthname(dateadd(day,row_numbers,DD)) ='May' then 'May'\n           when monthname(dateadd(day,row_numbers,DD)) ='Jun' then 'June'\n           when monthname(dateadd(day,row_numbers,DD)) ='Jul' then 'July'\n           when monthname(dateadd(day,row_numbers,DD)) ='Aug' then 'August'\n           when monthname(dateadd(day,row_numbers,DD)) ='Sep' then 'September'\n           when monthname(dateadd(day,row_numbers,DD)) ='Oct' then 'October'\n           when monthname(dateadd(day,row_numbers,DD)) ='Nov' then 'November'\n           when monthname(dateadd(day,row_numbers,DD)) ='Dec' then 'December' end\n           ||' '|| to_varchar(dateadd(day,row_numbers,DD), ' dd, yyyy') as FULL_DATE_DESC,\n      dateadd(day,row_numbers,DD) as V_DATE_1,\n      dayofweek(V_DATE_1)+1 as DAY_NUM_IN_WEEK,\n      Date_part(dd,V_DATE_1) as DAY_NUM_IN_MONTH,\n      dayofyear(V_DATE_1) as DAY_NUM_IN_YEAR,\n      case \n        when dayname(V_DATE_1) = 'Mon' then 'Monday'\n        when dayname(V_DATE_1) = 'Tue' then 'Tuesday'\n        when dayname(V_DATE_1) = 'Wed' then 'Wednesday'\n        when dayname(V_DATE_1) = 'Thu' then 'Thursday'\n        when dayname(V_DATE_1) = 'Fri' then 'Friday'\n        when dayname(V_DATE_1) = 'Sat' then 'Saturday'\n        when dayname(V_DATE_1) = 'Sun' then 'Sunday' end as DAY_NAME,\n      dayname(dateadd(day,row_numbers,DD)) as DAY_ABBREV,\n      case  \n        when dayname(V_DATE_1) = 'Sun' and dayname(V_DATE_1) = 'Sat' then \n                 'Not-Weekday'\n        else 'Weekday' end as WEEKDAY_IND,\n       case \n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0704' or\n        DATE_KEY = date_part(year, V_DATE)||'1225' or DATE_KEY = date_part(year, V_DATE)||'1226') then  \n        'Holiday' \n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Wed' \n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Thu' \n        and dateadd(day,-3,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Fri' \n        and dateadd(day,-4,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sat' \n        and dateadd(day,-5,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sun' \n        and dateadd(day,-6,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Mon' \n        and last_day(V_DATE_1) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Tue' \n        and dateadd(day,-1 ,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n        and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n        and (dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  or \n           dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n        and ( dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n        and ( dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,20,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n         'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n        and ( dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n        and ( dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n        and (dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n        and (dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n         'Holiday'    \n        else\n        'Not-Holiday' end as US_HOLIDAY_IND,\n      /*Modify the following for Company Specific Holidays*/\n      case \n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0219'\n        or DATE_KEY = date_part(year, V_DATE)||'0528' or DATE_KEY = date_part(year, V_DATE)||'0704' \n        or DATE_KEY = date_part(year, V_DATE)||'1225' )then \n        'Holiday'               \n                when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Fri' \n        and last_day(V_DATE_1) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sat' \n        and dateadd(day,-1,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sun' \n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue'\n                and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu'\n                and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n        and date_part(year, V_DATE_1)||'-04-01' = V_DATE_1 then\n        'Holiday'\n                when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-04-01'= V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday'   \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n        and dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n        and dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n        and dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n         'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n        and dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n        and dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n        and dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n        and dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n         'Holiday'     \n        else\n        'Not-Holiday' end as COMPANY_HOLIDAY_IND,\n      case                                           \n        when last_day(V_DATE_1) = V_DATE_1 then \n        'Month-end'\n        else 'Not-Month-end' end as MONTH_END_IND,\n          \n      case when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n            date_part(mm,date_trunc('week',V_DATE_1))||'0'||\n            date_part(dd,date_trunc('week',V_DATE_1))  \n         when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n            date_part(mm,date_trunc('week',V_DATE_1))||date_part(dd,date_trunc('week',V_DATE_1))    \n         when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||date_part(mm,date_trunc('week',V_DATE_1))||\n            '0'||date_part(dd,date_trunc('week',V_DATE_1))    \n        when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||\n            date_part(mm,date_trunc('week',V_DATE_1))||\n            date_part(dd,date_trunc('week',V_DATE_1)) end as WEEK_BEGIN_DATE_NKEY,\n      date_trunc('week',V_DATE_1) as WEEK_BEGIN_DATE,\n\n      case when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) < 10 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n            date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n            date_part(dd,last_day(V_DATE_1,'week')) \n         when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n            date_part(mm,last_day(V_DATE_1,'week'))||date_part(dd,last_day(V_DATE_1,'week'))   \n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) < 10  then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n            date_part(dd,last_day(V_DATE_1,'week'))   \n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||\n            date_part(mm,last_day(V_DATE_1,'week'))||\n            date_part(dd,last_day(V_DATE_1,'week')) end as WEEK_END_DATE_NKEY,\n      last_day(V_DATE_1,'week') as WEEK_END_DATE,\n      week(V_DATE_1) as WEEK_NUM_IN_YEAR,\n      case when monthname(V_DATE_1) ='Jan' then 'January'\n           when monthname(V_DATE_1) ='Feb' then 'February'\n           when monthname(V_DATE_1) ='Mar' then 'March'\n           when monthname(V_DATE_1) ='Apr' then 'April'\n           when monthname(V_DATE_1) ='May' then 'May'\n           when monthname(V_DATE_1) ='Jun' then 'June'\n           when monthname(V_DATE_1) ='Jul' then 'July'\n           when monthname(V_DATE_1) ='Aug' then 'August'\n           when monthname(V_DATE_1) ='Sep' then 'September'\n           when monthname(V_DATE_1) ='Oct' then 'October'\n           when monthname(V_DATE_1) ='Nov' then 'November'\n           when monthname(V_DATE_1) ='Dec' then 'December' end as MONTH_NAME,\n      monthname(V_DATE_1) as MONTH_ABBREV,\n      month(V_DATE_1) as MONTH_NUM_IN_YEAR,\n      case when month(V_DATE_1) < 10 then \n      year(V_DATE_1)||'-0'||month(V_DATE_1)   \n      else year(V_DATE_1)||'-'||month(V_DATE_1) end as YEARMONTH,\n      quarter(V_DATE_1) as CURRENT_QUARTER,\n      year(V_DATE_1)||'-0'||quarter(V_DATE_1) as YEARQUARTER,\n      year(V_DATE_1) as CURRENT_YEAR,\n      /*Modify the following based on company fiscal year - assumes Jan 01*/\n            to_date(year(V_DATE_1)||'-01-01','YYYY-MM-DD') as FISCAL_CUR_YEAR,\n            to_date(year(V_DATE_1) -1||'-01-01','YYYY-MM-DD') as FISCAL_PREV_YEAR,\n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\n      datediff('week', FISCAL_PREV_YEAR,V_DATE_1)\n      else \n      datediff('week', FISCAL_CUR_YEAR,V_DATE_1)  end as FISCAL_WEEK_NUM  ,\n      decode(datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ,-2,10,-1,11,0,12,\n                   datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ) as FISCAL_MONTH_NUM,\n      concat( year(FISCAL_CUR_YEAR) \n           ,case when to_number(FISCAL_MONTH_NUM) = 10 or \n              to_number(FISCAL_MONTH_NUM) = 11 or \n                            to_number(FISCAL_MONTH_NUM) = 12  then\n              '-'||FISCAL_MONTH_NUM\n          else  concat('-0',FISCAL_MONTH_NUM) end ) as FISCAL_YEARMONTH,\n      case when quarter(V_DATE_1) = 4 then 4\n         when quarter(V_DATE_1) = 3 then 3\n         when quarter(V_DATE_1) = 2 then 2\n         when quarter(V_DATE_1) = 1 then 1 end as FISCAL_QUARTER,\n      \n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\n          year(FISCAL_CUR_YEAR)\n          else year(FISCAL_CUR_YEAR)+1 end\n          ||'-0'||case when quarter(V_DATE_1) = 4 then 4\n           when quarter(V_DATE_1) = 3 then 3\n           when quarter(V_DATE_1) = 2 then 2\n           when quarter(V_DATE_1) = 1 then 1 end as FISCAL_YEARQUARTER,\n      case when quarter(V_DATE_1) = 4  then 2 when quarter(V_DATE_1) = 3 then 2\n        when quarter(V_DATE_1) = 1  then 1 when quarter(V_DATE_1) = 2 then 1\n      end as FISCAL_HALFYEAR,\n      year(FISCAL_CUR_YEAR) as FISCAL_YEAR,\n      to_timestamp_ntz(V_DATE) as SQL_TIMESTAMP,\n      'Y' as CURRENT_ROW_IND,\n      to_date(current_timestamp) as EFFECTIVE_DATE,\n      to_date('9999-12-31') as EXPIRA_DATE\n      from table(generator(rowcount => 8401)) /*<< Set to generate 20 years. Modify rowcount to increase or decrease size*/",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DATE_STG"
    },
    "model.snowflake_usage.V_USERS_STG": {
      "raw_sql": "{{ config(\r\n    transient=false,\r\n    materialized= 'view',\r\n    schema= var('target_schema'),\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source(var('source_account_usage_schema'),'USERS')}}\r\n),\r\n\r\nrename as (\r\nSELECT\r\n--DLHK\r\n  MD5(S.NAME) AS K_USER_DLHK  \r\n  ,S.NAME AS A_USERNAME\r\n  ,S.BYPASS_MFA_UNTIL AS A_BYPASS_MFA_UNTIL\r\n  ,S.COMMENT AS A_COMMENT  \r\n  ,S.DEFAULT_NAMESPACE AS A_DEFAULT_NAMESPACE\r\n  ,S.DEFAULT_ROLE AS A_DEFAULT_ROLE\r\n  ,S.DEFAULT_WAREHOUSE AS A_DEFAULT_WAREHOUSE  \r\n  ,S.DISABLED AS A_DISABLED\r\n  ,S.DISPLAY_NAME AS A_DISPLAY_NAME\r\n  ,S.EMAIL AS A_EMAIL  \r\n  ,S.EXT_AUTHN_DUO AS A_EXT_AUTHN_DUO\r\n  ,S.FIRST_NAME AS A_FIRST_NAME\r\n  ,S.LAST_NAME AS A_LAST_NAME\r\n  ,S.LAST_SUCCESS_LOGIN AS A_LAST_SUCCESS_LOGIN\r\n  ,S.LOCKED_UNTIL_TIME AS A_LOCKED_UNTIL_TIME\r\n  ,S.LOGIN_NAME AS A_LOGIN_NAME  \r\n  ,S.PASSWORD_LAST_SET_TIME AS A_PASSWORD_LAST_SET_TIME\r\n  ,S.EXT_AUTHN_UID AS A_EXT_AUTHN_UID\r\n  ,S.EXPIRES_AT AS A_EXPIRES_AT_DTS\r\n  --BOOLEAN\r\n  ,S.HAS_PASSWORD AS B_HAS_PASSWORD\r\n  ,S.HAS_RSA_PUBLIC_KEY AS B_HAS_RSA_PUBLIC_KEY\r\n  ,S.MUST_CHANGE_PASSWORD AS B_MUST_CHANGE_PASSWORD\r\n  ,S.SNOWFLAKE_LOCK<>'FALSE' OR S.SNOWFLAKE_LOCK IS NULL AS B_SNOWFLAKE_LOCK\r\n  ,S.DISABLED<>'FALSE' OR S.DISABLED IS NULL AS B_DISABLED\r\n    --metadata (MD)\r\n  ,S.CREATED_ON AS MD_VALID_FROM_DTS\r\n  ,S.DELETED_ON AS MD_VALID_TO_DTS\r\n  ,S.DELETED_ON IS NOT NULL  AS MD_IS_DELETED\r\n  , CURRENT_TIMESTAMP AS MD_ELT_UPDATED_DTS        \r\n  , '{{invocation_id}}' AS MD_INTGR_ID\r\nFROM\r\n    source S\r\n)\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.snowflake_usage.ACCOUNT_USAGE.USERS"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "staging", "USERS", "V_USERS_STG"],
      "unique_id": "model.snowflake_usage.V_USERS_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/USERS/V_USERS_STG.sql",
      "original_file_path": "models/staging/USERS/V_USERS_STG.sql",
      "name": "V_USERS_STG",
      "alias": "V_USERS_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "9efc4832541101375900aeea4434caf2ea49df77364bccf929b8830e1e92bac3"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ACCOUNT_USAGE", "USERS"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/USERS/V_USERS_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "transient": false,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  SNOWFLAKE.ACCOUNT_USAGE.\"USERS\"\n),\n\nrename as (\nSELECT\n--DLHK\n  MD5(S.NAME) AS K_USER_DLHK  \n  ,S.NAME AS A_USERNAME\n  ,S.BYPASS_MFA_UNTIL AS A_BYPASS_MFA_UNTIL\n  ,S.COMMENT AS A_COMMENT  \n  ,S.DEFAULT_NAMESPACE AS A_DEFAULT_NAMESPACE\n  ,S.DEFAULT_ROLE AS A_DEFAULT_ROLE\n  ,S.DEFAULT_WAREHOUSE AS A_DEFAULT_WAREHOUSE  \n  ,S.DISABLED AS A_DISABLED\n  ,S.DISPLAY_NAME AS A_DISPLAY_NAME\n  ,S.EMAIL AS A_EMAIL  \n  ,S.EXT_AUTHN_DUO AS A_EXT_AUTHN_DUO\n  ,S.FIRST_NAME AS A_FIRST_NAME\n  ,S.LAST_NAME AS A_LAST_NAME\n  ,S.LAST_SUCCESS_LOGIN AS A_LAST_SUCCESS_LOGIN\n  ,S.LOCKED_UNTIL_TIME AS A_LOCKED_UNTIL_TIME\n  ,S.LOGIN_NAME AS A_LOGIN_NAME  \n  ,S.PASSWORD_LAST_SET_TIME AS A_PASSWORD_LAST_SET_TIME\n  ,S.EXT_AUTHN_UID AS A_EXT_AUTHN_UID\n  ,S.EXPIRES_AT AS A_EXPIRES_AT_DTS\n  --BOOLEAN\n  ,S.HAS_PASSWORD AS B_HAS_PASSWORD\n  ,S.HAS_RSA_PUBLIC_KEY AS B_HAS_RSA_PUBLIC_KEY\n  ,S.MUST_CHANGE_PASSWORD AS B_MUST_CHANGE_PASSWORD\n  ,S.SNOWFLAKE_LOCK<>'FALSE' OR S.SNOWFLAKE_LOCK IS NULL AS B_SNOWFLAKE_LOCK\n  ,S.DISABLED<>'FALSE' OR S.DISABLED IS NULL AS B_DISABLED\n    --metadata (MD)\n  ,S.CREATED_ON AS MD_VALID_FROM_DTS\n  ,S.DELETED_ON AS MD_VALID_TO_DTS\n  ,S.DELETED_ON IS NOT NULL  AS MD_IS_DELETED\n  , CURRENT_TIMESTAMP AS MD_ELT_UPDATED_DTS        \n  , '79796819-7a70-476a-ae92-10d57002c03c' AS MD_INTGR_ID\nFROM\n    source S\n)\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_USERS_STG"
    },
    "model.snowflake_usage.V_DAILY_RATE_SHEET_STG": {
      "raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source AS (\r\n  SELECT \r\n  * \r\n  FROM  \t\r\n    {{source(var('source_organization_usage_schema'),'RATE_SHEET_DAILY')}}\r\n),\r\nrename AS \r\n(   \r\n  SELECT \r\n  DATE AS A_DATE  \r\n  ,MD5(ACCOUNT_LOCATOR) AS K_ACCOUNT_DLHK  \r\n  ,ACCOUNT_LOCATOR AS K_ACCOUNT_BK\r\n  ,ACCOUNT_NAME AS A_ACCONT_NAME\r\n  ,CURRENCY AS A_CURRENCY  \r\n  ,ORGANIZATION_NAME AS A_ORGANIZATION_NAME\r\n  ,REGION AS A_REGION\r\n  ,SERVICE_LEVEL AS A_SERVICE_LEVEL\r\n  ,SERVICE_TYPE AS A_SERVICE_TYPE\r\n  ,USAGE_TYPE AS A_USAGE_TYPE\r\n  ,CONTRACT_NUMBER AS M_CONTRACT_NUMBER\r\n  ,EFFECTIVE_RATE AS M_EFFECTIVE_RATE\r\n  --//metadata (MD)  \r\n  ,CURRENT_TIMESTAMP as MD_ELT_UPDATED_DTS\r\n  ,'{{invocation_id}}' AS MD_INTGR_ID\r\n\r\n  FROM\r\n    source S\r\n)\r\n\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.snowflake_usage.ORGANIZATION_USAGE.RATE_SHEET_DAILY"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": [
        "snowflake_usage",
        "staging",
        "DAILY_RATE",
        "V_DAILY_RATE_SHEET_STG"
      ],
      "unique_id": "model.snowflake_usage.V_DAILY_RATE_SHEET_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/DAILY_RATE/V_DAILY_RATE_SHEET_STG.sql",
      "original_file_path": "models/staging/DAILY_RATE/V_DAILY_RATE_SHEET_STG.sql",
      "name": "V_DAILY_RATE_SHEET_STG",
      "alias": "V_DAILY_RATE_SHEET_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "adf3c1d01a44b2ea94cdba51523b0871e43541b37b1d8b8f8e1ebcaefc7889ea"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ORGANIZATION_USAGE", "RATE_SHEET_DAILY"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/DAILY_RATE/V_DAILY_RATE_SHEET_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    SNOWFLAKE.ORGANIZATION_USAGE.\"RATE_SHEET_DAILY\"\n),\nrename AS \n(   \n  SELECT \n  DATE AS A_DATE  \n  ,MD5(ACCOUNT_LOCATOR) AS K_ACCOUNT_DLHK  \n  ,ACCOUNT_LOCATOR AS K_ACCOUNT_BK\n  ,ACCOUNT_NAME AS A_ACCONT_NAME\n  ,CURRENCY AS A_CURRENCY  \n  ,ORGANIZATION_NAME AS A_ORGANIZATION_NAME\n  ,REGION AS A_REGION\n  ,SERVICE_LEVEL AS A_SERVICE_LEVEL\n  ,SERVICE_TYPE AS A_SERVICE_TYPE\n  ,USAGE_TYPE AS A_USAGE_TYPE\n  ,CONTRACT_NUMBER AS M_CONTRACT_NUMBER\n  ,EFFECTIVE_RATE AS M_EFFECTIVE_RATE\n  --//metadata (MD)  \n  ,CURRENT_TIMESTAMP as MD_ELT_UPDATED_DTS\n  ,'79796819-7a70-476a-ae92-10d57002c03c' AS MD_INTGR_ID\n\n  FROM\n    source S\n)\n\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DAILY_RATE_SHEET_STG"
    },
    "model.snowflake_usage.V_COLUMNS_STG": {
      "raw_sql": "{{ config(\r\n    transient=false,\r\n    materialized= 'view',\r\n    schema= var('target_schema'),\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source(var('source_account_usage_schema'),'COLUMNS')}}\r\n),\r\n\r\nrename as (\r\nSELECT\r\n--DLHK\r\n  MD5(S.COLUMN_ID) AS K_COLUMN_DLHK\r\n  ,MD5(S.TABLE_ID) AS K_TABLE_DLHK\r\n  ,MD5(S.TABLE_CATALOG_ID) AS K_DATABASE_DLHK\r\n  ,MD5(CONCAT(COALESCE(S.TABLE_NAME,'A'),COALESCE(S.TABLE_SCHEMA_ID,0),COALESCE(S.TABLE_CATALOG_ID,0))) AS K_UNIQUE_TABLE_DLHK\r\n--BUSINESS KEYS\r\n  ,S.COLUMN_ID AS K_COLUMN_BK\r\n  ,S.TABLE_ID AS K_TABLE_BK\r\n  ,S.TABLE_CATALOG_ID AS K_DATABASE_BK\r\n  ,S.TABLE_SCHEMA_ID AS K_TABLE_SCHEMA_BK\r\n  --ATTRIBUTES  \r\n  ,S.CHARACTER_SET_CATALOG AS A_CHARACTER_SET_CATALOG\r\n  ,S.CHARACTER_SET_NAME AS A_CHARACTER_SET_NAME\r\n  ,S.CHARACTER_SET_SCHEMA AS A_CHARACTER_SET_SCHEMA\r\n  ,S.COLLATION_CATALOG AS A_COLLATION_CATALOG\r\n  ,S.COLLATION_NAME AS A_COLLATION_NAME\r\n  ,S.COLLATION_SCHEMA AS A_COLLATION_SCHEMA\r\n  ,S.COLUMN_DEFAULT AS A_COLUMN_DEFAULT\r\n  ,S.COLUMN_NAME AS A_COLUMN_NAME\r\n  ,S.COMMENT AS A_COMMENT\r\n  ,S.DATA_TYPE AS A_DATA_TYPE\r\n  ,S.DELETED AS A_DELETED\r\n  ,S.DOMAIN_CATALOG AS A_DOMAIN_CATALOG\r\n  ,S.DOMAIN_NAME AS A_DOMAIN_NAME\r\n  ,S.DOMAIN_SCHEMA AS A_DOMAIN_SCHEMA\r\n  ,S.INTERVAL_PRECISION AS A_INTERVAL_PRECISION\r\n  ,S.INTERVAL_TYPE AS A_INTERVAL_TYPE\r\n  ,S.MAXIMUM_CARDINALITY AS A_MAXIMUM_CARDINALITY\r\n  ,S.SCOPE_CATALOG AS A_SCOPE_CATALOG\r\n  ,S.SCOPE_NAME AS A_SCOPE_NAME\r\n  ,S.SCOPE_SCHEMA AS A_SCOPE_SCHEMA\r\n  ,S.TABLE_CATALOG AS A_TABLE_CATALOG\r\n  ,S.TABLE_NAME AS A_TABLE_NAME\r\n  ,S.TABLE_SCHEMA AS A_TABLE_SCHEMA\r\n  ,S.UDT_CATALOG AS A_UDT_CATALOG\r\n  ,S.UDT_NAME AS A_UDT_NAME\r\n  ,S.UDT_SCHEMA AS A_UDT_SCHEMA\r\n  ,S.DTD_IDENTIFIER AS A_DTD_BKENTIFIER\r\n  ,S.IDENTITY_CYCLE AS A_IDENTITY_CYCLE\r\n  ,S.IDENTITY_GENERATION AS A_IDENTITY_GENERATION\r\n  ,S.IDENTITY_INCREMENT AS A_IDENTITY_INCREMENT\r\n  ,S.IDENTITY_MAXIMUM AS A_IDENTITY_MAXIMUM\r\n  ,S.IDENTITY_MINIMUM AS A_IDENTITY_MINIMUM\r\n  ,S.IDENTITY_START AS A_IDENTITY_START\r\n  --BOOLEAN\r\n  ,S.IS_IDENTITY='YES' AS B_IS_BKENTITY\r\n  ,S.IS_NULLABLE='YES' AS A_IS_NULLABLE\r\n  ,S.IS_SELF_REFERENCING='YES' AS A_IS_SELF_REFERENCING\r\n  --METRICS\r\n  ,S.CHARACTER_MAXIMUM_LENGTH AS M_CHARACTER_MAXIMUM_LENGTH\r\n  ,S.CHARACTER_OCTET_LENGTH AS M_CHARACTER_OCTET_LENGTH\r\n  ,S.DATETIME_PRECISION AS M_DATETIME_PRECISION\r\n  ,S.NUMERIC_PRECISION AS M_NUMERIC_PRECISION\r\n  ,S.NUMERIC_PRECISION_RADIX AS M_NUMERIC_PRECISION_RADIX\r\n  ,S.NUMERIC_SCALE AS M_NUMERIC_SCALE\r\n  ,S.ORDINAL_POSITION AS M_ORDINAL_POSITION\r\n    --metadata (MD)  \r\n  ,S.DELETED AS MD_VALID_TO_DTS\r\n  ,S.DELETED IS NOT NULL AS MD_IS_DELETED\r\n  , CURRENT_TIMESTAMP AS MD_ELT_UPDATED_DTS        \r\n  , '{{invocation_id}}' AS MD_INTGR_ID\r\nFROM\r\n    source S\r\n)\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.snowflake_usage.ACCOUNT_USAGE.COLUMNS"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "staging", "COLUMNS", "V_COLUMNS_STG"],
      "unique_id": "model.snowflake_usage.V_COLUMNS_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/COLUMNS/V_COLUMNS_STG.sql",
      "original_file_path": "models/staging/COLUMNS/V_COLUMNS_STG.sql",
      "name": "V_COLUMNS_STG",
      "alias": "V_COLUMNS_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "0b4b9d29b6d42535127a1ed3f35c5ab7e1bf7ac698d7c7c197be2b36c4a9d934"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ACCOUNT_USAGE", "COLUMNS"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/COLUMNS/V_COLUMNS_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "transient": false,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  SNOWFLAKE.ACCOUNT_USAGE.\"COLUMNS\"\n),\n\nrename as (\nSELECT\n--DLHK\n  MD5(S.COLUMN_ID) AS K_COLUMN_DLHK\n  ,MD5(S.TABLE_ID) AS K_TABLE_DLHK\n  ,MD5(S.TABLE_CATALOG_ID) AS K_DATABASE_DLHK\n  ,MD5(CONCAT(COALESCE(S.TABLE_NAME,'A'),COALESCE(S.TABLE_SCHEMA_ID,0),COALESCE(S.TABLE_CATALOG_ID,0))) AS K_UNIQUE_TABLE_DLHK\n--BUSINESS KEYS\n  ,S.COLUMN_ID AS K_COLUMN_BK\n  ,S.TABLE_ID AS K_TABLE_BK\n  ,S.TABLE_CATALOG_ID AS K_DATABASE_BK\n  ,S.TABLE_SCHEMA_ID AS K_TABLE_SCHEMA_BK\n  --ATTRIBUTES  \n  ,S.CHARACTER_SET_CATALOG AS A_CHARACTER_SET_CATALOG\n  ,S.CHARACTER_SET_NAME AS A_CHARACTER_SET_NAME\n  ,S.CHARACTER_SET_SCHEMA AS A_CHARACTER_SET_SCHEMA\n  ,S.COLLATION_CATALOG AS A_COLLATION_CATALOG\n  ,S.COLLATION_NAME AS A_COLLATION_NAME\n  ,S.COLLATION_SCHEMA AS A_COLLATION_SCHEMA\n  ,S.COLUMN_DEFAULT AS A_COLUMN_DEFAULT\n  ,S.COLUMN_NAME AS A_COLUMN_NAME\n  ,S.COMMENT AS A_COMMENT\n  ,S.DATA_TYPE AS A_DATA_TYPE\n  ,S.DELETED AS A_DELETED\n  ,S.DOMAIN_CATALOG AS A_DOMAIN_CATALOG\n  ,S.DOMAIN_NAME AS A_DOMAIN_NAME\n  ,S.DOMAIN_SCHEMA AS A_DOMAIN_SCHEMA\n  ,S.INTERVAL_PRECISION AS A_INTERVAL_PRECISION\n  ,S.INTERVAL_TYPE AS A_INTERVAL_TYPE\n  ,S.MAXIMUM_CARDINALITY AS A_MAXIMUM_CARDINALITY\n  ,S.SCOPE_CATALOG AS A_SCOPE_CATALOG\n  ,S.SCOPE_NAME AS A_SCOPE_NAME\n  ,S.SCOPE_SCHEMA AS A_SCOPE_SCHEMA\n  ,S.TABLE_CATALOG AS A_TABLE_CATALOG\n  ,S.TABLE_NAME AS A_TABLE_NAME\n  ,S.TABLE_SCHEMA AS A_TABLE_SCHEMA\n  ,S.UDT_CATALOG AS A_UDT_CATALOG\n  ,S.UDT_NAME AS A_UDT_NAME\n  ,S.UDT_SCHEMA AS A_UDT_SCHEMA\n  ,S.DTD_IDENTIFIER AS A_DTD_BKENTIFIER\n  ,S.IDENTITY_CYCLE AS A_IDENTITY_CYCLE\n  ,S.IDENTITY_GENERATION AS A_IDENTITY_GENERATION\n  ,S.IDENTITY_INCREMENT AS A_IDENTITY_INCREMENT\n  ,S.IDENTITY_MAXIMUM AS A_IDENTITY_MAXIMUM\n  ,S.IDENTITY_MINIMUM AS A_IDENTITY_MINIMUM\n  ,S.IDENTITY_START AS A_IDENTITY_START\n  --BOOLEAN\n  ,S.IS_IDENTITY='YES' AS B_IS_BKENTITY\n  ,S.IS_NULLABLE='YES' AS A_IS_NULLABLE\n  ,S.IS_SELF_REFERENCING='YES' AS A_IS_SELF_REFERENCING\n  --METRICS\n  ,S.CHARACTER_MAXIMUM_LENGTH AS M_CHARACTER_MAXIMUM_LENGTH\n  ,S.CHARACTER_OCTET_LENGTH AS M_CHARACTER_OCTET_LENGTH\n  ,S.DATETIME_PRECISION AS M_DATETIME_PRECISION\n  ,S.NUMERIC_PRECISION AS M_NUMERIC_PRECISION\n  ,S.NUMERIC_PRECISION_RADIX AS M_NUMERIC_PRECISION_RADIX\n  ,S.NUMERIC_SCALE AS M_NUMERIC_SCALE\n  ,S.ORDINAL_POSITION AS M_ORDINAL_POSITION\n    --metadata (MD)  \n  ,S.DELETED AS MD_VALID_TO_DTS\n  ,S.DELETED IS NOT NULL AS MD_IS_DELETED\n  , CURRENT_TIMESTAMP AS MD_ELT_UPDATED_DTS        \n  , '79796819-7a70-476a-ae92-10d57002c03c' AS MD_INTGR_ID\nFROM\n    source S\n)\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_COLUMNS_STG"
    },
    "model.snowflake_usage.V_WAREHOUSE_STG": {
      "raw_sql": "{{ config(\r\n    transient=false,\r\n    materialized= 'view',\r\n    schema= var('target_schema'),\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source(var('source_account_usage_schema'),'QUERY_HISTORY')}}\r\n),\r\nrename as (\r\n  SELECT DISTINCT \r\n  MD5(S.WAREHOUSE_ID) AS K_WAREHOUSE_DLHK \r\n  ,S.WAREHOUSE_ID AS K_WAREHOUSE_BK  \r\n  ,S.WAREHOUSE_NAME AS A_WAREHOUSE_NAME  \r\nFROM \r\n  source S\r\nWHERE \r\n  S.WAREHOUSE_ID IS NOT NULL\r\n     \r\n)\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "staging", "WAREHOUSE", "V_WAREHOUSE_STG"],
      "unique_id": "model.snowflake_usage.V_WAREHOUSE_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/WAREHOUSE/V_WAREHOUSE_STG.sql",
      "original_file_path": "models/staging/WAREHOUSE/V_WAREHOUSE_STG.sql",
      "name": "V_WAREHOUSE_STG",
      "alias": "V_WAREHOUSE_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "ab12c229a563d221cdfed71721ece6fa69e59849201437d9184dfb2bf840e9cf"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ACCOUNT_USAGE", "QUERY_HISTORY"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/WAREHOUSE/V_WAREHOUSE_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "transient": false,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  SNOWFLAKE.ACCOUNT_USAGE.\"QUERY_HISTORY\"\n),\nrename as (\n  SELECT DISTINCT \n  MD5(S.WAREHOUSE_ID) AS K_WAREHOUSE_DLHK \n  ,S.WAREHOUSE_ID AS K_WAREHOUSE_BK  \n  ,S.WAREHOUSE_NAME AS A_WAREHOUSE_NAME  \nFROM \n  source S\nWHERE \n  S.WAREHOUSE_ID IS NOT NULL\n     \n)\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_WAREHOUSE_STG"
    },
    "model.snowflake_usage.V_WAREHOUSE_USAGE_STG": {
      "raw_sql": "{{ config(\r\n    transient=false,\r\n    materialized= 'view',\r\n    schema= var('target_schema'),\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source(var('source_account_usage_schema'),'WAREHOUSE_METERING_HISTORY')}}\r\n),\r\nrename as (\r\n   SELECT \r\n  MD5(WAREHOUSE_ID) AS K_WAREHOUSE_DLHK\r\n  ,WAREHOUSE_ID AS K_WAREHOUSE_BK\r\n  ,START_TIME AS A_START_TIME\r\n  ,END_TIME AS A_END_TIME\r\n  ,WAREHOUSE_NAME AS A_WAREHOUSE_NAME  \r\n  ,CREDITS_USED AS M_CREDITS_USED\r\n  ,CREDITS_USED_CLOUD_SERVICES AS M_CREDITS_USED_CLOUD_SERVICES\r\n  ,CREDITS_USED_COMPUTE AS M_CREDITS_USED_COMPUTE  \r\nFROM source S    \r\n)\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "source.snowflake_usage.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": [
        "snowflake_usage",
        "staging",
        "WAREHOUSE_USAGE",
        "V_WAREHOUSE_USAGE_STG"
      ],
      "unique_id": "model.snowflake_usage.V_WAREHOUSE_USAGE_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/WAREHOUSE_USAGE/V_WAREHOUSE_USAGE_STG.sql",
      "original_file_path": "models/staging/WAREHOUSE_USAGE/V_WAREHOUSE_USAGE_STG.sql",
      "name": "V_WAREHOUSE_USAGE_STG",
      "alias": "V_WAREHOUSE_USAGE_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "de92a8af7a3d9d8a77e1f9510cc7c59970d92f740b626bd82e4f407d40d1103d"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ACCOUNT_USAGE", "WAREHOUSE_METERING_HISTORY"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/WAREHOUSE_USAGE/V_WAREHOUSE_USAGE_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "transient": false,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  SNOWFLAKE.ACCOUNT_USAGE.\"WAREHOUSE_METERING_HISTORY\"\n),\nrename as (\n   SELECT \n  MD5(WAREHOUSE_ID) AS K_WAREHOUSE_DLHK\n  ,WAREHOUSE_ID AS K_WAREHOUSE_BK\n  ,START_TIME AS A_START_TIME\n  ,END_TIME AS A_END_TIME\n  ,WAREHOUSE_NAME AS A_WAREHOUSE_NAME  \n  ,CREDITS_USED AS M_CREDITS_USED\n  ,CREDITS_USED_CLOUD_SERVICES AS M_CREDITS_USED_CLOUD_SERVICES\n  ,CREDITS_USED_COMPUTE AS M_CREDITS_USED_COMPUTE  \nFROM source S    \n)\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_WAREHOUSE_USAGE_STG"
    },
    "model.snowflake_usage.V_QUERY_HISTORY_STG": {
      "raw_sql": "{{ config(\r\n    transient=false,\r\n    materialized= 'view',\r\n    schema= var('target_schema'),\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source(var('source_account_usage_schema'),'QUERY_HISTORY')}}\r\n),\r\nrename as (\r\n   SELECT \r\n  MD5(S.QUERY_ID) AS K_QUERY_DLHK\r\n  ,MD5(S.DATABASE_ID) AS K_DATABASE_DLHK  \r\n  ,MD5(S.WAREHOUSE_ID) AS K_WAREHOUSE_DLHK\r\n  ,MD5(S.USER_NAME) AS K_USER_DLHK\r\n  ,S.DATABASE_ID AS K_DATABASE_BK\r\n  ,S.QUERY_ID AS K_QUERY_BK\r\n  ,S.SCHEMA_ID AS K_SCHEMA_BK\r\n  ,S.SESSION_ID AS K_SESSION_BK\r\n  ,S.WAREHOUSE_ID AS K_WAREHOUSE_BK\r\n  ,S.USER_NAME AS A_USERNAME\r\n  ,S.START_TIME AS A_START_TIME\r\n  ,S.END_TIME AS A_END_TIME\r\n  ,S.ERROR_CODE AS A_ERROR_CODE\r\n  ,S.ERROR_MESSAGE AS A_ERROR_MESSAGE\r\n  ,S.EXECUTION_STATUS AS A_EXECUTION_STATUS\r\n  ,S.QUERY_TAG AS A_QUERY_TAG\r\n  ,S.QUERY_TEXT AS A_QUERY_TEXT\r\n  ,S.QUERY_TYPE AS A_QUERY_TYPE\r\n  ,S.RELEASE_VERSION AS A_RELEASE_VERSION\r\n  ,S.ROLE_NAME AS A_ROLE_NAME\r\n  ,S.SCHEMA_NAME AS A_SCHEMA_NAME\r\n  ,S.CLUSTER_NUMBER AS A_CLUSTER_NUMBER  \r\n  ,S.IS_CLIENT_GENERATED_STATEMENT='TRUE' AS B_IS_CLIENT_GENERATED_STATEMENT\r\n  ,S.INBOUND_DATA_TRANSFER_CLOUD AS A_INBOUND_DATA_TRANSFER_CLOUD\r\n  ,S.INBOUND_DATA_TRANSFER_REGION AS A_INBOUND_DATA_TRANSFER_REGION\r\n  ,S.OUTBOUND_DATA_TRANSFER_CLOUD AS A_OUTBOUND_DATA_TRANSFER_CLOUD\r\n  ,S.OUTBOUND_DATA_TRANSFER_REGION AS A_OUTBOUND_DATA_TRANSFER_REGION\r\n  ,S.BYTES_DELETED AS M_BYTES_DELETED\r\n  ,S.BYTES_READ_FROM_RESULT AS M_BYTES_READ_FROM_RESULT\r\n  ,S.BYTES_SCANNED AS M_BYTES_SCANNED\r\n  ,S.BYTES_SENT_OVER_THE_NETWORK AS M_BYTES_SENT_OVER_THE_NETWORK\r\n  ,S.BYTES_SPILLED_TO_LOCAL_STORAGE AS M_BYTES_SPILLED_TO_LOCAL_STORAGE\r\n  ,S.BYTES_SPILLED_TO_REMOTE_STORAGE AS M_BYTES_SPILLED_TO_REMOTE_STORAGE\r\n  ,S.BYTES_WRITTEN AS M_BYTES_WRITTEN\r\n  ,S.BYTES_WRITTEN_TO_RESULT AS M_BYTES_WRITTEN_TO_RESULT  \r\n  ,S.COMPILATION_TIME AS M_COMPILATION_TIME\r\n  ,S.COMPILATION_TIME/1000 AS M_COMPILATION_TIME_SECONDS\r\n  ,S.CREDITS_USED_CLOUD_SERVICES::numeric(15,6) AS M_CREDITS_USED_CLOUD_SERVICES\r\n  ,S.EXECUTION_TIME AS M_EXECUTION_TIME\r\n  ,S.EXECUTION_TIME/1000 AS M_EXECUTION_TIME_SECONDS\r\n  ,S.EXTERNAL_FUNCTION_TOTAL_INVOCATIONS AS M_EXTERNAL_FUNCTION_TOTAL_INVOCATIONS\r\n  ,S.EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES AS M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES\r\n  ,S.EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS AS M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS\r\n  ,S.EXTERNAL_FUNCTION_TOTAL_SENT_BYTES AS M_EXTERNAL_FUNCTION_TOTAL_SENT_BYTES\r\n  ,S.EXTERNAL_FUNCTION_TOTAL_SENT_ROWS AS M_EXTERNAL_FUNCTION_TOTAL_SENT_ROWS\r\n  ,S.INBOUND_DATA_TRANSFER_BYTES AS M_INBOUND_DATA_TRANSFER_BYTES\r\n  ,S.LIST_EXTERNAL_FILES_TIME AS M_LIST_EXTERNAL_FILES_TIME\r\n  ,S.OUTBOUND_DATA_TRANSFER_BYTES AS M_OUTBOUND_DATA_TRANSFER_BYTES\r\n  ,S.PARTITIONS_SCANNED AS M_PARTITIONS_SCANNED\r\n  ,S.PARTITIONS_TOTAL AS M_PARTITIONS_TOTAL\r\n  ,S.PERCENTAGE_SCANNED_FROM_CACHE AS M_PERCENTAGE_SCANNED_FROM_CACHE\r\n  ,S.QUERY_LOAD_PERCENT AS M_QUERY_LOAD_PERCENT\r\n  ,S.QUEUED_OVERLOAD_TIME AS M_QUEUED_OVERLOAD_TIME\r\n  ,S.QUEUED_OVERLOAD_TIME/1000 AS M_QUEUED_OVERLOAD_TIME_SECONDS\r\n  ,S.QUEUED_PROVISIONING_TIME AS M_QUEUED_PROVISIONING_TIME\r\n  ,S.QUEUED_PROVISIONING_TIME/1000 AS M_QUEUED_PROVISIONING_TIME_SECONDS\r\n  ,S.QUEUED_REPAIR_TIME/1000 AS M_QUEUED_REPAIR_TIME_SECONDS\r\n  ,S.ROWS_DELETED AS M_ROWS_DELETED\r\n  ,S.ROWS_INSERTED AS M_ROWS_INSERTED\r\n  ,S.ROWS_PRODUCED AS M_ROWS_PRODUCED\r\n  ,S.ROWS_UNLOADED AS M_ROWS_UNLOADED\r\n  ,S.ROWS_UPDATED AS M_ROWS_UPDATED\r\n  ,S.TOTAL_ELAPSED_TIME AS M_TOTAL_ELAPSED_TIME\r\n  ,S.TOTAL_ELAPSED_TIME/1000 AS M_TOTAL_ELAPSED_TIME_SECONDS\r\n  ,S.TRANSACTION_BLOCKED_TIME AS M_TRANSACTION_BLOCKED_TIME \r\n  ,S.TRANSACTION_BLOCKED_TIME/1000 AS M_TRANSACTION_BLOCKED_TIME_SECONDS\r\nFROM source S\r\n     \r\n)\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": [
        "snowflake_usage",
        "staging",
        "QUERY_HISTORY",
        "V_QUERY_HISTORY_STG"
      ],
      "unique_id": "model.snowflake_usage.V_QUERY_HISTORY_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/QUERY_HISTORY/V_QUERY_HISTORY_STG.sql",
      "original_file_path": "models/staging/QUERY_HISTORY/V_QUERY_HISTORY_STG.sql",
      "name": "V_QUERY_HISTORY_STG",
      "alias": "V_QUERY_HISTORY_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "4c6081a5919925be896e1fc607410b92b51db94c03c0c062f9071ac0ce41066d"
      },
      "tags": ["staging", "daily"],
      "refs": [],
      "sources": [["ACCOUNT_USAGE", "QUERY_HISTORY"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/QUERY_HISTORY/V_QUERY_HISTORY_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "transient": false,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  SNOWFLAKE.ACCOUNT_USAGE.\"QUERY_HISTORY\"\n),\nrename as (\n   SELECT \n  MD5(S.QUERY_ID) AS K_QUERY_DLHK\n  ,MD5(S.DATABASE_ID) AS K_DATABASE_DLHK  \n  ,MD5(S.WAREHOUSE_ID) AS K_WAREHOUSE_DLHK\n  ,MD5(S.USER_NAME) AS K_USER_DLHK\n  ,S.DATABASE_ID AS K_DATABASE_BK\n  ,S.QUERY_ID AS K_QUERY_BK\n  ,S.SCHEMA_ID AS K_SCHEMA_BK\n  ,S.SESSION_ID AS K_SESSION_BK\n  ,S.WAREHOUSE_ID AS K_WAREHOUSE_BK\n  ,S.USER_NAME AS A_USERNAME\n  ,S.START_TIME AS A_START_TIME\n  ,S.END_TIME AS A_END_TIME\n  ,S.ERROR_CODE AS A_ERROR_CODE\n  ,S.ERROR_MESSAGE AS A_ERROR_MESSAGE\n  ,S.EXECUTION_STATUS AS A_EXECUTION_STATUS\n  ,S.QUERY_TAG AS A_QUERY_TAG\n  ,S.QUERY_TEXT AS A_QUERY_TEXT\n  ,S.QUERY_TYPE AS A_QUERY_TYPE\n  ,S.RELEASE_VERSION AS A_RELEASE_VERSION\n  ,S.ROLE_NAME AS A_ROLE_NAME\n  ,S.SCHEMA_NAME AS A_SCHEMA_NAME\n  ,S.CLUSTER_NUMBER AS A_CLUSTER_NUMBER  \n  ,S.IS_CLIENT_GENERATED_STATEMENT='TRUE' AS B_IS_CLIENT_GENERATED_STATEMENT\n  ,S.INBOUND_DATA_TRANSFER_CLOUD AS A_INBOUND_DATA_TRANSFER_CLOUD\n  ,S.INBOUND_DATA_TRANSFER_REGION AS A_INBOUND_DATA_TRANSFER_REGION\n  ,S.OUTBOUND_DATA_TRANSFER_CLOUD AS A_OUTBOUND_DATA_TRANSFER_CLOUD\n  ,S.OUTBOUND_DATA_TRANSFER_REGION AS A_OUTBOUND_DATA_TRANSFER_REGION\n  ,S.BYTES_DELETED AS M_BYTES_DELETED\n  ,S.BYTES_READ_FROM_RESULT AS M_BYTES_READ_FROM_RESULT\n  ,S.BYTES_SCANNED AS M_BYTES_SCANNED\n  ,S.BYTES_SENT_OVER_THE_NETWORK AS M_BYTES_SENT_OVER_THE_NETWORK\n  ,S.BYTES_SPILLED_TO_LOCAL_STORAGE AS M_BYTES_SPILLED_TO_LOCAL_STORAGE\n  ,S.BYTES_SPILLED_TO_REMOTE_STORAGE AS M_BYTES_SPILLED_TO_REMOTE_STORAGE\n  ,S.BYTES_WRITTEN AS M_BYTES_WRITTEN\n  ,S.BYTES_WRITTEN_TO_RESULT AS M_BYTES_WRITTEN_TO_RESULT  \n  ,S.COMPILATION_TIME AS M_COMPILATION_TIME\n  ,S.COMPILATION_TIME/1000 AS M_COMPILATION_TIME_SECONDS\n  ,S.CREDITS_USED_CLOUD_SERVICES::numeric(15,6) AS M_CREDITS_USED_CLOUD_SERVICES\n  ,S.EXECUTION_TIME AS M_EXECUTION_TIME\n  ,S.EXECUTION_TIME/1000 AS M_EXECUTION_TIME_SECONDS\n  ,S.EXTERNAL_FUNCTION_TOTAL_INVOCATIONS AS M_EXTERNAL_FUNCTION_TOTAL_INVOCATIONS\n  ,S.EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES AS M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES\n  ,S.EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS AS M_EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS\n  ,S.EXTERNAL_FUNCTION_TOTAL_SENT_BYTES AS M_EXTERNAL_FUNCTION_TOTAL_SENT_BYTES\n  ,S.EXTERNAL_FUNCTION_TOTAL_SENT_ROWS AS M_EXTERNAL_FUNCTION_TOTAL_SENT_ROWS\n  ,S.INBOUND_DATA_TRANSFER_BYTES AS M_INBOUND_DATA_TRANSFER_BYTES\n  ,S.LIST_EXTERNAL_FILES_TIME AS M_LIST_EXTERNAL_FILES_TIME\n  ,S.OUTBOUND_DATA_TRANSFER_BYTES AS M_OUTBOUND_DATA_TRANSFER_BYTES\n  ,S.PARTITIONS_SCANNED AS M_PARTITIONS_SCANNED\n  ,S.PARTITIONS_TOTAL AS M_PARTITIONS_TOTAL\n  ,S.PERCENTAGE_SCANNED_FROM_CACHE AS M_PERCENTAGE_SCANNED_FROM_CACHE\n  ,S.QUERY_LOAD_PERCENT AS M_QUERY_LOAD_PERCENT\n  ,S.QUEUED_OVERLOAD_TIME AS M_QUEUED_OVERLOAD_TIME\n  ,S.QUEUED_OVERLOAD_TIME/1000 AS M_QUEUED_OVERLOAD_TIME_SECONDS\n  ,S.QUEUED_PROVISIONING_TIME AS M_QUEUED_PROVISIONING_TIME\n  ,S.QUEUED_PROVISIONING_TIME/1000 AS M_QUEUED_PROVISIONING_TIME_SECONDS\n  ,S.QUEUED_REPAIR_TIME/1000 AS M_QUEUED_REPAIR_TIME_SECONDS\n  ,S.ROWS_DELETED AS M_ROWS_DELETED\n  ,S.ROWS_INSERTED AS M_ROWS_INSERTED\n  ,S.ROWS_PRODUCED AS M_ROWS_PRODUCED\n  ,S.ROWS_UNLOADED AS M_ROWS_UNLOADED\n  ,S.ROWS_UPDATED AS M_ROWS_UPDATED\n  ,S.TOTAL_ELAPSED_TIME AS M_TOTAL_ELAPSED_TIME\n  ,S.TOTAL_ELAPSED_TIME/1000 AS M_TOTAL_ELAPSED_TIME_SECONDS\n  ,S.TRANSACTION_BLOCKED_TIME AS M_TRANSACTION_BLOCKED_TIME \n  ,S.TRANSACTION_BLOCKED_TIME/1000 AS M_TRANSACTION_BLOCKED_TIME_SECONDS\nFROM source S\n     \n)\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_QUERY_HISTORY_STG"
    },
    "model.snowflake_usage.V_ACCESS_HISTORY_STG": {
      "raw_sql": "{{ config(\r\n    transient=false,\r\n    materialized= 'view',\r\n    schema= var('target_schema'),\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source(var('source_account_usage_schema'),'ACCESS_HISTORY')}}\r\n),\r\ntables AS (\r\n  SELECT * FROM  {{ref('W_TABLES_D')}}\r\n),\r\n\r\nrename as (\r\n   SELECT \r\n      S.query_id AS K_QUERY_BK\r\n     ,MD5(S.user_name) AS K_USER_DLHK\r\n     ,tables.K_UNIQUE_TABLE_DLHK\r\n     ,tables.K_TABLE_DLHK\r\n     ,base.value:objectId::string AS K_TABLE_BK\r\n     ,S.user_name A_USERNAME\r\n     ,S.query_start_time AS A_START_TIME_DTS\r\n     ,split(base.value:objectName, '.')[0]::string AS A_DATABASE_NAME\r\n     ,split(base.value:objectName, '.')[1]::string AS A_SCHEMA_NAME\r\n     ,split(base.value:objectName, '.')[2]::string AS A_TABLE_NAME   \r\nFROM source S\r\n     ,lateral flatten (base_objects_accessed) base\r\n     ,tables \r\nWHERE tables.K_TABLE_BK = base.value:objectId::string \r\n)\r\n\r\nSELECT * FROM rename",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "source.snowflake_usage.ACCOUNT_USAGE.ACCESS_HISTORY",
          "model.snowflake_usage.W_TABLES_D"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "view",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": [
        "snowflake_usage",
        "staging",
        "ACCESS_HISTORY",
        "V_ACCESS_HISTORY_STG"
      ],
      "unique_id": "model.snowflake_usage.V_ACCESS_HISTORY_STG",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "staging/ACCESS_HISTORY/V_ACCESS_HISTORY_STG.sql",
      "original_file_path": "models/staging/ACCESS_HISTORY/V_ACCESS_HISTORY_STG.sql",
      "name": "V_ACCESS_HISTORY_STG",
      "alias": "V_ACCESS_HISTORY_STG",
      "checksum": {
        "name": "sha256",
        "checksum": "8b78ec2bf41c62252f40af38ec99b221ccd3cb2ae575c6c163c09f2438f81524"
      },
      "tags": ["staging", "daily"],
      "refs": [["W_TABLES_D"]],
      "sources": [["ACCOUNT_USAGE", "ACCESS_HISTORY"]],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/staging/ACCESS_HISTORY/V_ACCESS_HISTORY_STG.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "transient": false,
        "materialized": "view",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"]
      },
      "created_at": 1648208993,
      "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  SNOWFLAKE.ACCOUNT_USAGE.\"ACCESS_HISTORY\"\n),\ntables AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_TABLES_D\n),\n\nrename as (\n   SELECT \n      S.query_id AS K_QUERY_BK\n     ,MD5(S.user_name) AS K_USER_DLHK\n     ,tables.K_UNIQUE_TABLE_DLHK\n     ,tables.K_TABLE_DLHK\n     ,base.value:objectId::string AS K_TABLE_BK\n     ,S.user_name A_USERNAME\n     ,S.query_start_time AS A_START_TIME_DTS\n     ,split(base.value:objectName, '.')[0]::string AS A_DATABASE_NAME\n     ,split(base.value:objectName, '.')[1]::string AS A_SCHEMA_NAME\n     ,split(base.value:objectName, '.')[2]::string AS A_TABLE_NAME   \nFROM source S\n     ,lateral flatten (base_objects_accessed) base\n     ,tables \nWHERE tables.K_TABLE_BK = base.value:objectId::string \n)\n\nSELECT * FROM rename",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_ACCESS_HISTORY_STG"
    },
    "model.snowflake_usage.W_DAILY_STORAGE_USAGE_F": {
      "raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"],\r\n  transient=false\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  C.* \r\n  \r\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_STAGE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_STAGE\r\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_STORAGE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_STORAGE\r\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_FAILSAFE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_FAILSAFE\r\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_BILLABLE_TB * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE\r\n  ,M_EFFECTIVE_RATE AS M_STORAGE_RATE\r\n  ,A_CURRENCY AS A_RATE_CURRENCY\r\nFROM\r\n  {{ref('V_DAILY_STORAGE_USAGE_STG')}} AS C\r\n  LEFT JOIN {{ref('V_DAILY_RATE_SHEET_STG')}} RATE ON RATE.A_DATE = DATE(C.A_USAGE_DATE) AND RATE.A_USAGE_TYPE = 'storage' AND RATE.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.snowflake_usage.V_DAILY_STORAGE_USAGE_STG",
          "model.snowflake_usage.V_DAILY_RATE_SHEET_STG"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_DAILY_STORAGE_USAGE_F"],
      "unique_id": "model.snowflake_usage.W_DAILY_STORAGE_USAGE_F",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_DAILY_STORAGE_USAGE_F.sql",
      "original_file_path": "models/master/W_DAILY_STORAGE_USAGE_F.sql",
      "name": "W_DAILY_STORAGE_USAGE_F",
      "alias": "W_DAILY_STORAGE_USAGE_F",
      "checksum": {
        "name": "sha256",
        "checksum": "1cf4a1020f94259a984bf41c13b0524ee740bbc0d7d60b1e930546077756b537"
      },
      "tags": ["staging", "daily"],
      "refs": [["V_DAILY_STORAGE_USAGE_STG"], ["V_DAILY_RATE_SHEET_STG"]],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_DAILY_STORAGE_USAGE_F.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  C.* \n  \n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_STAGE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_STAGE\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_STORAGE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_STORAGE\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_FAILSAFE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_FAILSAFE\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_BILLABLE_TB * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE\n  ,M_EFFECTIVE_RATE AS M_STORAGE_RATE\n  ,A_CURRENCY AS A_RATE_CURRENCY\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DAILY_STORAGE_USAGE_STG AS C\n  LEFT JOIN DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DAILY_RATE_SHEET_STG RATE ON RATE.A_DATE = DATE(C.A_USAGE_DATE) AND RATE.A_USAGE_TYPE = 'storage' AND RATE.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_DAILY_STORAGE_USAGE_F"
    },
    "model.snowflake_usage.W_USERS_D": {
      "raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"],\r\n  transient=false\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  *\r\nFROM\r\n  {{ref('V_USERS_STG')}} AS C",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.snowflake_usage.V_USERS_STG"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_USERS_D"],
      "unique_id": "model.snowflake_usage.W_USERS_D",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_USERS_D.sql",
      "original_file_path": "models/master/W_USERS_D.sql",
      "name": "W_USERS_D",
      "alias": "W_USERS_D",
      "checksum": {
        "name": "sha256",
        "checksum": "a0b232600ab13b434bfa24dcf9f6bc0b36089e293dc2cae004dfefdff6bc47d1"
      },
      "tags": ["staging", "daily"],
      "refs": [["V_USERS_STG"]],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_USERS_D.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_USERS_STG AS C",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_USERS_D"
    },
    "model.snowflake_usage.W_COLUMNS_D": {
      "raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"],\r\n  transient=false\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  *\r\nFROM\r\n  {{ref('V_COLUMNS_STG')}} AS C",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.snowflake_usage.V_COLUMNS_STG"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_COLUMNS_D"],
      "unique_id": "model.snowflake_usage.W_COLUMNS_D",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_COLUMNS_D.sql",
      "original_file_path": "models/master/W_COLUMNS_D.sql",
      "name": "W_COLUMNS_D",
      "alias": "W_COLUMNS_D",
      "checksum": {
        "name": "sha256",
        "checksum": "70030cc17084d71cbc938bc5d8f3e39b2a6c37d8d83b27c9bedd938b8db1c4a1"
      },
      "tags": ["staging", "daily"],
      "refs": [["V_COLUMNS_STG"]],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_COLUMNS_D.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_COLUMNS_STG AS C",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_COLUMNS_D"
    },
    "model.snowflake_usage.W_DATABASES_D": {
      "raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"],\r\n  transient=false\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  *\r\nFROM\r\n  {{ref('V_DATABASES_STG')}} AS C",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.snowflake_usage.V_DATABASES_STG"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_DATABASES_D"],
      "unique_id": "model.snowflake_usage.W_DATABASES_D",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_DATABASES_D.sql",
      "original_file_path": "models/master/W_DATABASES_D.sql",
      "name": "W_DATABASES_D",
      "alias": "W_DATABASES_D",
      "checksum": {
        "name": "sha256",
        "checksum": "eefc1d458beecb03e06a8a5e7f84a6e48d66cf5f518c59d2ed52ecab80138e95"
      },
      "tags": ["staging", "daily"],
      "refs": [["V_DATABASES_STG"]],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_DATABASES_D.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DATABASES_STG AS C",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_DATABASES_D"
    },
    "model.snowflake_usage.W_QUERY_HISTORY_F": {
      "raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"],\r\n  transient=false\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  C.* \r\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_CREDITS_USED_CLOUD_SERVICES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_SPENT_CLOUD_SERVICES\r\n  ,M_EFFECTIVE_RATE AS M_CLOUD_SERVICES_RATE_PER_CREDIT\r\n  ,A_CURRENCY AS A_RATE_CURRENCY\r\nFROM\r\n  {{ref('V_QUERY_HISTORY_STG')}} AS C\r\n  LEFT JOIN {{ref('V_DAILY_RATE_SHEET_STG')}} RATE ON RATE.A_DATE = DATE(C.A_END_TIME) AND RATE.A_USAGE_TYPE = 'cloud services' AND RATE.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.snowflake_usage.V_QUERY_HISTORY_STG",
          "model.snowflake_usage.V_DAILY_RATE_SHEET_STG"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_QUERY_HISTORY_F"],
      "unique_id": "model.snowflake_usage.W_QUERY_HISTORY_F",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_QUERY_HISTORY_F.sql",
      "original_file_path": "models/master/W_QUERY_HISTORY_F.sql",
      "name": "W_QUERY_HISTORY_F",
      "alias": "W_QUERY_HISTORY_F",
      "checksum": {
        "name": "sha256",
        "checksum": "fc9a5a94753f669f75f34ff97b85e9d8e9a25037c37e2433ab473acb3225b860"
      },
      "tags": ["staging", "daily"],
      "refs": [["V_QUERY_HISTORY_STG"], ["V_DAILY_RATE_SHEET_STG"]],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_QUERY_HISTORY_F.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  C.* \n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_CREDITS_USED_CLOUD_SERVICES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_SPENT_CLOUD_SERVICES\n  ,M_EFFECTIVE_RATE AS M_CLOUD_SERVICES_RATE_PER_CREDIT\n  ,A_CURRENCY AS A_RATE_CURRENCY\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_QUERY_HISTORY_STG AS C\n  LEFT JOIN DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DAILY_RATE_SHEET_STG RATE ON RATE.A_DATE = DATE(C.A_END_TIME) AND RATE.A_USAGE_TYPE = 'cloud services' AND RATE.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_QUERY_HISTORY_F"
    },
    "model.snowflake_usage.W_WAREHOUSE_USAGE_F": {
      "raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"],\r\n  transient=false\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  C.*\r\n  ,CASE \r\n    WHEN CLOUD.M_EFFECTIVE_RATE IS NULL THEN NULL \r\n    ELSE C.M_CREDITS_USED_CLOUD_SERVICES * CLOUD.M_EFFECTIVE_RATE \r\n   END AS M_AMOUNT_SPENT_CLOUD_SERVICES\r\n\r\n  ,CASE \r\n    WHEN COMPUTE.M_EFFECTIVE_RATE IS NULL THEN NULL \r\n      ELSE C.M_CREDITS_USED_COMPUTE * COMPUTE.M_EFFECTIVE_RATE \r\n    END AS M_AMOUNT_SPENT_COMPUTE\r\n\r\n  ,M_AMOUNT_SPENT_CLOUD_SERVICES + M_AMOUNT_SPENT_COMPUTE AS M_AMOUNT_SPENT\r\n  ,CLOUD.M_EFFECTIVE_RATE AS M_CLOUD_SERVICES_RATE_PER_CREDIT\r\n  ,COMPUTE.M_EFFECTIVE_RATE AS M_COMPUTE_RATE_PER_CREDIT\r\n  ,CLOUD.A_CURRENCY AS A_CLOUD_SERVICES_RATE_CURRENCY\r\n  ,COMPUTE.A_CURRENCY AS A_COMPUTE_RATE_CURRENCY\r\nFROM\r\n  {{ref('V_WAREHOUSE_USAGE_STG')}} C\r\n  LEFT JOIN {{ref('V_DAILY_RATE_SHEET_STG')}} CLOUD ON CLOUD.A_DATE = DATE(C.A_END_TIME) AND CLOUD.A_USAGE_TYPE = 'cloud services' AND CLOUD.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())\r\n  LEFT JOIN {{ref('V_DAILY_RATE_SHEET_STG')}} COMPUTE ON COMPUTE.A_DATE = DATE(C.A_END_TIME) AND COMPUTE.A_USAGE_TYPE = 'compute' AND COMPUTE.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.snowflake_usage.V_WAREHOUSE_USAGE_STG",
          "model.snowflake_usage.V_DAILY_RATE_SHEET_STG",
          "model.snowflake_usage.V_DAILY_RATE_SHEET_STG"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_WAREHOUSE_USAGE_F"],
      "unique_id": "model.snowflake_usage.W_WAREHOUSE_USAGE_F",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_WAREHOUSE_USAGE_F.sql",
      "original_file_path": "models/master/W_WAREHOUSE_USAGE_F.sql",
      "name": "W_WAREHOUSE_USAGE_F",
      "alias": "W_WAREHOUSE_USAGE_F",
      "checksum": {
        "name": "sha256",
        "checksum": "cacd265e9d38e83745c2158ef9bc0f8722dfab5e5aa5cf1127c5f958ed0d72e7"
      },
      "tags": ["staging", "daily"],
      "refs": [
        ["V_WAREHOUSE_USAGE_STG"],
        ["V_DAILY_RATE_SHEET_STG"],
        ["V_DAILY_RATE_SHEET_STG"]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_WAREHOUSE_USAGE_F.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  C.*\n  ,CASE \n    WHEN CLOUD.M_EFFECTIVE_RATE IS NULL THEN NULL \n    ELSE C.M_CREDITS_USED_CLOUD_SERVICES * CLOUD.M_EFFECTIVE_RATE \n   END AS M_AMOUNT_SPENT_CLOUD_SERVICES\n\n  ,CASE \n    WHEN COMPUTE.M_EFFECTIVE_RATE IS NULL THEN NULL \n      ELSE C.M_CREDITS_USED_COMPUTE * COMPUTE.M_EFFECTIVE_RATE \n    END AS M_AMOUNT_SPENT_COMPUTE\n\n  ,M_AMOUNT_SPENT_CLOUD_SERVICES + M_AMOUNT_SPENT_COMPUTE AS M_AMOUNT_SPENT\n  ,CLOUD.M_EFFECTIVE_RATE AS M_CLOUD_SERVICES_RATE_PER_CREDIT\n  ,COMPUTE.M_EFFECTIVE_RATE AS M_COMPUTE_RATE_PER_CREDIT\n  ,CLOUD.A_CURRENCY AS A_CLOUD_SERVICES_RATE_CURRENCY\n  ,COMPUTE.A_CURRENCY AS A_COMPUTE_RATE_CURRENCY\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_WAREHOUSE_USAGE_STG C\n  LEFT JOIN DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DAILY_RATE_SHEET_STG CLOUD ON CLOUD.A_DATE = DATE(C.A_END_TIME) AND CLOUD.A_USAGE_TYPE = 'cloud services' AND CLOUD.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())\n  LEFT JOIN DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DAILY_RATE_SHEET_STG COMPUTE ON COMPUTE.A_DATE = DATE(C.A_END_TIME) AND COMPUTE.A_USAGE_TYPE = 'compute' AND COMPUTE.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_WAREHOUSE_USAGE_F"
    },
    "model.snowflake_usage.W_DATABASE_STORAGE_USAGE_F": {
      "raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"],\r\n  transient=false\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  C.* \r\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_AVERAGE_DATABASE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_STORAGE\r\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_AVERAGE_FAILSAFE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_FAILSAFE\r\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_BILLABLE_TB * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE\r\n  ,M_EFFECTIVE_RATE AS M_STORAGE_RATE\r\n  ,A_CURRENCY AS A_RATE_CURRENCY\r\nFROM\r\n  {{ref('V_DATABASE_DAILY_STORAGE_USAGE_STG')}} AS C\r\n  LEFT JOIN {{ref('V_DAILY_RATE_SHEET_STG')}} RATE ON RATE.A_DATE = DATE(C.A_USAGE_DATE) AND RATE.A_USAGE_TYPE = 'storage' AND RATE.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.snowflake_usage.V_DATABASE_DAILY_STORAGE_USAGE_STG",
          "model.snowflake_usage.V_DAILY_RATE_SHEET_STG"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_DATABASE_STORAGE_USAGE_F"],
      "unique_id": "model.snowflake_usage.W_DATABASE_STORAGE_USAGE_F",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_DATABASE_STORAGE_USAGE_F.sql",
      "original_file_path": "models/master/W_DATABASE_STORAGE_USAGE_F.sql",
      "name": "W_DATABASE_STORAGE_USAGE_F",
      "alias": "W_DATABASE_STORAGE_USAGE_F",
      "checksum": {
        "name": "sha256",
        "checksum": "55b076b722dbea4b97fc8317907c35a6497737c553b26d7282f2e212f4407034"
      },
      "tags": ["staging", "daily"],
      "refs": [
        ["V_DATABASE_DAILY_STORAGE_USAGE_STG"],
        ["V_DAILY_RATE_SHEET_STG"]
      ],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_DATABASE_STORAGE_USAGE_F.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  C.* \n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_AVERAGE_DATABASE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_STORAGE\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_AVERAGE_FAILSAFE_TERABYTES * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE_FAILSAFE\n  ,CASE WHEN RATE.M_EFFECTIVE_RATE IS NULL THEN NULL ELSE C.M_BILLABLE_TB * RATE.M_EFFECTIVE_RATE END AS M_AMOUNT_BILLABLE\n  ,M_EFFECTIVE_RATE AS M_STORAGE_RATE\n  ,A_CURRENCY AS A_RATE_CURRENCY\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DATABASE_DAILY_STORAGE_USAGE_STG AS C\n  LEFT JOIN DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_DAILY_RATE_SHEET_STG RATE ON RATE.A_DATE = DATE(C.A_USAGE_DATE) AND RATE.A_USAGE_TYPE = 'storage' AND RATE.K_ACCOUNT_BK = (SELECT CURRENT_ACCOUNT())",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_DATABASE_STORAGE_USAGE_F"
    },
    "model.snowflake_usage.W_ACCESS_HISTORY_F": {
      "raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_ACCESS_HISTORY_STG')}} AS C",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.snowflake_usage.V_ACCESS_HISTORY_STG"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_ACCESS_HISTORY_F"],
      "unique_id": "model.snowflake_usage.W_ACCESS_HISTORY_F",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_ACCESS_HISTORY_F.sql",
      "original_file_path": "models/master/W_ACCESS_HISTORY_F.sql",
      "name": "W_ACCESS_HISTORY_F",
      "alias": "W_ACCESS_HISTORY_F",
      "checksum": {
        "name": "sha256",
        "checksum": "2695263dea4fbfbf75425f5d509668bc97218b8f8e46da0a6dc3ea27bc01a588"
      },
      "tags": ["staging", "daily"],
      "refs": [["V_ACCESS_HISTORY_STG"]],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_ACCESS_HISTORY_F.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_ACCESS_HISTORY_STG AS C",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_ACCESS_HISTORY_F"
    },
    "model.snowflake_usage.W_TABLES_D": {
      "raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"],\r\n  transient=false\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  *\r\nFROM\r\n  {{ref('V_TABLES_STG')}} AS C",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.snowflake_usage.V_TABLES_STG"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_TABLES_D"],
      "unique_id": "model.snowflake_usage.W_TABLES_D",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_TABLES_D.sql",
      "original_file_path": "models/master/W_TABLES_D.sql",
      "name": "W_TABLES_D",
      "alias": "W_TABLES_D",
      "checksum": {
        "name": "sha256",
        "checksum": "a7e65c3826bf496d32222318370a40ba423473a8d2b814e8c0e9c699bbca59f3"
      },
      "tags": ["staging", "daily"],
      "refs": [["V_TABLES_STG"]],
      "sources": [],
      "description": "This is the tables dimension table",
      "columns": {
        "K_TABLE_DLHK": {
          "name": "K_TABLE_DLHK",
          "description": "DataLakeHouse key of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true },
      "patch_path": "snowflake_usage://models/schema.yml",
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_TABLES_D.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_TABLES_STG AS C",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_TABLES_D"
    },
    "model.snowflake_usage.W_WAREHOUSE_D": {
      "raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= var('target_schema'),\r\n  tags= [\"staging\", \"daily\"],\r\n  transient=false\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  *\r\nFROM\r\n  {{ref('V_WAREHOUSE_STG')}} AS C",
      "compiled": true,
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.snowflake_usage.V_WAREHOUSE_STG"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "SNOWFLAKE_USAGE",
        "database": null,
        "tags": ["staging", "daily"],
        "meta": {},
        "materialized": "table",
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "on_schema_change": "ignore",
        "snowflake_usage": null,
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_SNOWFLAKE_USAGE",
      "fqn": ["snowflake_usage", "master", "W_WAREHOUSE_D"],
      "unique_id": "model.snowflake_usage.W_WAREHOUSE_D",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "master/W_WAREHOUSE_D.sql",
      "original_file_path": "models/master/W_WAREHOUSE_D.sql",
      "name": "W_WAREHOUSE_D",
      "alias": "W_WAREHOUSE_D",
      "checksum": {
        "name": "sha256",
        "checksum": "8832d4432b3689a84a27292b235aa7948fea6c490f4730fd3349a3fcef2009aa"
      },
      "tags": ["staging", "daily"],
      "refs": [["V_WAREHOUSE_STG"]],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/master/W_WAREHOUSE_D.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "snowflake_usage": null,
        "materialized": "table",
        "schema": "SNOWFLAKE_USAGE",
        "tags": ["staging", "daily"],
        "transient": false
      },
      "created_at": 1648208993,
      "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.V_WAREHOUSE_STG AS C",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_WAREHOUSE_D"
    },
    "test.snowflake_usage.unique_W_TABLES_D_K_TABLE_DLHK.58e5614fdc": {
      "raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}",
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "K_TABLE_DLHK",
          "model": "{{ get_where_subquery(ref('W_TABLES_D')) }}"
        },
        "namespace": null
      },
      "compiled": true,
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"],
        "nodes": ["model.snowflake_usage.W_TABLES_D"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_dbt_test__audit",
      "fqn": [
        "snowflake_usage",
        "schema_test",
        "unique_W_TABLES_D_K_TABLE_DLHK"
      ],
      "unique_id": "test.snowflake_usage.unique_W_TABLES_D_K_TABLE_DLHK.58e5614fdc",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "schema_test/unique_W_TABLES_D_K_TABLE_DLHK.sql",
      "original_file_path": "models/schema.yml",
      "name": "unique_W_TABLES_D_K_TABLE_DLHK",
      "alias": "unique_W_TABLES_D_K_TABLE_DLHK",
      "checksum": { "name": "none", "checksum": "" },
      "tags": ["schema"],
      "refs": [["W_TABLES_D"]],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/schema.yml/schema_test/unique_W_TABLES_D_K_TABLE_DLHK.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1648208993,
      "compiled_sql": "\n    \n    \n\nselect\n    K_TABLE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_TABLES_D\nwhere K_TABLE_DLHK is not null\ngroup by K_TABLE_DLHK\nhaving count(*) > 1\n\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": null,
      "column_name": "K_TABLE_DLHK"
    },
    "test.snowflake_usage.not_null_W_TABLES_D_K_TABLE_DLHK.cc9d37fa5b": {
      "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "K_TABLE_DLHK",
          "model": "{{ get_where_subquery(ref('W_TABLES_D')) }}"
        },
        "namespace": null
      },
      "compiled": true,
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"],
        "nodes": ["model.snowflake_usage.W_TABLES_D"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "DEVELOPER_SANDBOX",
      "schema": "DBT_dbt_test__audit",
      "fqn": [
        "snowflake_usage",
        "schema_test",
        "not_null_W_TABLES_D_K_TABLE_DLHK"
      ],
      "unique_id": "test.snowflake_usage.not_null_W_TABLES_D_K_TABLE_DLHK.cc9d37fa5b",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "schema_test/not_null_W_TABLES_D_K_TABLE_DLHK.sql",
      "original_file_path": "models/schema.yml",
      "name": "not_null_W_TABLES_D_K_TABLE_DLHK",
      "alias": "not_null_W_TABLES_D_K_TABLE_DLHK",
      "checksum": { "name": "none", "checksum": "" },
      "tags": ["schema"],
      "refs": [["W_TABLES_D"]],
      "sources": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "compiled_path": "target/compiled/snowflake_usage/models/schema.yml/schema_test/not_null_W_TABLES_D_K_TABLE_DLHK.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1648208993,
      "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SNOWFLAKE_USAGE.W_TABLES_D\nwhere K_TABLE_DLHK is null\n\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": null,
      "column_name": "K_TABLE_DLHK"
    }
  },
  "sources": {
    "source.snowflake_usage.ACCOUNT_USAGE.TABLES": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "TABLES"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.TABLES",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "TABLES",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "TABLES",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"TABLES\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.COLUMNS": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "COLUMNS"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.COLUMNS",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "COLUMNS",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "COLUMNS",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"COLUMNS\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.DATABASES": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "DATABASES"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.DATABASES",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "DATABASES",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "DATABASES",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"DATABASES\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.FILE_FORMATS": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "FILE_FORMATS"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.FILE_FORMATS",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "FILE_FORMATS",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "FILE_FORMATS",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"FILE_FORMATS\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.FUNCTIONS": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "FUNCTIONS"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.FUNCTIONS",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "FUNCTIONS",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "FUNCTIONS",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"FUNCTIONS\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.LOAD_HISTORY": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "LOAD_HISTORY"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.LOAD_HISTORY",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "LOAD_HISTORY",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "LOAD_HISTORY",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"LOAD_HISTORY\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.LOGIN_HISTORY": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "LOGIN_HISTORY"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.LOGIN_HISTORY",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "LOGIN_HISTORY",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "LOGIN_HISTORY",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"LOGIN_HISTORY\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "QUERY_HISTORY"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "QUERY_HISTORY",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "QUERY_HISTORY",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"QUERY_HISTORY\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.REFERENCIAL_CONSTRAINTS": {
      "fqn": [
        "snowflake_usage",
        "sources",
        "ACCOUNT_USAGE",
        "REFERENCIAL_CONSTRAINTS"
      ],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.REFERENCIAL_CONSTRAINTS",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "REFERENCIAL_CONSTRAINTS",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "REFERENCIAL_CONSTRAINTS",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"REFERENCIAL_CONSTRAINTS\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.SCHEMADATA": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "SCHEMADATA"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.SCHEMADATA",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "SCHEMADATA",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "SCHEMADATA",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"SCHEMADATA\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.SEQUENCES": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "SEQUENCES"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.SEQUENCES",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "SEQUENCES",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "SEQUENCES",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"SEQUENCES\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.STAGES": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "STAGES"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.STAGES",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "STAGES",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "STAGES",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"STAGES\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.STORAGE_USAGE": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "STORAGE_USAGE"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.STORAGE_USAGE",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "STORAGE_USAGE",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "STORAGE_USAGE",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"STORAGE_USAGE\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.TABLE_CONSTRAINTS": {
      "fqn": [
        "snowflake_usage",
        "sources",
        "ACCOUNT_USAGE",
        "TABLE_CONSTRAINTS"
      ],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.TABLE_CONSTRAINTS",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "TABLE_CONSTRAINTS",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "TABLE_CONSTRAINTS",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"TABLE_CONSTRAINTS\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.TABLE_STORAGE_METRICS": {
      "fqn": [
        "snowflake_usage",
        "sources",
        "ACCOUNT_USAGE",
        "TABLE_STORAGE_METRICS"
      ],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.TABLE_STORAGE_METRICS",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "TABLE_STORAGE_METRICS",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "TABLE_STORAGE_METRICS",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"TABLE_STORAGE_METRICS\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.VIEWS": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "VIEWS"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.VIEWS",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "VIEWS",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "VIEWS",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"VIEWS\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY": {
      "fqn": [
        "snowflake_usage",
        "sources",
        "ACCOUNT_USAGE",
        "WAREHOUSE_METERING_HISTORY"
      ],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "WAREHOUSE_METERING_HISTORY",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "WAREHOUSE_METERING_HISTORY",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"WAREHOUSE_METERING_HISTORY\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.ACCESS_HISTORY": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "ACCESS_HISTORY"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.ACCESS_HISTORY",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "ACCESS_HISTORY",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "ACCESS_HISTORY",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"ACCESS_HISTORY\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.USERS": {
      "fqn": ["snowflake_usage", "sources", "ACCOUNT_USAGE", "USERS"],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.USERS",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "USERS",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "USERS",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"USERS\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY": {
      "fqn": [
        "snowflake_usage",
        "sources",
        "ACCOUNT_USAGE",
        "DATABASE_STORAGE_USAGE_HISTORY"
      ],
      "database": "SNOWFLAKE",
      "schema": "ACCOUNT_USAGE",
      "unique_id": "source.snowflake_usage.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "DATABASE_STORAGE_USAGE_HISTORY",
      "source_name": "ACCOUNT_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "DATABASE_STORAGE_USAGE_HISTORY",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ACCOUNT_USAGE.\"DATABASE_STORAGE_USAGE_HISTORY\"",
      "created_at": 1648208993
    },
    "source.snowflake_usage.ORGANIZATION_USAGE.RATE_SHEET_DAILY": {
      "fqn": [
        "snowflake_usage",
        "sources",
        "ORGANIZATION_USAGE",
        "RATE_SHEET_DAILY"
      ],
      "database": "SNOWFLAKE",
      "schema": "ORGANIZATION_USAGE",
      "unique_id": "source.snowflake_usage.ORGANIZATION_USAGE.RATE_SHEET_DAILY",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "models/sources/sources.yml",
      "original_file_path": "models/sources/sources.yml",
      "name": "RATE_SHEET_DAILY",
      "source_name": "ORGANIZATION_USAGE",
      "source_description": "",
      "loader": "",
      "identifier": "RATE_SHEET_DAILY",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": true,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": { "warn_after": null, "error_after": null, "filter": null },
      "external": null,
      "description": "",
      "columns": {},
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "SNOWFLAKE.ORGANIZATION_USAGE.\"RATE_SHEET_DAILY\"",
      "created_at": 1648208993
    }
  },
  "macros": {
    "macro.snowflake_usage.full_name": {
      "unique_id": "macro.snowflake_usage.full_name",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "macros/common.sql",
      "original_file_path": "macros/common.sql",
      "name": "full_name",
      "macro_sql": "{% macro full_name(firstName, lastName) %}\r\n    (COALESCE({{firstName}},'') || ' ' || COALESCE({{lastName}},''))\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.snowflake_usage.address_json_parse": {
      "unique_id": "macro.snowflake_usage.address_json_parse",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "macros/common.sql",
      "original_file_path": "macros/common.sql",
      "name": "address_json_parse",
      "macro_sql": "{% macro address_json_parse(address_json) %}\r\n    MD5(CONCAT(coalesce(to_varchar(get_path(parse_json({{address_json}}), 'address1')),'00'),\r\n              coalesce(to_varchar(get_path(parse_json({{address_json}}), 'address2')),'00'),\r\n              coalesce(to_varchar(get_path(parse_json({{address_json}}), 'city')),'00'),\r\n              coalesce(to_varchar(get_path(parse_json({{address_json}}), 'country')),'00'),\r\n              coalesce(to_varchar(get_path(parse_json({{address_json}}), 'country_code')),'00'),\r\n              coalesce(to_varchar(get_path(parse_json({{address_json}}), 'first_name')),'00'),\r\n              coalesce(to_varchar(get_path(parse_json({{address_json}}), 'last_name')),'00'),\r\n              coalesce(to_varchar(get_path(parse_json({{address_json}}), 'province')),'00'),\r\n              coalesce(to_varchar(get_path(parse_json({{address_json}}), 'province_code')),'00'),\r\n              coalesce(to_varchar(get_path(parse_json({{address_json}}), 'zip')),'00')))\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.snowflake_usage.amount_origin_currency": {
      "unique_id": "macro.snowflake_usage.amount_origin_currency",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "macros/common.sql",
      "original_file_path": "macros/common.sql",
      "name": "amount_origin_currency",
      "macro_sql": "{% macro amount_origin_currency(value) %}\r\n    coalesce(get_path(parse_json({{value}}), 'presentment_money.amount'),'0')::decimal(15,2)\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.snowflake_usage.amount_currency": {
      "unique_id": "macro.snowflake_usage.amount_currency",
      "package_name": "snowflake_usage",
      "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/snowflake_usage_dbt",
      "path": "macros/common.sql",
      "original_file_path": "macros/common.sql",
      "name": "amount_currency",
      "macro_sql": "{% macro amount_currency(value, type) %}\r\n\r\nCASE WHEN  '{{type}}' = 'original' THEN\r\n    coalesce(get_path(parse_json({{value}}), 'presentment_money.amount'),'0')::decimal(15,2)\r\nWHEN '{{type}}' = 'primary' THEN\r\n    coalesce(get_path(parse_json({{value}}), 'shop_money.amount'),'0')::decimal(15,2)\r\nEND\r\n\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__get_catalog": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_catalog",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/catalog.sql",
      "original_file_path": "macros/catalog.sql",
      "name": "snowflake__get_catalog",
      "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__create_table_as": {
      "unique_id": "macro.dbt_snowflake.snowflake__create_table_as",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__create_table_as",
      "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__create_view_as": {
      "unique_id": "macro.dbt_snowflake.snowflake__create_view_as",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__create_view_as",
      "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__get_columns_in_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__get_columns_in_relation",
      "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__list_schemas": {
      "unique_id": "macro.dbt_snowflake.snowflake__list_schemas",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__list_schemas",
      "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__list_relations_without_caching": {
      "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__list_relations_without_caching",
      "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__check_schema_exists": {
      "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__check_schema_exists",
      "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__current_timestamp": {
      "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__current_timestamp",
      "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__snapshot_string_as_time",
      "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__snapshot_get_time": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__snapshot_get_time",
      "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.current_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__rename_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__rename_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__rename_relation",
      "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__alter_column_type": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_column_type",
      "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__alter_relation_comment": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_relation_comment",
      "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__alter_column_comment": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_column_comment",
      "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.get_current_query_tag": {
      "unique_id": "macro.dbt_snowflake.get_current_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "get_current_query_tag",
      "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.set_query_tag": {
      "unique_id": "macro.dbt_snowflake.set_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "set_query_tag",
      "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.get_current_query_tag",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.unset_query_tag": {
      "unique_id": "macro.dbt_snowflake.unset_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "unset_query_tag",
      "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_relation_add_remove_columns",
      "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {
      "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake_dml_explicit_transaction",
      "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__truncate_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__truncate_relation",
      "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__get_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__get_merge_sql",
      "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.default__get_merge_sql",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__get_delete_insert_merge_sql",
      "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_delete_insert_merge_sql",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__snapshot_merge_sql",
      "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__snapshot_merge_sql",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.snowflake__load_csv_rows": {
      "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/seed.sql",
      "original_file_path": "macros/materializations/seed.sql",
      "name": "snowflake__load_csv_rows",
      "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.materialization_view_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_view_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/view.sql",
      "original_file_path": "macros/materializations/view.sql",
      "name": "materialization_view_snowflake",
      "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.create_or_replace_view",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.materialization_table_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_table_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/table.sql",
      "original_file_path": "macros/materializations/table.sql",
      "name": "materialization_table_snowflake",
      "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {
      "unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "dbt_snowflake_validate_get_incremental_strategy",
      "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {
      "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "dbt_snowflake_get_incremental_sql",
      "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_merge_sql",
          "macro.dbt.get_delete_insert_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt_snowflake.materialization_incremental_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "materialization_incremental_snowflake",
      "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.statement": {
      "unique_id": "macro.dbt.statement",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/core.sql",
      "original_file_path": "macros/core.sql",
      "name": "statement",
      "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.noop_statement": {
      "unique_id": "macro.dbt.noop_statement",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/core.sql",
      "original_file_path": "macros/core.sql",
      "name": "noop_statement",
      "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_test_sql": {
      "unique_id": "macro.dbt.get_test_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/test.sql",
      "original_file_path": "macros/materializations/test.sql",
      "name": "get_test_sql",
      "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_test_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_test_sql": {
      "unique_id": "macro.dbt.default__get_test_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/test.sql",
      "original_file_path": "macros/materializations/test.sql",
      "name": "default__get_test_sql",
      "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.materialization_test_default": {
      "unique_id": "macro.dbt.materialization_test_default",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/test.sql",
      "original_file_path": "macros/materializations/test.sql",
      "name": "materialization_test_default",
      "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_store_failures",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.run_hooks": {
      "unique_id": "macro.dbt.run_hooks",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "run_hooks",
      "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.column_list": {
      "unique_id": "macro.dbt.column_list",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "column_list",
      "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.column_list_for_create_table": {
      "unique_id": "macro.dbt.column_list_for_create_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "column_list_for_create_table",
      "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.make_hook_config": {
      "unique_id": "macro.dbt.make_hook_config",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "make_hook_config",
      "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.before_begin": {
      "unique_id": "macro.dbt.before_begin",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "before_begin",
      "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.make_hook_config"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.in_transaction": {
      "unique_id": "macro.dbt.in_transaction",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "in_transaction",
      "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.make_hook_config"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.after_commit": {
      "unique_id": "macro.dbt.after_commit",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "after_commit",
      "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.make_hook_config"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.drop_relation_if_exists": {
      "unique_id": "macro.dbt.drop_relation_if_exists",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "drop_relation_if_exists",
      "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.load_relation": {
      "unique_id": "macro.dbt.load_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "load_relation",
      "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.should_full_refresh": {
      "unique_id": "macro.dbt.should_full_refresh",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "should_full_refresh",
      "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.should_store_failures": {
      "unique_id": "macro.dbt.should_store_failures",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/helpers.sql",
      "original_file_path": "macros/materializations/helpers.sql",
      "name": "should_store_failures",
      "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.snapshot_merge_sql": {
      "unique_id": "macro.dbt.snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql",
      "name": "snapshot_merge_sql",
      "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__snapshot_merge_sql": {
      "unique_id": "macro.dbt.default__snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql",
      "name": "default__snapshot_merge_sql",
      "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.strategy_dispatch": {
      "unique_id": "macro.dbt.strategy_dispatch",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "strategy_dispatch",
      "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.snapshot_hash_arguments": {
      "unique_id": "macro.dbt.snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_hash_arguments",
      "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__snapshot_hash_arguments"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__snapshot_hash_arguments": {
      "unique_id": "macro.dbt.default__snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "default__snapshot_hash_arguments",
      "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.snapshot_get_time": {
      "unique_id": "macro.dbt.snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_get_time",
      "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__snapshot_get_time": {
      "unique_id": "macro.dbt.default__snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "default__snapshot_get_time",
      "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.current_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.snapshot_timestamp_strategy": {
      "unique_id": "macro.dbt.snapshot_timestamp_strategy",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_timestamp_strategy",
      "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.snapshot_hash_arguments"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.snapshot_string_as_time": {
      "unique_id": "macro.dbt.snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_string_as_time",
      "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__snapshot_string_as_time": {
      "unique_id": "macro.dbt.default__snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "default__snapshot_string_as_time",
      "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.snapshot_check_all_get_existing_columns": {
      "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_check_all_get_existing_columns",
      "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_columns_in_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.snapshot_check_strategy": {
      "unique_id": "macro.dbt.snapshot_check_strategy",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/strategies.sql",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "name": "snapshot_check_strategy",
      "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time",
          "macro.dbt.run_query",
          "macro.dbt.snapshot_string_as_time",
          "macro.dbt.snapshot_check_all_get_existing_columns",
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.create_columns": {
      "unique_id": "macro.dbt.create_columns",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "create_columns",
      "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_columns"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__create_columns": {
      "unique_id": "macro.dbt.default__create_columns",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "default__create_columns",
      "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.post_snapshot": {
      "unique_id": "macro.dbt.post_snapshot",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "post_snapshot",
      "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__post_snapshot"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__post_snapshot": {
      "unique_id": "macro.dbt.default__post_snapshot",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "default__post_snapshot",
      "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.snapshot_staging_table": {
      "unique_id": "macro.dbt.snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "snapshot_staging_table",
      "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.snapshot_get_time"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.build_snapshot_table": {
      "unique_id": "macro.dbt.build_snapshot_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "build_snapshot_table",
      "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_or_create_relation": {
      "unique_id": "macro.dbt.get_or_create_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "get_or_create_relation",
      "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.build_snapshot_staging_table": {
      "unique_id": "macro.dbt.build_snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "build_snapshot_staging_table",
      "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_temp_relation",
          "macro.dbt.snapshot_staging_table",
          "macro.dbt.statement",
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.materialization_snapshot_default": {
      "unique_id": "macro.dbt.materialization_snapshot_default",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshot/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "name": "materialization_snapshot_default",
      "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.create_schema",
          "macro.dbt.get_or_create_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.strategy_dispatch",
          "macro.dbt.build_snapshot_table",
          "macro.dbt.create_table_as",
          "macro.dbt.build_snapshot_staging_table",
          "macro.dbt.create_columns",
          "macro.dbt.snapshot_merge_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
          "macro.dbt.post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.create_csv_table": {
      "unique_id": "macro.dbt.create_csv_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "create_csv_table",
      "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__create_csv_table": {
      "unique_id": "macro.dbt.default__create_csv_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "default__create_csv_table",
      "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.reset_csv_table": {
      "unique_id": "macro.dbt.reset_csv_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "reset_csv_table",
      "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__reset_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__reset_csv_table": {
      "unique_id": "macro.dbt.default__reset_csv_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "default__reset_csv_table",
      "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.create_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_binding_char": {
      "unique_id": "macro.dbt.get_binding_char",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "get_binding_char",
      "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_binding_char"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_binding_char": {
      "unique_id": "macro.dbt.default__get_binding_char",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "default__get_binding_char",
      "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_batch_size": {
      "unique_id": "macro.dbt.get_batch_size",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "get_batch_size",
      "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_batch_size"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_batch_size": {
      "unique_id": "macro.dbt.default__get_batch_size",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "default__get_batch_size",
      "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_seed_column_quoted_csv": {
      "unique_id": "macro.dbt.get_seed_column_quoted_csv",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "get_seed_column_quoted_csv",
      "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.load_csv_rows": {
      "unique_id": "macro.dbt.load_csv_rows",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "load_csv_rows",
      "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__load_csv_rows": {
      "unique_id": "macro.dbt.default__load_csv_rows",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "default__load_csv_rows",
      "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv",
          "macro.dbt.get_binding_char"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.materialization_seed_default": {
      "unique_id": "macro.dbt.materialization_seed_default",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seed/seed.sql",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "name": "materialization_seed_default",
      "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh",
          "macro.dbt.run_hooks",
          "macro.dbt.reset_csv_table",
          "macro.dbt.create_csv_table",
          "macro.dbt.load_csv_rows",
          "macro.dbt.noop_statement",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.incremental_upsert": {
      "unique_id": "macro.dbt.incremental_upsert",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/helpers.sql",
      "original_file_path": "macros/materializations/incremental/helpers.sql",
      "name": "incremental_upsert",
      "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.materialization_incremental_default": {
      "unique_id": "macro.dbt.materialization_incremental_default",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/incremental.sql",
      "original_file_path": "macros/materializations/incremental/incremental.sql",
      "name": "materialization_incremental_default",
      "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt.should_full_refresh",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt.incremental_upsert",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.incremental_validate_on_schema_change": {
      "unique_id": "macro.dbt.incremental_validate_on_schema_change",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/incremental/on_schema_change.sql",
      "name": "incremental_validate_on_schema_change",
      "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.diff_columns": {
      "unique_id": "macro.dbt.diff_columns",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/incremental/on_schema_change.sql",
      "name": "diff_columns",
      "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.diff_column_data_types": {
      "unique_id": "macro.dbt.diff_column_data_types",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/incremental/on_schema_change.sql",
      "name": "diff_column_data_types",
      "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.check_for_schema_changes": {
      "unique_id": "macro.dbt.check_for_schema_changes",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/incremental/on_schema_change.sql",
      "name": "check_for_schema_changes",
      "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.sync_column_schemas": {
      "unique_id": "macro.dbt.sync_column_schemas",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/incremental/on_schema_change.sql",
      "name": "sync_column_schemas",
      "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.alter_relation_add_remove_columns",
          "macro.dbt.alter_column_type"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.process_schema_changes": {
      "unique_id": "macro.dbt.process_schema_changes",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/incremental/on_schema_change.sql",
      "name": "process_schema_changes",
      "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.check_for_schema_changes",
          "macro.dbt.sync_column_schemas"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_merge_sql": {
      "unique_id": "macro.dbt.get_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "get_merge_sql",
      "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "get_delete_insert_merge_sql",
      "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_merge_sql": {
      "unique_id": "macro.dbt.default__get_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "default__get_merge_sql",
      "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_quoted_csv": {
      "unique_id": "macro.dbt.get_quoted_csv",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "get_quoted_csv",
      "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.common_get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.common_get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "common_get_delete_insert_merge_sql",
      "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "default__get_delete_insert_merge_sql",
      "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.common_get_delete_insert_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/common/merge.sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "name": "default__get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.materialization_table_default": {
      "unique_id": "macro.dbt.materialization_table_default",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/table/table.sql",
      "original_file_path": "macros/materializations/table/table.sql",
      "name": "materialization_table_default",
      "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.create_indexes",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.materialization_view_default": {
      "unique_id": "macro.dbt.materialization_view_default",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/view/view.sql",
      "original_file_path": "macros/materializations/view/view.sql",
      "name": "materialization_view_default",
      "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.create_view_as",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.handle_existing_table": {
      "unique_id": "macro.dbt.handle_existing_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/view/create_or_replace_view.sql",
      "name": "handle_existing_table",
      "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__handle_existing_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__handle_existing_table": {
      "unique_id": "macro.dbt.default__handle_existing_table",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/view/create_or_replace_view.sql",
      "name": "default__handle_existing_table",
      "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.create_or_replace_view": {
      "unique_id": "macro.dbt.create_or_replace_view",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/materializations/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/view/create_or_replace_view.sql",
      "name": "create_or_replace_view",
      "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.handle_existing_table",
          "macro.dbt.should_full_refresh",
          "macro.dbt.statement",
          "macro.dbt.create_view_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.generate_alias_name": {
      "unique_id": "macro.dbt.generate_alias_name",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_alias.sql",
      "original_file_path": "macros/etc/get_custom_alias.sql",
      "name": "generate_alias_name",
      "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__generate_alias_name"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__generate_alias_name": {
      "unique_id": "macro.dbt.default__generate_alias_name",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_alias.sql",
      "original_file_path": "macros/etc/get_custom_alias.sql",
      "name": "default__generate_alias_name",
      "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.run_query": {
      "unique_id": "macro.dbt.run_query",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/query.sql",
      "original_file_path": "macros/etc/query.sql",
      "name": "run_query",
      "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.is_incremental": {
      "unique_id": "macro.dbt.is_incremental",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/is_incremental.sql",
      "original_file_path": "macros/etc/is_incremental.sql",
      "name": "is_incremental",
      "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.should_full_refresh"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.convert_datetime": {
      "unique_id": "macro.dbt.convert_datetime",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "convert_datetime",
      "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.dates_in_range": {
      "unique_id": "macro.dbt.dates_in_range",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "dates_in_range",
      "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.convert_datetime"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.partition_range": {
      "unique_id": "macro.dbt.partition_range",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "partition_range",
      "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.dates_in_range"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.py_current_timestring": {
      "unique_id": "macro.dbt.py_current_timestring",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "py_current_timestring",
      "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_where_subquery": {
      "unique_id": "macro.dbt.get_where_subquery",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/where_subquery.sql",
      "original_file_path": "macros/etc/where_subquery.sql",
      "name": "get_where_subquery",
      "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_where_subquery"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_where_subquery": {
      "unique_id": "macro.dbt.default__get_where_subquery",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/where_subquery.sql",
      "original_file_path": "macros/etc/where_subquery.sql",
      "name": "default__get_where_subquery",
      "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.generate_schema_name": {
      "unique_id": "macro.dbt.generate_schema_name",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_schema.sql",
      "original_file_path": "macros/etc/get_custom_schema.sql",
      "name": "generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__generate_schema_name"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__generate_schema_name": {
      "unique_id": "macro.dbt.default__generate_schema_name",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_schema.sql",
      "original_file_path": "macros/etc/get_custom_schema.sql",
      "name": "default__generate_schema_name",
      "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.generate_schema_name_for_env": {
      "unique_id": "macro.dbt.generate_schema_name_for_env",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_schema.sql",
      "original_file_path": "macros/etc/get_custom_schema.sql",
      "name": "generate_schema_name_for_env",
      "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.generate_database_name": {
      "unique_id": "macro.dbt.generate_database_name",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_database.sql",
      "original_file_path": "macros/etc/get_custom_database.sql",
      "name": "generate_database_name",
      "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__generate_database_name"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__generate_database_name": {
      "unique_id": "macro.dbt.default__generate_database_name",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/etc/get_custom_database.sql",
      "original_file_path": "macros/etc/get_custom_database.sql",
      "name": "default__generate_database_name",
      "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_columns_in_query": {
      "unique_id": "macro.dbt.get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "get_columns_in_query",
      "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_columns_in_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_columns_in_query": {
      "unique_id": "macro.dbt.default__get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__get_columns_in_query",
      "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.create_schema": {
      "unique_id": "macro.dbt.create_schema",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "create_schema",
      "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_schema"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__create_schema": {
      "unique_id": "macro.dbt.default__create_schema",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__create_schema",
      "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.drop_schema": {
      "unique_id": "macro.dbt.drop_schema",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "drop_schema",
      "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__drop_schema"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__drop_schema": {
      "unique_id": "macro.dbt.default__drop_schema",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__drop_schema",
      "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.create_table_as": {
      "unique_id": "macro.dbt.create_table_as",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "create_table_as",
      "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__create_table_as"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__create_table_as": {
      "unique_id": "macro.dbt.default__create_table_as",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__create_table_as",
      "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_create_index_sql": {
      "unique_id": "macro.dbt.get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "get_create_index_sql",
      "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_create_index_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_create_index_sql": {
      "unique_id": "macro.dbt.default__get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__get_create_index_sql",
      "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.create_indexes": {
      "unique_id": "macro.dbt.create_indexes",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "create_indexes",
      "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_indexes"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__create_indexes": {
      "unique_id": "macro.dbt.default__create_indexes",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__create_indexes",
      "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.create_view_as": {
      "unique_id": "macro.dbt.create_view_as",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "create_view_as",
      "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__create_view_as"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__create_view_as": {
      "unique_id": "macro.dbt.default__create_view_as",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__create_view_as",
      "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_catalog": {
      "unique_id": "macro.dbt.get_catalog",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "get_catalog",
      "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__get_catalog"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_catalog": {
      "unique_id": "macro.dbt.default__get_catalog",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__get_catalog",
      "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.get_columns_in_relation": {
      "unique_id": "macro.dbt.get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "get_columns_in_relation",
      "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.sql_convert_columns_in_relation": {
      "unique_id": "macro.dbt.sql_convert_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "sql_convert_columns_in_relation",
      "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__get_columns_in_relation": {
      "unique_id": "macro.dbt.default__get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__get_columns_in_relation",
      "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.alter_column_type": {
      "unique_id": "macro.dbt.alter_column_type",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "alter_column_type",
      "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.alter_column_comment": {
      "unique_id": "macro.dbt.alter_column_comment",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "alter_column_comment",
      "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__alter_column_comment": {
      "unique_id": "macro.dbt.default__alter_column_comment",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__alter_column_comment",
      "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.alter_relation_comment": {
      "unique_id": "macro.dbt.alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "alter_relation_comment",
      "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__alter_relation_comment": {
      "unique_id": "macro.dbt.default__alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__alter_relation_comment",
      "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.persist_docs": {
      "unique_id": "macro.dbt.persist_docs",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "persist_docs",
      "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__persist_docs"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__persist_docs": {
      "unique_id": "macro.dbt.default__persist_docs",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__persist_docs",
      "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.alter_relation_comment",
          "macro.dbt.alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__alter_column_type": {
      "unique_id": "macro.dbt.default__alter_column_type",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__alter_column_type",
      "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.drop_relation": {
      "unique_id": "macro.dbt.drop_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "drop_relation",
      "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__drop_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__drop_relation": {
      "unique_id": "macro.dbt.default__drop_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__drop_relation",
      "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.truncate_relation": {
      "unique_id": "macro.dbt.truncate_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "truncate_relation",
      "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__truncate_relation": {
      "unique_id": "macro.dbt.default__truncate_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__truncate_relation",
      "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.rename_relation": {
      "unique_id": "macro.dbt.rename_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "rename_relation",
      "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__rename_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__rename_relation": {
      "unique_id": "macro.dbt.default__rename_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__rename_relation",
      "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.information_schema_name": {
      "unique_id": "macro.dbt.information_schema_name",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "information_schema_name",
      "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__information_schema_name"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__information_schema_name": {
      "unique_id": "macro.dbt.default__information_schema_name",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__information_schema_name",
      "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.list_schemas": {
      "unique_id": "macro.dbt.list_schemas",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "list_schemas",
      "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__list_schemas"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__list_schemas": {
      "unique_id": "macro.dbt.default__list_schemas",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__list_schemas",
      "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.check_schema_exists": {
      "unique_id": "macro.dbt.check_schema_exists",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "check_schema_exists",
      "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__check_schema_exists": {
      "unique_id": "macro.dbt.default__check_schema_exists",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__check_schema_exists",
      "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.list_relations_without_caching": {
      "unique_id": "macro.dbt.list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "list_relations_without_caching",
      "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__list_relations_without_caching"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__list_relations_without_caching": {
      "unique_id": "macro.dbt.default__list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__list_relations_without_caching",
      "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.current_timestamp": {
      "unique_id": "macro.dbt.current_timestamp",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "current_timestamp",
      "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__current_timestamp": {
      "unique_id": "macro.dbt.default__current_timestamp",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.collect_freshness": {
      "unique_id": "macro.dbt.collect_freshness",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "collect_freshness",
      "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__collect_freshness"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__collect_freshness": {
      "unique_id": "macro.dbt.default__collect_freshness",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__collect_freshness",
      "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.make_temp_relation": {
      "unique_id": "macro.dbt.make_temp_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "make_temp_relation",
      "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__make_temp_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__make_temp_relation": {
      "unique_id": "macro.dbt.default__make_temp_relation",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__make_temp_relation",
      "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.set_sql_header": {
      "unique_id": "macro.dbt.set_sql_header",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "set_sql_header",
      "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt.alter_relation_add_remove_columns",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "alter_relation_add_remove_columns",
      "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/adapters/common.sql",
      "original_file_path": "macros/adapters/common.sql",
      "name": "default__alter_relation_add_remove_columns",
      "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__test_relationships": {
      "unique_id": "macro.dbt.default__test_relationships",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/relationships.sql",
      "original_file_path": "macros/schema_tests/relationships.sql",
      "name": "default__test_relationships",
      "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.test_relationships": {
      "unique_id": "macro.dbt.test_relationships",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/relationships.sql",
      "original_file_path": "macros/schema_tests/relationships.sql",
      "name": "test_relationships",
      "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_relationships"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__test_not_null": {
      "unique_id": "macro.dbt.default__test_not_null",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/not_null.sql",
      "original_file_path": "macros/schema_tests/not_null.sql",
      "name": "default__test_not_null",
      "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.test_not_null": {
      "unique_id": "macro.dbt.test_not_null",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/not_null.sql",
      "original_file_path": "macros/schema_tests/not_null.sql",
      "name": "test_not_null",
      "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_not_null"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__test_unique": {
      "unique_id": "macro.dbt.default__test_unique",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/unique.sql",
      "original_file_path": "macros/schema_tests/unique.sql",
      "name": "default__test_unique",
      "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.test_unique": {
      "unique_id": "macro.dbt.test_unique",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/unique.sql",
      "original_file_path": "macros/schema_tests/unique.sql",
      "name": "test_unique",
      "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_unique"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.default__test_accepted_values": {
      "unique_id": "macro.dbt.default__test_accepted_values",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/accepted_values.sql",
      "original_file_path": "macros/schema_tests/accepted_values.sql",
      "name": "default__test_accepted_values",
      "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    },
    "macro.dbt.test_accepted_values": {
      "unique_id": "macro.dbt.test_accepted_values",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "macros/schema_tests/accepted_values.sql",
      "original_file_path": "macros/schema_tests/accepted_values.sql",
      "name": "test_accepted_values",
      "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_accepted_values"] },
      "description": "",
      "meta": {},
      "docs": { "show": true },
      "patch_path": null,
      "arguments": [],
      "created_at": 1648208993
    }
  },
  "docs": {
    "dbt.__overview__": {
      "unique_id": "dbt.__overview__",
      "package_name": "dbt",
      "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project",
      "path": "overview.md",
      "original_file_path": "docs/overview.md",
      "name": "__overview__",
      "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."
    }
  },
  "exposures": {},
  "selectors": {},
  "disabled": [],
  "parent_map": {
    "model.snowflake_usage.V_TABLES_STG": [
      "source.snowflake_usage.ACCOUNT_USAGE.TABLES"
    ],
    "model.snowflake_usage.V_DATABASES_STG": [
      "source.snowflake_usage.ACCOUNT_USAGE.DATABASES"
    ],
    "model.snowflake_usage.V_DATABASE_DAILY_STORAGE_USAGE_STG": [
      "source.snowflake_usage.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY"
    ],
    "model.snowflake_usage.V_DAILY_STORAGE_USAGE_STG": [
      "source.snowflake_usage.ACCOUNT_USAGE.STORAGE_USAGE"
    ],
    "model.snowflake_usage.V_DATE_STG": [],
    "model.snowflake_usage.V_USERS_STG": [
      "source.snowflake_usage.ACCOUNT_USAGE.USERS"
    ],
    "model.snowflake_usage.V_DAILY_RATE_SHEET_STG": [
      "source.snowflake_usage.ORGANIZATION_USAGE.RATE_SHEET_DAILY"
    ],
    "model.snowflake_usage.V_COLUMNS_STG": [
      "source.snowflake_usage.ACCOUNT_USAGE.COLUMNS"
    ],
    "model.snowflake_usage.V_WAREHOUSE_STG": [
      "source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY"
    ],
    "model.snowflake_usage.V_WAREHOUSE_USAGE_STG": [
      "source.snowflake_usage.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY"
    ],
    "model.snowflake_usage.V_QUERY_HISTORY_STG": [
      "source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY"
    ],
    "model.snowflake_usage.V_ACCESS_HISTORY_STG": [
      "model.snowflake_usage.W_TABLES_D",
      "source.snowflake_usage.ACCOUNT_USAGE.ACCESS_HISTORY"
    ],
    "model.snowflake_usage.W_DAILY_STORAGE_USAGE_F": [
      "model.snowflake_usage.V_DAILY_RATE_SHEET_STG",
      "model.snowflake_usage.V_DAILY_STORAGE_USAGE_STG"
    ],
    "model.snowflake_usage.W_USERS_D": ["model.snowflake_usage.V_USERS_STG"],
    "model.snowflake_usage.W_COLUMNS_D": [
      "model.snowflake_usage.V_COLUMNS_STG"
    ],
    "model.snowflake_usage.W_DATABASES_D": [
      "model.snowflake_usage.V_DATABASES_STG"
    ],
    "model.snowflake_usage.W_QUERY_HISTORY_F": [
      "model.snowflake_usage.V_DAILY_RATE_SHEET_STG",
      "model.snowflake_usage.V_QUERY_HISTORY_STG"
    ],
    "model.snowflake_usage.W_WAREHOUSE_USAGE_F": [
      "model.snowflake_usage.V_DAILY_RATE_SHEET_STG",
      "model.snowflake_usage.V_DAILY_RATE_SHEET_STG",
      "model.snowflake_usage.V_WAREHOUSE_USAGE_STG"
    ],
    "model.snowflake_usage.W_DATABASE_STORAGE_USAGE_F": [
      "model.snowflake_usage.V_DAILY_RATE_SHEET_STG",
      "model.snowflake_usage.V_DATABASE_DAILY_STORAGE_USAGE_STG"
    ],
    "model.snowflake_usage.W_ACCESS_HISTORY_F": [
      "model.snowflake_usage.V_ACCESS_HISTORY_STG"
    ],
    "model.snowflake_usage.W_TABLES_D": ["model.snowflake_usage.V_TABLES_STG"],
    "model.snowflake_usage.W_WAREHOUSE_D": [
      "model.snowflake_usage.V_WAREHOUSE_STG"
    ],
    "test.snowflake_usage.unique_W_TABLES_D_K_TABLE_DLHK.58e5614fdc": [
      "model.snowflake_usage.W_TABLES_D"
    ],
    "test.snowflake_usage.not_null_W_TABLES_D_K_TABLE_DLHK.cc9d37fa5b": [
      "model.snowflake_usage.W_TABLES_D"
    ],
    "source.snowflake_usage.ACCOUNT_USAGE.TABLES": [],
    "source.snowflake_usage.ACCOUNT_USAGE.COLUMNS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.DATABASES": [],
    "source.snowflake_usage.ACCOUNT_USAGE.FILE_FORMATS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.FUNCTIONS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.LOAD_HISTORY": [],
    "source.snowflake_usage.ACCOUNT_USAGE.LOGIN_HISTORY": [],
    "source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY": [],
    "source.snowflake_usage.ACCOUNT_USAGE.REFERENCIAL_CONSTRAINTS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.SCHEMADATA": [],
    "source.snowflake_usage.ACCOUNT_USAGE.SEQUENCES": [],
    "source.snowflake_usage.ACCOUNT_USAGE.STAGES": [],
    "source.snowflake_usage.ACCOUNT_USAGE.STORAGE_USAGE": [],
    "source.snowflake_usage.ACCOUNT_USAGE.TABLE_CONSTRAINTS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.TABLE_STORAGE_METRICS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.VIEWS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY": [],
    "source.snowflake_usage.ACCOUNT_USAGE.ACCESS_HISTORY": [],
    "source.snowflake_usage.ACCOUNT_USAGE.USERS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY": [],
    "source.snowflake_usage.ORGANIZATION_USAGE.RATE_SHEET_DAILY": []
  },
  "child_map": {
    "model.snowflake_usage.V_TABLES_STG": ["model.snowflake_usage.W_TABLES_D"],
    "model.snowflake_usage.V_DATABASES_STG": [
      "model.snowflake_usage.W_DATABASES_D"
    ],
    "model.snowflake_usage.V_DATABASE_DAILY_STORAGE_USAGE_STG": [
      "model.snowflake_usage.W_DATABASE_STORAGE_USAGE_F"
    ],
    "model.snowflake_usage.V_DAILY_STORAGE_USAGE_STG": [
      "model.snowflake_usage.W_DAILY_STORAGE_USAGE_F"
    ],
    "model.snowflake_usage.V_DATE_STG": [],
    "model.snowflake_usage.V_USERS_STG": ["model.snowflake_usage.W_USERS_D"],
    "model.snowflake_usage.V_DAILY_RATE_SHEET_STG": [
      "model.snowflake_usage.W_DAILY_STORAGE_USAGE_F",
      "model.snowflake_usage.W_DATABASE_STORAGE_USAGE_F",
      "model.snowflake_usage.W_QUERY_HISTORY_F",
      "model.snowflake_usage.W_WAREHOUSE_USAGE_F",
      "model.snowflake_usage.W_WAREHOUSE_USAGE_F"
    ],
    "model.snowflake_usage.V_COLUMNS_STG": [
      "model.snowflake_usage.W_COLUMNS_D"
    ],
    "model.snowflake_usage.V_WAREHOUSE_STG": [
      "model.snowflake_usage.W_WAREHOUSE_D"
    ],
    "model.snowflake_usage.V_WAREHOUSE_USAGE_STG": [
      "model.snowflake_usage.W_WAREHOUSE_USAGE_F"
    ],
    "model.snowflake_usage.V_QUERY_HISTORY_STG": [
      "model.snowflake_usage.W_QUERY_HISTORY_F"
    ],
    "model.snowflake_usage.V_ACCESS_HISTORY_STG": [
      "model.snowflake_usage.W_ACCESS_HISTORY_F"
    ],
    "model.snowflake_usage.W_DAILY_STORAGE_USAGE_F": [],
    "model.snowflake_usage.W_USERS_D": [],
    "model.snowflake_usage.W_COLUMNS_D": [],
    "model.snowflake_usage.W_DATABASES_D": [],
    "model.snowflake_usage.W_QUERY_HISTORY_F": [],
    "model.snowflake_usage.W_WAREHOUSE_USAGE_F": [],
    "model.snowflake_usage.W_DATABASE_STORAGE_USAGE_F": [],
    "model.snowflake_usage.W_ACCESS_HISTORY_F": [],
    "model.snowflake_usage.W_TABLES_D": [
      "model.snowflake_usage.V_ACCESS_HISTORY_STG",
      "test.snowflake_usage.not_null_W_TABLES_D_K_TABLE_DLHK.cc9d37fa5b",
      "test.snowflake_usage.unique_W_TABLES_D_K_TABLE_DLHK.58e5614fdc"
    ],
    "model.snowflake_usage.W_WAREHOUSE_D": [],
    "test.snowflake_usage.unique_W_TABLES_D_K_TABLE_DLHK.58e5614fdc": [],
    "test.snowflake_usage.not_null_W_TABLES_D_K_TABLE_DLHK.cc9d37fa5b": [],
    "source.snowflake_usage.ACCOUNT_USAGE.TABLES": [
      "model.snowflake_usage.V_TABLES_STG"
    ],
    "source.snowflake_usage.ACCOUNT_USAGE.COLUMNS": [
      "model.snowflake_usage.V_COLUMNS_STG"
    ],
    "source.snowflake_usage.ACCOUNT_USAGE.DATABASES": [
      "model.snowflake_usage.V_DATABASES_STG"
    ],
    "source.snowflake_usage.ACCOUNT_USAGE.FILE_FORMATS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.FUNCTIONS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.LOAD_HISTORY": [],
    "source.snowflake_usage.ACCOUNT_USAGE.LOGIN_HISTORY": [],
    "source.snowflake_usage.ACCOUNT_USAGE.QUERY_HISTORY": [
      "model.snowflake_usage.V_QUERY_HISTORY_STG",
      "model.snowflake_usage.V_WAREHOUSE_STG"
    ],
    "source.snowflake_usage.ACCOUNT_USAGE.REFERENCIAL_CONSTRAINTS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.SCHEMADATA": [],
    "source.snowflake_usage.ACCOUNT_USAGE.SEQUENCES": [],
    "source.snowflake_usage.ACCOUNT_USAGE.STAGES": [],
    "source.snowflake_usage.ACCOUNT_USAGE.STORAGE_USAGE": [
      "model.snowflake_usage.V_DAILY_STORAGE_USAGE_STG"
    ],
    "source.snowflake_usage.ACCOUNT_USAGE.TABLE_CONSTRAINTS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.TABLE_STORAGE_METRICS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.VIEWS": [],
    "source.snowflake_usage.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY": [
      "model.snowflake_usage.V_WAREHOUSE_USAGE_STG"
    ],
    "source.snowflake_usage.ACCOUNT_USAGE.ACCESS_HISTORY": [
      "model.snowflake_usage.V_ACCESS_HISTORY_STG"
    ],
    "source.snowflake_usage.ACCOUNT_USAGE.USERS": [
      "model.snowflake_usage.V_USERS_STG"
    ],
    "source.snowflake_usage.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY": [
      "model.snowflake_usage.V_DATABASE_DAILY_STORAGE_USAGE_STG"
    ],
    "source.snowflake_usage.ORGANIZATION_USAGE.RATE_SHEET_DAILY": [
      "model.snowflake_usage.V_DAILY_RATE_SHEET_STG"
    ]
  }
}
',
//     targetOrganizationId: 'someCustId',
//   },
// };
// const context = {};

// console.log(process.pid);

// console.log('xxxxxxxxxxxxx', payload);
// console.log('yyyyyyyyyyyyy', context);

// const internalInvokeType = parseInternalInvokeType(payload.internalInvokeType);

// const {manifest, catalog} = payload.req;

// const encoder = new TextEncoder();
// const encodedCatalog = encoder.encode(catalog);
// const encodedManifest = encoder.encode(manifest);

// const decoder = new TextDecoder();

// const decodedCatalog = decoder.decode(encodedCatalog);
// const decodedManifest = decoder.decode(encodedManifest);

// console.log(Buffer.from(decodedCatalog, 'base64').toString('base64') === decodedCatalog);
// console.log(decodedCatalog === catalog);

// console.log(Buffer.from(decodedManifest, 'base64').toString('base64') === decodedManifest);
// console.log(decodedManifest === manifest);

// asyncTask()
//   .then(() => internalInvoke(payload, internalInvokeType))
//   .then((res) => console.log(res))
//   .catch((error) => console.error(error));
